
TT_Score_Board_DMD_Native.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00003000  00003094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019a  0080015c  0080015c  000030f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a7a  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f42  00000000  00000000  00006db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167d  00000000  00000000  00007cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  00009378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa5  00000000  00000000  00009b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033f4  00000000  00000000  0000aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000de99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__ctors_end>
       4:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
       8:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_2>
       c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      10:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      14:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      18:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      1c:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__vector_7>
      20:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      24:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      28:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      2c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      30:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      34:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      38:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      3c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      40:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_16>
      44:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      48:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      4c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      50:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      54:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      58:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      5c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      60:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>
      64:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	30 86       	std	Z+8, r3	; 0x08
      6a:	0a 10       	cpse	r0, r10
      6c:	20 60       	ori	r18, 0x00	; 0
      6e:	00 03       	mulsu	r16, r16
      70:	07 0b       	sbc	r16, r23
      72:	09 0e       	add	r0, r25
      74:	0b 03       	fmul	r16, r19
      76:	05 05       	cpc	r16, r5
      78:	06 09       	sbc	r16, r6
      7a:	03 05       	cpc	r16, r3
      7c:	03 04       	cpc	r0, r3
      7e:	08 06       	cpc	r0, r24
      80:	08 08       	sbc	r0, r8
      82:	09 08       	sbc	r0, r9
      84:	08 08       	sbc	r0, r8
      86:	08 08       	sbc	r0, r8
      88:	03 03       	mulsu	r16, r19
      8a:	09 08       	sbc	r0, r9
      8c:	09 08       	sbc	r0, r9
      8e:	0c 0c       	add	r0, r12
      90:	09 09       	sbc	r16, r9
      92:	09 09       	sbc	r16, r9
      94:	08 0a       	sbc	r0, r24
      96:	0a 03       	fmul	r16, r18
      98:	09 0c       	add	r0, r9
      9a:	08 0c       	add	r0, r8
      9c:	0a 0a       	sbc	r0, r26
      9e:	09 0a       	sbc	r0, r25
      a0:	0a 09       	sbc	r16, r10
      a2:	0b 0a       	sbc	r0, r27
      a4:	0c 10       	cpse	r0, r12
      a6:	0c 0b       	sbc	r16, r28
      a8:	09 05       	cpc	r16, r9
      aa:	04 05       	cpc	r16, r4
      ac:	08 08       	sbc	r0, r8
      ae:	03 09       	sbc	r16, r3
      b0:	09 09       	sbc	r16, r9
      b2:	09 09       	sbc	r16, r9
      b4:	06 09       	sbc	r16, r6
      b6:	09 03       	fmul	r16, r17
      b8:	04 0a       	sbc	r0, r20
      ba:	03 0d       	add	r16, r3
      bc:	09 09       	sbc	r16, r9
      be:	09 09       	sbc	r16, r9
      c0:	06 08       	sbc	r0, r6
      c2:	06 09       	sbc	r16, r6
      c4:	09 0f       	add	r16, r25
      c6:	0b 09       	sbc	r16, r11
      c8:	07 06       	cpc	r0, r23
      ca:	02 06       	cpc	r0, r18
      cc:	09 08       	sbc	r0, r9
      ce:	fe fe       	.word	0xfefe	; ????
      d0:	fe 1d       	adc	r31, r14
      d2:	1d 1d       	adc	r17, r13
      d4:	1e 1e       	adc	r1, r30
      d6:	1e 00       	.word	0x001e	; ????
      d8:	1e 1e       	adc	r1, r30
      da:	1e 00       	.word	0x001e	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	30 30       	cpi	r19, 0x00	; 0
      e4:	f0 fe       	sbrs	r15, 0
      e6:	3e 30       	cpi	r19, 0x0E	; 14
      e8:	30 f0       	brcs	.+12     	; 0xf6 <__trampolines_end+0x8e>
      ea:	fe 3e       	cpi	r31, 0xEE	; 238
      ec:	30 06       	cpc	r3, r16
      ee:	1e 1f       	adc	r17, r30
      f0:	07 06       	cpc	r0, r23
      f2:	06 1e       	adc	r0, r22
      f4:	1f 07       	cpc	r17, r31
      f6:	06 06       	cpc	r0, r22
      f8:	38 7c       	andi	r19, 0xC8	; 200
      fa:	fe e6       	ldi	r31, 0x6E	; 110
      fc:	ff c6       	rjmp	.+3582   	; 0xefc <_ZN3DMD10writePixelEjjhh+0x138>
      fe:	ce 8c       	ldd	r12, Y+30	; 0x1e
     100:	0c 04       	cpc	r0, r12
     102:	0c 1c       	adc	r0, r12
     104:	18 3f       	cpi	r17, 0xF8	; 248
     106:	19 1f       	adc	r17, r25
     108:	0f 07       	cpc	r16, r31
     10a:	3c 7e       	andi	r19, 0xEC	; 236
     10c:	42 42       	sbci	r20, 0x22	; 34
     10e:	7e 3c       	cpi	r23, 0xCE	; 206
     110:	80 60       	ori	r24, 0x00	; 0
     112:	10 8c       	ldd	r1, Z+24	; 0x18
     114:	82 80       	ldd	r8, Z+2	; 0x02
     116:	80 00       	.word	0x0080	; ????
     118:	00 00       	nop
     11a:	00 10       	cpse	r0, r0
     11c:	0c 02       	muls	r16, r28
     11e:	01 00       	.word	0x0001	; ????
     120:	0f 1f       	adc	r16, r31
     122:	10 10       	cpse	r1, r0
     124:	1f 0f       	add	r17, r31
     126:	00 80       	ld	r0, Z
     128:	9c fe       	.word	0xfe9c	; ????
     12a:	fe e6       	ldi	r31, 0x6E	; 110
     12c:	be 3e       	cpi	r27, 0xEE	; 238
     12e:	9c 80       	ldd	r9, Y+4	; 0x04
     130:	80 07       	cpc	r24, r16
     132:	0f 1f       	adc	r16, r31
     134:	19 18       	sub	r1, r9
     136:	19 1f       	adc	r17, r25
     138:	0f 0f       	add	r16, r31
     13a:	1f 1d       	adc	r17, r15
     13c:	1e 1e       	adc	r1, r30
     13e:	1e 00       	.word	0x001e	; ????
     140:	00 00       	nop
     142:	e0 f8       	bld	r14, 0
     144:	fc 1e       	adc	r15, r28
     146:	02 0f       	add	r16, r18
     148:	3f 7f       	andi	r19, 0xFF	; 255
     14a:	f0 80       	ld	r15, Z
     14c:	02 1e       	adc	r0, r18
     14e:	fc f8       	.word	0xf8fc	; ????
     150:	e0 80       	ld	r14, Z
     152:	f0 7f       	andi	r31, 0xF0	; 240
     154:	3f 0f       	add	r19, r31
     156:	08 68       	ori	r16, 0x88	; 136
     158:	3e 3e       	cpi	r19, 0xEE	; 238
     15a:	68 08       	sbc	r6, r8
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	c0 c0       	rjmp	.+384    	; 0x2e4 <__trampolines_end+0x27c>
     164:	c0 f8       	bld	r12, 0
     166:	f8 f8       	.word	0xf8f8	; ????
     168:	c0 c0       	rjmp	.+384    	; 0x2ea <__trampolines_end+0x282>
     16a:	c0 01       	movw	r24, r0
     16c:	01 01       	movw	r0, r2
     16e:	0f 0f       	add	r16, r31
     170:	0f 01       	movw	r0, r30
     172:	01 01       	movw	r0, r2
     174:	00 00       	nop
     176:	00 dc       	rcall	.-2048   	; 0xfffff978 <__eeprom_end+0xff7ef978>
     178:	7c 3c       	cpi	r23, 0xCC	; 204
     17a:	80 80       	ld	r8, Z
     17c:	80 80       	ld	r8, Z
     17e:	80 03       	fmuls	r16, r16
     180:	03 03       	mulsu	r16, r19
     182:	03 03       	mulsu	r16, r19
     184:	00 00       	nop
     186:	00 1c       	adc	r0, r0
     188:	1c 1c       	adc	r1, r12
     18a:	00 80       	ld	r0, Z
     18c:	78 06       	cpc	r7, r24
     18e:	18 07       	cpc	r17, r24
     190:	00 00       	nop
     192:	f8 fc       	.word	0xfcf8	; ????
     194:	fe 06       	cpc	r15, r30
     196:	06 fe       	sbrs	r0, 6
     198:	fc f8       	.word	0xf8fc	; ????
     19a:	07 0f       	add	r16, r23
     19c:	1f 18       	sub	r1, r15
     19e:	18 1f       	adc	r17, r24
     1a0:	0f 07       	cpc	r16, r31
     1a2:	60 70       	andi	r22, 0x00	; 0
     1a4:	38 fe       	.word	0xfe38	; ????
     1a6:	fe fe       	.word	0xfefe	; ????
     1a8:	00 00       	nop
     1aa:	00 1f       	adc	r16, r16
     1ac:	1f 1f       	adc	r17, r31
     1ae:	18 1c       	adc	r1, r8
     1b0:	1e 06       	cpc	r1, r30
     1b2:	86 fe       	sbrs	r8, 6
     1b4:	fc 78       	andi	r31, 0x8C	; 140
     1b6:	18 1c       	adc	r1, r8
     1b8:	1e 1f       	adc	r17, r30
     1ba:	1b 19       	sub	r17, r11
     1bc:	18 18       	sub	r1, r8
     1be:	08 1c       	adc	r0, r8
     1c0:	1e c6       	rjmp	.+3132   	; 0xdfe <_ZN3DMD10writePixelEjjhh+0x3a>
     1c2:	c6 fe       	sbrs	r12, 6
     1c4:	fc 38       	cpi	r31, 0x8C	; 140
     1c6:	06 0e       	add	r0, r22
     1c8:	1e 18       	sub	r1, r14
     1ca:	18 1f       	adc	r17, r24
     1cc:	0f 07       	cpc	r16, r31
     1ce:	80 c0       	rjmp	.+256    	; 0x2d0 <__trampolines_end+0x268>
     1d0:	f0 38       	cpi	r31, 0x80	; 128
     1d2:	1c fe       	.word	0xfe1c	; ????
     1d4:	fe fe       	.word	0xfefe	; ????
     1d6:	00 03       	mulsu	r16, r16
     1d8:	03 03       	mulsu	r16, r19
     1da:	03 03       	mulsu	r16, r19
     1dc:	1f 1f       	adc	r17, r31
     1de:	1f 03       	fmul	r17, r23
     1e0:	f0 fe       	sbrs	r15, 0
     1e2:	fe 66       	ori	r31, 0x6E	; 110
     1e4:	66 e6       	ldi	r22, 0x66	; 102
     1e6:	c6 86       	std	Z+14, r12	; 0x0e
     1e8:	06 0e       	add	r0, r22
     1ea:	1e 18       	sub	r1, r14
     1ec:	18 1f       	adc	r17, r24
     1ee:	0f 07       	cpc	r16, r31
     1f0:	f0 fc       	sbrc	r15, 0
     1f2:	fe 46       	sbci	r31, 0x6E	; 110
     1f4:	66 ee       	ldi	r22, 0xE6	; 230
     1f6:	ce 8c       	ldd	r12, Y+30	; 0x1e
     1f8:	03 0f       	add	r16, r19
     1fa:	1f 18       	sub	r1, r15
     1fc:	18 1f       	adc	r17, r24
     1fe:	0f 07       	cpc	r16, r31
     200:	06 06       	cpc	r0, r22
     202:	06 86       	std	Z+14, r0	; 0x0e
     204:	e6 f6       	brtc	.-72     	; 0x1be <__trampolines_end+0x156>
     206:	1e 06       	cpc	r1, r30
     208:	00 00       	nop
     20a:	1c 1f       	adc	r17, r28
     20c:	1f 01       	movw	r2, r30
     20e:	00 00       	nop
     210:	38 fc       	.word	0xfc38	; ????
     212:	fe c6       	rjmp	.+3580   	; 0x1010 <_ZN3DMDC1EhhPh+0x82>
     214:	c6 fe       	sbrs	r12, 6
     216:	fc 38       	cpi	r31, 0x8C	; 140
     218:	07 0f       	add	r16, r23
     21a:	1f 18       	sub	r1, r15
     21c:	18 1f       	adc	r17, r24
     21e:	0f 07       	cpc	r16, r31
     220:	78 fc       	.word	0xfc78	; ????
     222:	fe 86       	std	Y+14, r15	; 0x0e
     224:	86 fe       	sbrs	r8, 6
     226:	fc f0       	brlt	.+62     	; 0x266 <__trampolines_end+0x1fe>
     228:	04 0c       	add	r0, r4
     22a:	1d 19       	sub	r17, r13
     22c:	18 1f       	adc	r17, r24
     22e:	0f 03       	fmul	r16, r23
     230:	70 70       	andi	r23, 0x00	; 0
     232:	70 1c       	adc	r7, r0
     234:	1c 1c       	adc	r1, r12
     236:	70 70       	andi	r23, 0x00	; 0
     238:	70 dc       	rcall	.-1824   	; 0xfffffb1a <__eeprom_end+0xff7efb1a>
     23a:	7c 3c       	cpi	r23, 0xCC	; 204
     23c:	e0 e0       	ldi	r30, 0x00	; 0
     23e:	e0 f0       	brcs	.+56     	; 0x278 <__trampolines_end+0x210>
     240:	70 70       	andi	r23, 0x00	; 0
     242:	70 38       	cpi	r23, 0x80	; 128
     244:	38 03       	fmul	r19, r16
     246:	03 03       	mulsu	r16, r19
     248:	07 07       	cpc	r16, r23
     24a:	07 07       	cpc	r16, r23
     24c:	0e 0e       	add	r0, r30
     24e:	70 70       	andi	r23, 0x00	; 0
     250:	70 70       	andi	r23, 0x00	; 0
     252:	70 70       	andi	r23, 0x00	; 0
     254:	70 70       	andi	r23, 0x00	; 0
     256:	07 07       	cpc	r16, r23
     258:	07 07       	cpc	r16, r23
     25a:	07 07       	cpc	r16, r23
     25c:	07 07       	cpc	r16, r23
     25e:	38 38       	cpi	r19, 0x88	; 136
     260:	70 70       	andi	r23, 0x00	; 0
     262:	70 f0       	brcs	.+28     	; 0x280 <__trampolines_end+0x218>
     264:	e0 e0       	ldi	r30, 0x00	; 0
     266:	e0 0e       	add	r14, r16
     268:	0e 07       	cpc	r16, r30
     26a:	07 07       	cpc	r16, r23
     26c:	07 03       	mulsu	r16, r23
     26e:	03 03       	mulsu	r16, r19
     270:	18 1c       	adc	r1, r8
     272:	9e c6       	rjmp	.+3388   	; 0xfb0 <_ZN3DMDC1EhhPh+0x22>
     274:	e6 fe       	sbrs	r14, 6
     276:	7c 38       	cpi	r23, 0x8C	; 140
     278:	00 00       	nop
     27a:	1d 1d       	adc	r17, r13
     27c:	1d 00       	.word	0x001d	; ????
     27e:	00 00       	nop
     280:	e0 18       	sub	r14, r0
     282:	c4 f4       	brge	.+48     	; 0x2b4 <__trampolines_end+0x24c>
     284:	3a 0a       	sbc	r3, r26
     286:	0a f2       	brmi	.-126    	; 0x20a <__trampolines_end+0x1a2>
     288:	fa 7c       	andi	r31, 0xCA	; 202
     28a:	08 f0       	brcs	.+2      	; 0x28e <__trampolines_end+0x226>
     28c:	07 18       	sub	r0, r7
     28e:	27 2f       	mov	r18, r23
     290:	48 48       	sbci	r20, 0x88	; 136
     292:	4c 4f       	sbci	r20, 0xFC	; 252
     294:	4f 28       	or	r4, r15
     296:	36 11       	cpse	r19, r6
     298:	00 80       	ld	r0, Z
     29a:	e0 f8       	bld	r14, 0
     29c:	fe 1e       	adc	r15, r30
     29e:	fe f8       	.word	0xf8fe	; ????
     2a0:	e0 80       	ld	r14, Z
     2a2:	00 00       	nop
     2a4:	1c 1f       	adc	r17, r28
     2a6:	0f 07       	cpc	r16, r31
     2a8:	06 06       	cpc	r0, r22
     2aa:	06 07       	cpc	r16, r22
     2ac:	0f 1f       	adc	r16, r31
     2ae:	1c 10       	cpse	r1, r12
     2b0:	fe fe       	.word	0xfefe	; ????
     2b2:	fe c6       	rjmp	.+3580   	; 0x10b0 <_ZN3DMD8drawLineEiiiih+0x6c>
     2b4:	c6 fe       	sbrs	r12, 6
     2b6:	bc 98       	cbi	0x17, 4	; 23
     2b8:	00 1f       	adc	r16, r16
     2ba:	1f 1f       	adc	r17, r31
     2bc:	18 18       	sub	r1, r8
     2be:	18 1f       	adc	r17, r24
     2c0:	0f 07       	cpc	r16, r31
     2c2:	f0 fc       	sbrc	r15, 0
     2c4:	fc 0e       	add	r15, r28
     2c6:	06 0e       	add	r0, r22
     2c8:	1e 1c       	adc	r1, r14
     2ca:	08 03       	fmul	r16, r16
     2cc:	0f 1f       	adc	r16, r31
     2ce:	1c 18       	sub	r1, r12
     2d0:	1c 1f       	adc	r17, r28
     2d2:	0e 06       	cpc	r0, r30
     2d4:	fe fe       	.word	0xfefe	; ????
     2d6:	fe 06       	cpc	r15, r30
     2d8:	06 0e       	add	r0, r22
     2da:	fe fc       	.word	0xfcfe	; ????
     2dc:	f0 1f       	adc	r31, r16
     2de:	1f 1f       	adc	r17, r31
     2e0:	18 18       	sub	r1, r8
     2e2:	1c 1f       	adc	r17, r28
     2e4:	0f 03       	fmul	r16, r23
     2e6:	fe fe       	.word	0xfefe	; ????
     2e8:	fe c6       	rjmp	.+3580   	; 0x10e6 <_ZN3DMD8drawLineEiiiih+0xa2>
     2ea:	c6 c6       	rjmp	.+3468   	; 0x1078 <_ZN3DMD8drawLineEiiiih+0x34>
     2ec:	c6 c6       	rjmp	.+3468   	; 0x107a <_ZN3DMD8drawLineEiiiih+0x36>
     2ee:	06 1f       	adc	r16, r22
     2f0:	1f 1f       	adc	r17, r31
     2f2:	18 18       	sub	r1, r8
     2f4:	18 18       	sub	r1, r8
     2f6:	18 18       	sub	r1, r8
     2f8:	fe fe       	.word	0xfefe	; ????
     2fa:	fe c6       	rjmp	.+3580   	; 0x10f8 <_ZN3DMD8drawLineEiiiih+0xb4>
     2fc:	c6 c6       	rjmp	.+3468   	; 0x108a <_ZN3DMD8drawLineEiiiih+0x46>
     2fe:	c6 06       	cpc	r12, r22
     300:	1f 1f       	adc	r17, r31
     302:	1f 00       	.word	0x001f	; ????
     304:	00 00       	nop
     306:	00 00       	nop
     308:	f0 fc       	sbrc	r15, 0
     30a:	fc 0e       	add	r15, r28
     30c:	06 c6       	rjmp	.+3084   	; 0xf1a <_ZN3DMD10writePixelEjjhh+0x156>
     30e:	ce de       	rcall	.-612    	; 0xac <__trampolines_end+0x44>
     310:	dc c8       	rjmp	.-3656   	; 0xfffff4ca <__eeprom_end+0xff7ef4ca>
     312:	03 0f       	add	r16, r19
     314:	0f 1c       	adc	r0, r15
     316:	18 18       	sub	r1, r8
     318:	1c 1f       	adc	r17, r28
     31a:	0f 0f       	add	r16, r31
     31c:	fe fe       	.word	0xfefe	; ????
     31e:	fe c0       	rjmp	.+508    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     320:	c0 c0       	rjmp	.+384    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     322:	c0 fe       	sbrs	r12, 0
     324:	fe fe       	.word	0xfefe	; ????
     326:	1f 1f       	adc	r17, r31
     328:	1f 00       	.word	0x001f	; ????
     32a:	00 00       	nop
     32c:	00 1f       	adc	r16, r16
     32e:	1f 1f       	adc	r17, r31
     330:	fe fe       	.word	0xfefe	; ????
     332:	fe 1f       	adc	r31, r30
     334:	1f 1f       	adc	r17, r31
     336:	00 00       	nop
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	fe fe       	.word	0xfefe	; ????
     33e:	fe 06       	cpc	r15, r30
     340:	0f 1f       	adc	r16, r31
     342:	1c 18       	sub	r1, r12
     344:	18 1f       	adc	r17, r24
     346:	0f 07       	cpc	r16, r31
     348:	fe fe       	.word	0xfefe	; ????
     34a:	fe c0       	rjmp	.+508    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     34c:	e0 f0       	brcs	.+56     	; 0x386 <__trampolines_end+0x31e>
     34e:	f8 dc       	rcall	.-1552   	; 0xfffffd40 <__eeprom_end+0xff7efd40>
     350:	0e 06       	cpc	r0, r30
     352:	02 00       	.word	0x0002	; ????
     354:	1f 1f       	adc	r17, r31
     356:	1f 00       	.word	0x001f	; ????
     358:	00 00       	nop
     35a:	01 07       	cpc	r16, r17
     35c:	1f 1e       	adc	r1, r31
     35e:	18 10       	cpse	r1, r8
     360:	fe fe       	.word	0xfefe	; ????
     362:	fe 00       	.word	0x00fe	; ????
     364:	00 00       	nop
     366:	00 00       	nop
     368:	1f 1f       	adc	r17, r31
     36a:	1f 18       	sub	r1, r15
     36c:	18 18       	sub	r1, r8
     36e:	18 18       	sub	r1, r8
     370:	fe fe       	.word	0xfefe	; ????
     372:	fe 3e       	cpi	r31, 0xEE	; 238
     374:	f8 80       	ld	r15, Y
     376:	80 f8       	bld	r8, 0
     378:	3e fe       	.word	0xfe3e	; ????
     37a:	fe fe       	.word	0xfefe	; ????
     37c:	1f 1f       	adc	r17, r31
     37e:	1f 00       	.word	0x001f	; ????
     380:	03 1f       	adc	r16, r19
     382:	1f 03       	fmul	r17, r23
     384:	00 1f       	adc	r16, r16
     386:	1f 1f       	adc	r17, r31
     388:	fe fe       	.word	0xfefe	; ????
     38a:	fe 7c       	andi	r31, 0xCE	; 206
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 fe       	sbrs	r8, 0
     390:	fe fe       	.word	0xfefe	; ????
     392:	1f 1f       	adc	r17, r31
     394:	1f 00       	.word	0x001f	; ????
     396:	01 03       	mulsu	r16, r17
     398:	0f 1f       	adc	r16, r31
     39a:	1f 1f       	adc	r17, r31
     39c:	f0 fc       	sbrc	r15, 0
     39e:	fc 0e       	add	r15, r28
     3a0:	06 06       	cpc	r0, r22
     3a2:	0e fc       	.word	0xfc0e	; ????
     3a4:	fc f0       	brlt	.+62     	; 0x3e4 <__trampolines_end+0x37c>
     3a6:	03 0f       	add	r16, r19
     3a8:	0f 1c       	adc	r0, r15
     3aa:	18 18       	sub	r1, r8
     3ac:	1c 0f       	add	r17, r28
     3ae:	0f 03       	fmul	r16, r23
     3b0:	fe fe       	.word	0xfefe	; ????
     3b2:	fe c6       	rjmp	.+3580   	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
     3b4:	c6 c6       	rjmp	.+3468   	; 0x1142 <_ZN3DMD8drawLineEiiiih+0xfe>
     3b6:	fe 7e       	andi	r31, 0xEE	; 238
     3b8:	3c 1f       	adc	r19, r28
     3ba:	1f 1f       	adc	r17, r31
     3bc:	00 00       	nop
     3be:	00 00       	nop
     3c0:	00 00       	nop
     3c2:	f0 fc       	sbrc	r15, 0
     3c4:	fc 0e       	add	r15, r28
     3c6:	06 06       	cpc	r0, r22
     3c8:	0e fc       	.word	0xfc0e	; ????
     3ca:	fc f0       	brlt	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3cc:	03 0f       	add	r16, r19
     3ce:	0f 1c       	adc	r0, r15
     3d0:	18 1e       	adc	r1, r24
     3d2:	1c 1f       	adc	r17, r28
     3d4:	1f 33       	cpi	r17, 0x3F	; 63
     3d6:	fe fe       	.word	0xfefe	; ????
     3d8:	fe c6       	rjmp	.+3580   	; 0x11d6 <_ZN3DMD13drawFilledBoxEiiiih+0x26>
     3da:	c6 c6       	rjmp	.+3468   	; 0x1168 <_ZN3DMD8drawLineEiiiih+0x124>
     3dc:	fe 7e       	andi	r31, 0xEE	; 238
     3de:	3c 00       	.word	0x003c	; ????
     3e0:	1f 1f       	adc	r17, r31
     3e2:	1f 00       	.word	0x001f	; ????
     3e4:	00 03       	mulsu	r16, r16
     3e6:	0f 1f       	adc	r16, r31
     3e8:	1c 10       	cpse	r1, r12
     3ea:	38 7c       	andi	r19, 0xC8	; 200
     3ec:	fe e6       	ldi	r31, 0x6E	; 110
     3ee:	e6 ee       	ldi	r30, 0xE6	; 230
     3f0:	de dc       	rcall	.-1604   	; 0xfffffdae <__eeprom_end+0xff7efdae>
     3f2:	98 06       	cpc	r9, r24
     3f4:	0e 1e       	adc	r0, r30
     3f6:	1c 18       	sub	r1, r12
     3f8:	19 1f       	adc	r17, r25
     3fa:	0f 07       	cpc	r16, r31
     3fc:	06 06       	cpc	r0, r22
     3fe:	06 06       	cpc	r0, r22
     400:	fe fe       	.word	0xfefe	; ????
     402:	fe 06       	cpc	r15, r30
     404:	06 06       	cpc	r0, r22
     406:	06 00       	.word	0x0006	; ????
     408:	00 00       	nop
     40a:	00 1f       	adc	r16, r16
     40c:	1f 1f       	adc	r17, r31
     40e:	00 00       	nop
     410:	00 00       	nop
     412:	fe fe       	.word	0xfefe	; ????
     414:	fe 00       	.word	0x00fe	; ????
     416:	00 00       	nop
     418:	00 fe       	sbrs	r0, 0
     41a:	fe fe       	.word	0xfefe	; ????
     41c:	07 0f       	add	r16, r23
     41e:	1f 1c       	adc	r1, r15
     420:	18 18       	sub	r1, r8
     422:	1c 1f       	adc	r17, r28
     424:	0f 07       	cpc	r16, r31
     426:	1e fe       	.word	0xfe1e	; ????
     428:	fc f0       	brlt	.+62     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     42a:	80 00       	.word	0x0080	; ????
     42c:	80 f0       	brcs	.+32     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     42e:	fc fe       	.word	0xfefc	; ????
     430:	1e 02       	muls	r17, r30
     432:	00 00       	nop
     434:	03 1f       	adc	r16, r19
     436:	1f 1c       	adc	r1, r15
     438:	1f 1f       	adc	r17, r31
     43a:	03 00       	.word	0x0003	; ????
     43c:	00 00       	nop
     43e:	fe fe       	.word	0xfefe	; ????
     440:	f8 00       	.word	0x00f8	; ????
     442:	80 f8       	bld	r8, 0
     444:	fe 3e       	cpi	r31, 0xEE	; 238
     446:	fe f8       	.word	0xf8fe	; ????
     448:	80 00       	.word	0x0080	; ????
     44a:	f8 fe       	.word	0xfef8	; ????
     44c:	fe 06       	cpc	r15, r30
     44e:	00 0f       	add	r16, r16
     450:	1f 1f       	adc	r17, r31
     452:	1f 07       	cpc	r17, r31
     454:	01 00       	.word	0x0001	; ????
     456:	01 07       	cpc	r16, r17
     458:	1f 1f       	adc	r17, r31
     45a:	1f 0f       	add	r17, r31
     45c:	00 00       	nop
     45e:	06 1e       	adc	r0, r22
     460:	3c f8       	.word	0xf83c	; ????
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	f0 f8       	bld	r15, 0
     466:	3c 1e       	adc	r3, r28
     468:	06 02       	muls	r16, r22
     46a:	18 1e       	adc	r1, r24
     46c:	0f 07       	cpc	r16, r31
     46e:	03 01       	movw	r0, r6
     470:	03 07       	cpc	r16, r19
     472:	0f 1e       	adc	r0, r31
     474:	18 10       	cpse	r1, r8
     476:	02 0e       	add	r0, r18
     478:	1e 7e       	andi	r17, 0xEE	; 238
     47a:	f8 e0       	ldi	r31, 0x08	; 8
     47c:	f8 7e       	andi	r31, 0xE8	; 232
     47e:	1e 0e       	add	r1, r30
     480:	02 00       	.word	0x0002	; ????
     482:	00 00       	nop
     484:	00 1f       	adc	r16, r16
     486:	1f 1f       	adc	r17, r31
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	00 06       	cpc	r0, r16
     48e:	06 c6       	rjmp	.+3084   	; 0x109c <_ZN3DMD8drawLineEiiiih+0x58>
     490:	e6 f6       	brtc	.-72     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     492:	3e 1e       	adc	r3, r30
     494:	0e 1c       	adc	r0, r14
     496:	1e 1f       	adc	r17, r30
     498:	1b 19       	sub	r17, r11
     49a:	18 18       	sub	r1, r8
     49c:	18 18       	sub	r1, r8
     49e:	fe fe       	.word	0xfefe	; ????
     4a0:	fe 06       	cpc	r15, r30
     4a2:	06 ff       	sbrs	r16, 6
     4a4:	ff ff       	.word	0xffff	; ????
     4a6:	c0 c0       	rjmp	.+384    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     4a8:	06 78       	andi	r16, 0x86	; 134
     4aa:	80 00       	.word	0x0080	; ????
     4ac:	00 00       	nop
     4ae:	07 18       	sub	r0, r7
     4b0:	06 06       	cpc	r0, r22
     4b2:	fe fe       	.word	0xfefe	; ????
     4b4:	fe c0       	rjmp	.+508    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     4b6:	c0 ff       	sbrs	r28, 0
     4b8:	ff ff       	.word	0xffff	; ????
     4ba:	40 70       	andi	r20, 0x00	; 0
     4bc:	7c 1e       	adc	r7, r28
     4be:	1e 7c       	andi	r17, 0xCE	; 206
     4c0:	70 40       	sbci	r23, 0x00	; 0
	...
     4d2:	40 40       	sbci	r20, 0x00	; 0
     4d4:	40 40       	sbci	r20, 0x00	; 0
     4d6:	40 40       	sbci	r20, 0x00	; 0
     4d8:	40 40       	sbci	r20, 0x00	; 0
     4da:	02 06       	cpc	r0, r18
     4dc:	04 00       	.word	0x0004	; ????
     4de:	00 00       	nop
     4e0:	40 60       	ori	r20, 0x00	; 0
     4e2:	70 30       	cpi	r23, 0x00	; 0
     4e4:	b0 b0       	in	r11, 0x00	; 0
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	e0 0e       	add	r14, r16
     4ea:	1f 1f       	adc	r17, r31
     4ec:	1b 19       	sub	r17, r11
     4ee:	09 1f       	adc	r16, r25
     4f0:	1f 1f       	adc	r17, r31
     4f2:	fe fe       	.word	0xfefe	; ????
     4f4:	fe 60       	ori	r31, 0x0E	; 14
     4f6:	30 30       	cpi	r19, 0x00	; 0
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	c0 1f       	adc	r28, r16
     4fc:	1f 1f       	adc	r17, r31
     4fe:	0c 18       	sub	r0, r12
     500:	18 1f       	adc	r17, r24
     502:	0f 07       	cpc	r16, r31
     504:	c0 e0       	ldi	r28, 0x00	; 0
     506:	f0 70       	andi	r31, 0x00	; 0
     508:	30 30       	cpi	r19, 0x00	; 0
     50a:	70 60       	ori	r23, 0x00	; 0
     50c:	40 07       	cpc	r20, r16
     50e:	0f 1f       	adc	r16, r31
     510:	1c 18       	sub	r1, r12
     512:	18 1c       	adc	r1, r8
     514:	0c 04       	cpc	r0, r12
     516:	c0 e0       	ldi	r28, 0x00	; 0
     518:	f0 30       	cpi	r31, 0x00	; 0
     51a:	30 60       	ori	r19, 0x00	; 0
     51c:	fe fe       	.word	0xfefe	; ????
     51e:	fe 07       	cpc	r31, r30
     520:	0f 1f       	adc	r16, r31
     522:	18 18       	sub	r1, r8
     524:	0c 1f       	adc	r16, r28
     526:	1f 1f       	adc	r17, r31
     528:	c0 e0       	ldi	r28, 0x00	; 0
     52a:	f0 b0       	in	r15, 0x00	; 0
     52c:	b0 b0       	in	r11, 0x00	; 0
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	c0 07       	cpc	r28, r16
     532:	0f 1f       	adc	r16, r31
     534:	1d 19       	sub	r17, r13
     536:	19 1d       	adc	r17, r9
     538:	0d 05       	cpc	r16, r13
     53a:	30 fc       	sbrc	r3, 0
     53c:	fe fe       	.word	0xfefe	; ????
     53e:	36 36       	cpi	r19, 0x66	; 102
     540:	00 1f       	adc	r16, r16
     542:	1f 1f       	adc	r17, r31
     544:	00 00       	nop
     546:	c0 e0       	ldi	r28, 0x00	; 0
     548:	f0 30       	cpi	r31, 0x00	; 0
     54a:	30 60       	ori	r19, 0x00	; 0
     54c:	f0 f0       	brcs	.+60     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     54e:	f0 47       	sbci	r31, 0x70	; 112
     550:	cf df       	rcall	.-98     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     552:	d8 d8       	rcall	.-3664   	; 0xfffff704 <__eeprom_end+0xff7ef704>
     554:	cc ff       	.word	0xffcc	; ????
     556:	7f 3f       	cpi	r23, 0xFF	; 255
     558:	fe fe       	.word	0xfefe	; ????
     55a:	fe 20       	and	r15, r14
     55c:	30 30       	cpi	r19, 0x00	; 0
     55e:	f0 f0       	brcs	.+60     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     560:	e0 1f       	adc	r30, r16
     562:	1f 1f       	adc	r17, r31
     564:	00 00       	nop
     566:	00 1f       	adc	r16, r16
     568:	1f 1f       	adc	r17, r31
     56a:	f6 f6       	brtc	.-68     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     56c:	f6 1f       	adc	r31, r22
     56e:	1f 1f       	adc	r17, r31
     570:	00 f6       	brcc	.-128    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     572:	f6 f6       	brtc	.-68     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     574:	c0 ff       	sbrs	r28, 0
     576:	ff 7f       	andi	r31, 0xFF	; 255
     578:	fe fe       	.word	0xfefe	; ????
     57a:	fe c0       	rjmp	.+508    	; 0x778 <_ZL9System5x7+0xa6>
     57c:	e0 f0       	brcs	.+56     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     57e:	f0 30       	cpi	r31, 0x00	; 0
     580:	10 00       	.word	0x0010	; ????
     582:	1f 1f       	adc	r17, r31
     584:	1f 03       	fmul	r17, r23
     586:	01 07       	cpc	r16, r17
     588:	1f 1e       	adc	r1, r31
     58a:	1c 10       	cpse	r1, r12
     58c:	fe fe       	.word	0xfefe	; ????
     58e:	fe 1f       	adc	r31, r30
     590:	1f 1f       	adc	r17, r31
     592:	f0 f0       	brcs	.+60     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     594:	f0 20       	and	r15, r0
     596:	30 f0       	brcs	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	20 30       	cpi	r18, 0x00	; 0
     59c:	f0 f0       	brcs	.+60     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     59e:	e0 1f       	adc	r30, r16
     5a0:	1f 1f       	adc	r17, r31
     5a2:	00 00       	nop
     5a4:	1f 1f       	adc	r17, r31
     5a6:	1f 00       	.word	0x001f	; ????
     5a8:	00 1f       	adc	r16, r16
     5aa:	1f 1f       	adc	r17, r31
     5ac:	f0 f0       	brcs	.+60     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5ae:	f0 20       	and	r15, r0
     5b0:	30 30       	cpi	r19, 0x00	; 0
     5b2:	f0 f0       	brcs	.+60     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5b4:	e0 1f       	adc	r30, r16
     5b6:	1f 1f       	adc	r17, r31
     5b8:	00 00       	nop
     5ba:	00 1f       	adc	r16, r16
     5bc:	1f 1f       	adc	r17, r31
     5be:	c0 e0       	ldi	r28, 0x00	; 0
     5c0:	f0 70       	andi	r31, 0x00	; 0
     5c2:	30 70       	andi	r19, 0x00	; 0
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	c0 07       	cpc	r28, r16
     5c8:	0f 1f       	adc	r16, r31
     5ca:	1c 18       	sub	r1, r12
     5cc:	1c 1f       	adc	r17, r28
     5ce:	0f 07       	cpc	r16, r31
     5d0:	f0 f0       	brcs	.+60     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     5d2:	f0 60       	ori	r31, 0x00	; 0
     5d4:	30 70       	andi	r19, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c0 ff       	sbrs	r28, 0
     5da:	ff ff       	.word	0xffff	; ????
     5dc:	0c 18       	sub	r0, r12
     5de:	18 1f       	adc	r17, r24
     5e0:	0f 07       	cpc	r16, r31
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	f0 30       	cpi	r31, 0x00	; 0
     5e6:	30 60       	ori	r19, 0x00	; 0
     5e8:	f0 f0       	brcs	.+60     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     5ea:	f0 07       	cpc	r31, r16
     5ec:	0f 1f       	adc	r16, r31
     5ee:	18 18       	sub	r1, r8
     5f0:	0c ff       	.word	0xff0c	; ????
     5f2:	ff ff       	.word	0xffff	; ????
     5f4:	f0 f0       	brcs	.+60     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     5f6:	f0 20       	and	r15, r0
     5f8:	30 10       	cpse	r3, r0
     5fa:	1f 1f       	adc	r17, r31
     5fc:	1f 00       	.word	0x001f	; ????
     5fe:	00 00       	nop
     600:	e0 f0       	brcs	.+56     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     602:	f0 90 90 b0 	lds	r15, 0xB090	; 0x80b090 <__bss_end+0xad9a>
     606:	30 20       	and	r3, r0
     608:	08 19       	sub	r16, r8
     60a:	1b 13       	cpse	r17, r27
     60c:	13 1f       	adc	r17, r19
     60e:	1f 0e       	add	r1, r31
     610:	30 fc       	sbrc	r3, 0
     612:	fc fe       	.word	0xfefc	; ????
     614:	30 30       	cpi	r19, 0x00	; 0
     616:	00 0f       	add	r16, r16
     618:	1f 1f       	adc	r17, r31
     61a:	18 18       	sub	r1, r8
     61c:	f0 f0       	brcs	.+60     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     61e:	f0 00       	.word	0x00f0	; ????
     620:	00 00       	nop
     622:	f0 f0       	brcs	.+60     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
     624:	f0 0f       	add	r31, r16
     626:	1f 1f       	adc	r17, r31
     628:	18 18       	sub	r1, r8
     62a:	08 1f       	adc	r16, r24
     62c:	1f 1f       	adc	r17, r31
     62e:	10 f0       	brcs	.+4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     630:	f0 c0       	rjmp	.+480    	; 0x812 <_ZL9System5x7+0x140>
     632:	00 e0       	ldi	r16, 0x00	; 0
     634:	f0 f0       	brcs	.+60     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     636:	10 00       	.word	0x0010	; ????
     638:	00 07       	cpc	r16, r16
     63a:	1f 1c       	adc	r1, r15
     63c:	1f 07       	cpc	r17, r31
     63e:	00 00       	nop
     640:	10 f0       	brcs	.+4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	00 00       	nop
     646:	f0 f0       	brcs	.+60     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     648:	f0 00       	.word	0x00f0	; ????
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	f0 f0       	brcs	.+60     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     64e:	10 00       	.word	0x0010	; ????
     650:	00 07       	cpc	r16, r16
     652:	1f 1e       	adc	r1, r31
     654:	0f 03       	fmul	r16, r23
     656:	00 03       	mulsu	r16, r16
     658:	0f 1e       	adc	r0, r31
     65a:	1f 07       	cpc	r17, r31
     65c:	00 00       	nop
     65e:	10 30       	cpi	r17, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	c0 80       	ld	r12, Z
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	70 30       	cpi	r23, 0x00	; 0
     668:	10 10       	cpse	r1, r0
     66a:	18 1e       	adc	r1, r24
     66c:	0f 07       	cpc	r16, r31
     66e:	03 07       	cpc	r16, r19
     670:	0f 1e       	adc	r0, r31
     672:	18 10       	cpse	r1, r8
     674:	10 f0       	brcs	.+4      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     676:	f0 c0       	rjmp	.+480    	; 0x858 <_ZL9System5x7+0x186>
     678:	00 c0       	rjmp	.+0      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     67a:	f0 f0       	brcs	.+60     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     67c:	30 c0       	rjmp	.+96     	; 0x6de <_ZL9System5x7+0xc>
     67e:	c0 c7       	rjmp	.+3968   	; 0x1600 <_ZN3DMD8drawCharEiihh+0x60>
     680:	ff fc       	.word	0xfcff	; ????
     682:	3f 0f       	add	r19, r31
     684:	01 00       	.word	0x0001	; ????
     686:	30 30       	cpi	r19, 0x00	; 0
     688:	30 f0       	brcs	.+12     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     68a:	f0 f0       	brcs	.+60     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
     68c:	30 1c       	adc	r3, r0
     68e:	1e 1f       	adc	r17, r30
     690:	1b 19       	sub	r17, r11
     692:	18 18       	sub	r1, r8
     694:	00 00       	nop
     696:	fc fe       	.word	0xfefc	; ????
     698:	fe 06       	cpc	r15, r30
     69a:	03 03       	mulsu	r16, r19
     69c:	7f ff       	.word	0xff7f	; ????
     69e:	fc c0       	rjmp	.+504    	; 0x898 <_ZL9System5x7+0x1c6>
     6a0:	fe fe       	.word	0xfefe	; ????
     6a2:	ff ff       	.word	0xffff	; ????
     6a4:	06 fe       	sbrs	r0, 6
     6a6:	fe fc       	.word	0xfcfe	; ????
     6a8:	00 00       	nop
     6aa:	c0 fc       	sbrc	r12, 0
     6ac:	ff 7f       	andi	r31, 0xFF	; 255
     6ae:	03 03       	mulsu	r16, r19
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	e0 c0       	rjmp	.+448    	; 0x876 <_ZL9System5x7+0x1a4>
     6b6:	c0 c0       	rjmp	.+384    	; 0x838 <_ZL9System5x7+0x166>
     6b8:	e0 01       	movw	r28, r0
     6ba:	00 00       	nop
     6bc:	00 01       	movw	r0, r0
     6be:	01 01       	movw	r0, r2
     6c0:	01 00       	.word	0x0001	; ????
     6c2:	f8 08       	sbc	r15, r8
     6c4:	08 08       	sbc	r0, r8
     6c6:	08 08       	sbc	r0, r8
     6c8:	08 f8       	.word	0xf808	; ????
     6ca:	1f 10       	cpse	r1, r15
     6cc:	10 10       	cpse	r1, r0
     6ce:	10 10       	cpse	r1, r0
     6d0:	10 1f       	adc	r17, r16

000006d2 <_ZL9System5x7>:
     6d2:	00 00 05 07 20 60 00 00 00 00 00 00 00 5f 00 00     .... `......._..
     6e2:	00 07 00 07 00 14 7f 14 7f 14 24 2a 7f 2a 12 23     ..........$*.*.#
     6f2:	13 08 64 62 36 49 55 22 50 00 05 03 00 00 00 1c     ..db6IU"P.......
     702:	22 41 00 00 41 22 1c 00 08 2a 1c 2a 08 08 08 3e     "A..A"...*.*...>
     712:	08 08 00 50 30 00 00 08 08 08 08 08 00 60 60 00     ...P0........``.
     722:	00 20 10 08 04 02 3e 51 49 45 3e 00 42 7f 40 00     . ....>QIE>.B.@.
     732:	42 61 51 49 46 21 41 45 4b 31 18 14 12 7f 10 27     BaQIF!AEK1.....'
     742:	45 45 45 39 3c 4a 49 49 30 01 71 09 05 03 36 49     EEE9<JII0.q...6I
     752:	49 49 36 06 49 49 29 1e 00 36 36 00 00 00 56 36     II6.II)..66...V6
     762:	00 00 00 08 14 22 41 14 14 14 14 14 41 22 14 08     ....."A.....A"..
     772:	00 02 01 51 09 06 32 49 79 41 3e 7e 11 11 11 7e     ...Q..2IyA>~...~
     782:	7f 49 49 49 36 3e 41 41 41 22 7f 41 41 22 1c 7f     .III6>AAA".AA"..
     792:	49 49 49 41 7f 09 09 01 01 3e 41 41 51 32 7f 08     IIIA.....>AAQ2..
     7a2:	08 08 7f 00 41 7f 41 00 20 40 41 3f 01 7f 08 14     ....A.A. @A?....
     7b2:	22 41 7f 40 40 40 40 7f 02 04 02 7f 7f 04 08 10     "A.@@@@.........
     7c2:	7f 3e 41 41 41 3e 7f 09 09 09 06 3e 41 51 21 5e     .>AAA>.....>AQ!^
     7d2:	7f 09 19 29 46 46 49 49 49 31 01 01 7f 01 01 3f     ...)FFIII1.....?
     7e2:	40 40 40 3f 1f 20 40 20 1f 7f 20 18 20 7f 63 14     @@@?. @ .. . .c.
     7f2:	08 14 63 03 04 78 04 03 61 51 49 45 43 00 00 7f     ..c..x..aQIEC...
     802:	41 41 02 04 08 10 20 41 41 7f 00 00 04 02 01 02     AA.... AA.......
     812:	04 40 40 40 40 40 00 01 02 04 00 20 54 54 54 78     .@@@@@..... TTTx
     822:	7f 48 44 44 38 38 44 44 44 20 38 44 44 48 7f 38     .HDD88DDD 8DDH.8
     832:	54 54 54 18 08 7e 09 01 02 08 14 54 54 3c 7f 08     TTT..~.....TT<..
     842:	04 04 78 00 44 7d 40 00 20 40 44 3d 00 00 7f 10     ..x.D}@. @D=....
     852:	28 44 00 41 7f 40 00 7c 04 18 04 78 7c 08 04 04     (D.A.@.|...x|...
     862:	78 38 44 44 44 38 7c 14 14 14 08 08 14 14 18 7c     x8DDD8|........|
     872:	7c 08 04 04 08 48 54 54 54 20 04 3f 44 40 20 3c     |....HTTT .?D@ <
     882:	40 40 20 7c 1c 20 40 20 1c 3c 40 30 40 3c 44 28     @@ |. @ .<@0@<D(
     892:	10 28 44 0c 50 50 50 3c 44 64 54 4c 44 00 08 36     .(D.PPP<DdTLD..6
     8a2:	41 00 00 00 7f 00 00 00 41 36 08 00 08 08 2a 1c     A.......A6....*.
     8b2:	08 08 1c 2a 08 08                                   ...*..

000008b8 <_ZL8Arial_14>:
     8b8:	1e 6c 0a 0e 20 60 00 01 03 08 07 0a 08 01 03 03     .l.. `..........
     8c8:	05 07 01 04 01 04 06 06 06 06 07 06 06 06 06 06     ................
     8d8:	01 01 06 06 06 06 0d 09 07 08 08 07 07 09 07 01     ................
     8e8:	05 08 07 09 07 09 07 09 08 07 07 07 09 0d 08 09     ................
     8f8:	08 02 04 02 05 08 02 06 06 05 06 06 04 06 06 01     ................
     908:	02 06 01 09 06 06 06 06 04 05 04 06 07 09 06 07     ................
     918:	06 03 01 03 07 07 fe 14 1e 00 1e 00 00 00 90 90     ................
     928:	f8 96 90 f8 96 90 00 1c 00 00 1c 00 00 00 18 24     ...............$
     938:	22 ff 42 42 84 08 10 10 3c 10 08 04 1c 22 22 1c     ".BB....<...."".
     948:	c0 30 8c 42 40 80 00 00 10 0c 00 00 0c 10 10 0c     .0.B@...........
     958:	80 5c 22 62 92 0c 80 00 0c 10 10 10 10 0c 08 10     .\"b............
     968:	1e 00 f0 0c 02 1c 60 80 02 0c f0 80 60 1c 04 14     ......`.....`...
     978:	0e 14 04 00 00 00 00 00 40 40 40 f8 40 40 40 00     ........@@@.@@@.
     988:	00 00 0c 00 00 00 00 70 80 80 80 80 00 00 00 00     .......p........
     998:	00 10 00 c0 38 06 18 04 00 00 fc 02 02 02 02 fc     ....8...........
     9a8:	0c 10 10 10 10 0c 08 04 fe 00 00 00 00 10 1c 10     ................
     9b8:	00 00 0c 02 02 82 42 3c 10 18 14 10 10 10 0c 02     ......B<........
     9c8:	22 22 22 dc 0c 10 10 10 10 0c 80 40 30 08 04 fe     """........@0...
     9d8:	00 04 04 04 04 04 1c 00 38 16 12 12 12 e2 0c 10     ........8.......
     9e8:	10 10 18 04 f8 44 22 22 22 c4 0c 10 10 10 10 0c     .....D""".......
     9f8:	02 02 02 e2 1a 06 00 00 1c 00 00 00 dc 22 22 22     ............."""
     a08:	22 dc 0c 10 10 10 10 0c 3c 42 42 42 22 fc 08 10     ".......<BBB"...
     a18:	10 10 08 04 08 10 08 70 40 a0 a0 10 10 08 00 00     .......p@.......
     a28:	00 04 04 08 90 90 90 90 90 90 00 00 00 00 00 00     ................
     a38:	08 10 10 a0 a0 40 08 04 04 00 00 00 0c 02 82 42     .....@.........B
     a48:	22 1c 00 00 14 00 00 00 e0 18 04 c4 22 12 12 12     "..........."...
     a58:	a2 72 04 08 f0 0c 30 40 4c 90 90 90 88 9c 90 50     .r....0@L......P
     a68:	4c 20 00 80 e0 9c 82 9c e0 80 00 18 04 00 00 00     L ..............
     a78:	00 00 04 18 fe 22 22 22 22 22 dc 1c 10 10 10 10     ....."""""......
     a88:	10 0c f8 04 02 02 02 02 04 08 04 08 10 10 10 10     ................
     a98:	08 04 fe 02 02 02 02 02 04 f8 1c 10 10 10 10 10     ................
     aa8:	08 04 fe 22 22 22 22 22 22 1c 10 10 10 10 10 10     ..."""""".......
     ab8:	fe 22 22 22 22 22 02 1c 00 00 00 00 00 00 f8 04     ."""""..........
     ac8:	02 02 02 42 42 44 c8 04 08 10 10 10 10 10 08 04     ...BBD..........
     ad8:	fe 20 20 20 20 20 fe 1c 00 00 00 00 00 1c fe 1c     .     ..........
     ae8:	00 00 00 00 fe 0c 10 10 10 0c fe 80 40 20 50 88     ............@ P.
     af8:	04 02 1c 00 00 00 00 04 08 10 fe 00 00 00 00 00     ................
     b08:	00 1c 10 10 10 10 10 10 fe 0c 30 c0 00 c0 30 0c     ..........0...0.
     b18:	fe 1c 00 00 04 18 04 00 00 1c fe 04 18 60 80 00     .............`..
     b28:	fe 1c 00 00 00 04 08 1c f8 04 02 02 02 02 02 04     ................
     b38:	f8 04 08 10 10 10 10 10 08 04 fe 42 42 42 42 42     ...........BBBBB
     b48:	3c 1c 00 00 00 00 00 00 f8 04 02 02 02 02 02 04     <...............
     b58:	f8 04 08 10 10 10 14 08 1c 10 fe 42 42 42 c2 42     ...........BBB.B
     b68:	42 3c 1c 00 00 00 00 04 08 10 1c 22 22 22 42 42     B<........."""BB
     b78:	8c 0c 10 10 10 10 10 0c 02 02 02 fe 02 02 02 00     ................
     b88:	00 00 1c 00 00 00 fe 00 00 00 00 00 fe 04 08 10     ................
     b98:	10 10 08 04 06 18 60 80 00 80 60 18 06 00 00 00     ......`...`.....
     ba8:	04 18 04 00 00 00 06 38 c0 00 c0 3c 02 3c c0 00     .......8...<.<..
     bb8:	c0 38 06 00 00 04 18 04 00 00 00 04 18 04 00 00     .8..............
     bc8:	02 0c 90 60 60 90 0c 02 10 0c 00 00 00 04 0c 10     ...``...........
     bd8:	02 04 18 20 c0 20 18 04 02 00 00 00 00 1c 00 00     ... . ..........
     be8:	00 00 00 02 82 42 22 1a 06 02 10 18 14 10 10 10     .....B".........
     bf8:	10 10 fe 02 fc 80 06 38 c0 00 00 00 04 18 02 fe     .......8........
     c08:	80 fc 20 1c 02 1c 20 00 00 00 00 00 00 00 00 00     .. ... .........
     c18:	00 00 00 00 80 80 80 80 80 80 80 80 02 04 00 00     ................
     c28:	10 88 48 48 48 f0 0c 10 10 10 08 1c fe 10 08 08     ..HHH...........
     c38:	08 f0 1c 08 10 10 10 0c f0 08 08 08 10 0c 10 10     ................
     c48:	10 08 f0 08 08 08 10 fe 0c 10 10 10 08 1c f0 48     ...............H
     c58:	48 48 48 70 0c 10 10 10 10 08 08 fc 0a 0a 00 1c     HHHp............
     c68:	00 00 f0 08 08 08 10 f8 4c 90 90 90 88 7c fe 10     ........L....|..
     c78:	08 08 08 f0 1c 00 00 00 00 1c fa 1c 00 fa 80 7c     ...............|
     c88:	fe 80 40 a0 10 08 1c 00 00 00 0c 10 fe 1c f8 10     ..@.............
     c98:	08 08 f0 10 08 08 f0 1c 00 00 00 1c 00 00 00 1c     ................
     ca8:	f8 10 08 08 08 f0 1c 00 00 00 00 1c f0 08 08 08     ................
     cb8:	08 f0 0c 10 10 10 10 0c f8 10 08 08 08 f0 fc 08     ................
     cc8:	10 10 10 0c f0 08 08 08 10 f8 0c 10 10 10 08 fc     ................
     cd8:	f8 10 08 08 1c 00 00 00 30 48 48 48 90 08 10 10     ........0HHH....
     ce8:	10 0c 08 fe 08 08 00 1c 10 10 f8 00 00 00 00 f8     ................
     cf8:	0c 10 10 10 08 1c 18 60 80 00 80 60 18 00 00 04     .......`...`....
     d08:	18 04 00 00 18 e0 00 e0 18 e0 00 e0 18 00 04 18     ................
     d18:	04 00 04 18 04 00 08 30 c0 c0 30 08 10 0c 00 00     .......0..0.....
     d28:	0c 10 18 60 80 00 80 60 18 00 80 8c 70 0c 00 00     ...`...`....p...
     d38:	08 08 88 68 18 08 10 18 14 10 10 10 80 7c 02 00     ...h.........|..
     d48:	7c 80 fe fc 02 7c 80 80 7c 00 40 20 20 60 40 40     |....|..|.@  `@@
     d58:	20 00 00 00 00 00 00 00 fc 04 04 04 04 04 fc 1c      ...............
     d68:	10 10 10 10 10 1c                                   ......

00000d6e <__ctors_start>:
     d6e:	ca 14       	cp	r12, r10

00000d70 <__ctors_end>:
     d70:	11 24       	eor	r1, r1
     d72:	1f be       	out	0x3f, r1	; 63
     d74:	cf ef       	ldi	r28, 0xFF	; 255
     d76:	d8 e0       	ldi	r29, 0x08	; 8
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	cd bf       	out	0x3d, r28	; 61

00000d7c <__do_copy_data>:
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	a0 e0       	ldi	r26, 0x00	; 0
     d80:	b1 e0       	ldi	r27, 0x01	; 1
     d82:	e0 e0       	ldi	r30, 0x00	; 0
     d84:	f0 e3       	ldi	r31, 0x30	; 48
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__do_copy_data+0x10>
     d88:	05 90       	lpm	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	ac 35       	cpi	r26, 0x5C	; 92
     d8e:	b1 07       	cpc	r27, r17
     d90:	d9 f7       	brne	.-10     	; 0xd88 <__do_copy_data+0xc>

00000d92 <__do_clear_bss>:
     d92:	22 e0       	ldi	r18, 0x02	; 2
     d94:	ac e5       	ldi	r26, 0x5C	; 92
     d96:	b1 e0       	ldi	r27, 0x01	; 1
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <.do_clear_bss_start>

00000d9a <.do_clear_bss_loop>:
     d9a:	1d 92       	st	X+, r1

00000d9c <.do_clear_bss_start>:
     d9c:	a6 3f       	cpi	r26, 0xF6	; 246
     d9e:	b2 07       	cpc	r27, r18
     da0:	e1 f7       	brne	.-8      	; 0xd9a <.do_clear_bss_loop>

00000da2 <__do_global_ctors>:
     da2:	16 e0       	ldi	r17, 0x06	; 6
     da4:	c8 eb       	ldi	r28, 0xB8	; 184
     da6:	d6 e0       	ldi	r29, 0x06	; 6
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__do_global_ctors+0x10>
     daa:	21 97       	sbiw	r28, 0x01	; 1
     dac:	fe 01       	movw	r30, r28
     dae:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__tablejump2__>
     db2:	c7 3b       	cpi	r28, 0xB7	; 183
     db4:	d1 07       	cpc	r29, r17
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__do_global_ctors+0x8>
     db8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <main>
     dbc:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_exit>

00000dc0 <__bad_interrupt>:
     dc0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000dc4 <_ZN3DMD10writePixelEjjhh>:
{
    drawLine(x1, y1, x2, y1, bGraphicsMode);
    drawLine(x2, y1, x2, y2, bGraphicsMode);
    drawLine(x2, y2, x1, y2, bGraphicsMode);
    drawLine(x1, y2, x1, y1, bGraphicsMode);
}
     dc4:	0f 93       	push	r16
     dc6:	fc 01       	movw	r30, r24
     dc8:	e3 5f       	subi	r30, 0xF3	; 243
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	30 81       	ld	r19, Z
     dce:	a0 e2       	ldi	r26, 0x20	; 32
     dd0:	3a 9f       	mul	r19, r26
     dd2:	f0 01       	movw	r30, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	6e 17       	cp	r22, r30
     dd8:	7f 07       	cpc	r23, r31
     dda:	08 f0       	brcs	.+2      	; 0xdde <_ZN3DMD10writePixelEjjhh+0x1a>
     ddc:	b4 c0       	rjmp	.+360    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     dde:	fc 01       	movw	r30, r24
     de0:	e2 5f       	subi	r30, 0xF2	; 242
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	e0 81       	ld	r30, Z
     de6:	b0 e1       	ldi	r27, 0x10	; 16
     de8:	eb 9f       	mul	r30, r27
     dea:	f0 01       	movw	r30, r0
     dec:	11 24       	eor	r1, r1
     dee:	4e 17       	cp	r20, r30
     df0:	5f 07       	cpc	r21, r31
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <_ZN3DMD10writePixelEjjhh+0x32>
     df4:	a8 c0       	rjmp	.+336    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     df6:	fb 01       	movw	r30, r22
     df8:	ef 71       	andi	r30, 0x1F	; 31
     dfa:	ff 27       	eor	r31, r31
     dfc:	da 01       	movw	r26, r20
     dfe:	b2 95       	swap	r27
     e00:	a2 95       	swap	r26
     e02:	af 70       	andi	r26, 0x0F	; 15
     e04:	ab 27       	eor	r26, r27
     e06:	bf 70       	andi	r27, 0x0F	; 15
     e08:	ab 27       	eor	r26, r27
     e0a:	76 95       	lsr	r23
     e0c:	67 95       	ror	r22
     e0e:	72 95       	swap	r23
     e10:	62 95       	swap	r22
     e12:	6f 70       	andi	r22, 0x0F	; 15
     e14:	67 27       	eor	r22, r23
     e16:	7f 70       	andi	r23, 0x0F	; 15
     e18:	67 27       	eor	r22, r23
     e1a:	3a 9f       	mul	r19, r26
     e1c:	60 0d       	add	r22, r0
     e1e:	11 24       	eor	r1, r1
     e20:	df 01       	movw	r26, r30
     e22:	30 e2       	ldi	r19, 0x20	; 32
     e24:	63 9f       	mul	r22, r19
     e26:	a0 0d       	add	r26, r0
     e28:	b1 1d       	adc	r27, r1
     e2a:	11 24       	eor	r1, r1
     e2c:	bd 01       	movw	r22, r26
     e2e:	fc 01       	movw	r30, r24
     e30:	e1 5f       	subi	r30, 0xF1	; 241
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	e0 81       	ld	r30, Z
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	4f 70       	andi	r20, 0x0F	; 15
     e42:	55 27       	eor	r21, r21
     e44:	e4 9f       	mul	r30, r20
     e46:	d0 01       	movw	r26, r0
     e48:	e5 9f       	mul	r30, r21
     e4a:	b0 0d       	add	r27, r0
     e4c:	f4 9f       	mul	r31, r20
     e4e:	b0 0d       	add	r27, r0
     e50:	11 24       	eor	r1, r1
     e52:	ab 01       	movw	r20, r22
     e54:	56 95       	lsr	r21
     e56:	47 95       	ror	r20
     e58:	56 95       	lsr	r21
     e5a:	47 95       	ror	r20
     e5c:	56 95       	lsr	r21
     e5e:	47 95       	ror	r20
     e60:	4a 0f       	add	r20, r26
     e62:	5b 1f       	adc	r21, r27
     e64:	67 70       	andi	r22, 0x07	; 7
     e66:	77 27       	eor	r23, r23
     e68:	fb 01       	movw	r30, r22
     e6a:	eb 5c       	subi	r30, 0xCB	; 203
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	30 81       	ld	r19, Z
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	d9 f1       	breq	.+118    	; 0xeea <_ZN3DMD10writePixelEjjhh+0x126>
     e74:	28 f4       	brcc	.+10     	; 0xe80 <_ZN3DMD10writePixelEjjhh+0xbc>
     e76:	22 23       	and	r18, r18
     e78:	51 f0       	breq	.+20     	; 0xe8e <_ZN3DMD10writePixelEjjhh+0xca>
     e7a:	21 30       	cpi	r18, 0x01	; 1
     e7c:	f9 f0       	breq	.+62     	; 0xebc <_ZN3DMD10writePixelEjjhh+0xf8>
     e7e:	63 c0       	rjmp	.+198    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     e80:	23 30       	cpi	r18, 0x03	; 3
     e82:	09 f4       	brne	.+2      	; 0xe86 <_ZN3DMD10writePixelEjjhh+0xc2>
     e84:	45 c0       	rjmp	.+138    	; 0xf10 <_ZN3DMD10writePixelEjjhh+0x14c>
     e86:	24 30       	cpi	r18, 0x04	; 4
     e88:	09 f4       	brne	.+2      	; 0xe8c <_ZN3DMD10writePixelEjjhh+0xc8>
     e8a:	4f c0       	rjmp	.+158    	; 0xf2a <_ZN3DMD10writePixelEjjhh+0x166>
     e8c:	5c c0       	rjmp	.+184    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     e8e:	01 30       	cpi	r16, 0x01	; 1
     e90:	59 f4       	brne	.+22     	; 0xea8 <_ZN3DMD10writePixelEjjhh+0xe4>
     e92:	dc 01       	movw	r26, r24
     e94:	8d 91       	ld	r24, X+
     e96:	9c 91       	ld	r25, X
     e98:	fc 01       	movw	r30, r24
     e9a:	e4 0f       	add	r30, r20
     e9c:	f5 1f       	adc	r31, r21
     e9e:	30 95       	com	r19
     ea0:	80 81       	ld	r24, Z
     ea2:	38 23       	and	r19, r24
     ea4:	30 83       	st	Z, r19
     ea6:	4f c0       	rjmp	.+158    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	fc 01       	movw	r30, r24
     eb0:	e4 0f       	add	r30, r20
     eb2:	f5 1f       	adc	r31, r21
     eb4:	80 81       	ld	r24, Z
     eb6:	38 2b       	or	r19, r24
     eb8:	30 83       	st	Z, r19
     eba:	45 c0       	rjmp	.+138    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     ebc:	01 11       	cpse	r16, r1
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <_ZN3DMD10writePixelEjjhh+0x112>
     ec0:	dc 01       	movw	r26, r24
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	fc 01       	movw	r30, r24
     ec8:	e4 0f       	add	r30, r20
     eca:	f5 1f       	adc	r31, r21
     ecc:	30 95       	com	r19
     ece:	80 81       	ld	r24, Z
     ed0:	38 23       	and	r19, r24
     ed2:	30 83       	st	Z, r19
     ed4:	38 c0       	rjmp	.+112    	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	fc 01       	movw	r30, r24
     ede:	e4 0f       	add	r30, r20
     ee0:	f5 1f       	adc	r31, r21
     ee2:	80 81       	ld	r24, Z
     ee4:	38 2b       	or	r19, r24
     ee6:	30 83       	st	Z, r19
     ee8:	2e c0       	rjmp	.+92     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     eea:	01 30       	cpi	r16, 0x01	; 1
     eec:	61 f5       	brne	.+88     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     eee:	dc 01       	movw	r26, r24
     ef0:	8d 91       	ld	r24, X+
     ef2:	9c 91       	ld	r25, X
     ef4:	fc 01       	movw	r30, r24
     ef6:	e4 0f       	add	r30, r20
     ef8:	f5 1f       	adc	r31, r21
     efa:	80 81       	ld	r24, Z
     efc:	93 2f       	mov	r25, r19
     efe:	98 23       	and	r25, r24
     f00:	19 f4       	brne	.+6      	; 0xf08 <_ZN3DMD10writePixelEjjhh+0x144>
     f02:	38 2b       	or	r19, r24
     f04:	30 83       	st	Z, r19
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f08:	30 95       	com	r19
     f0a:	83 23       	and	r24, r19
     f0c:	80 83       	st	Z, r24
     f0e:	1b c0       	rjmp	.+54     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f10:	01 30       	cpi	r16, 0x01	; 1
     f12:	c9 f4       	brne	.+50     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	fc 01       	movw	r30, r24
     f1c:	e4 0f       	add	r30, r20
     f1e:	f5 1f       	adc	r31, r21
     f20:	30 95       	com	r19
     f22:	80 81       	ld	r24, Z
     f24:	38 23       	and	r19, r24
     f26:	30 83       	st	Z, r19
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f2a:	01 30       	cpi	r16, 0x01	; 1
     f2c:	61 f4       	brne	.+24     	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f2e:	dc 01       	movw	r26, r24
     f30:	8d 91       	ld	r24, X+
     f32:	9c 91       	ld	r25, X
     f34:	fc 01       	movw	r30, r24
     f36:	e4 0f       	add	r30, r20
     f38:	f5 1f       	adc	r31, r21
     f3a:	80 81       	ld	r24, Z
     f3c:	93 2f       	mov	r25, r19
     f3e:	98 23       	and	r25, r24
     f40:	11 f4       	brne	.+4      	; 0xf46 <_ZN3DMD10writePixelEjjhh+0x182>
     f42:	38 2b       	or	r19, r24
     f44:	30 83       	st	Z, r19
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <_ZN3DMD11clearScreenEh>:
     f4a:	66 23       	and	r22, r22
     f4c:	81 f0       	breq	.+32     	; 0xf6e <_ZN3DMD11clearScreenEh+0x24>
     f4e:	fc 01       	movw	r30, r24
     f50:	e1 5f       	subi	r30, 0xF1	; 241
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	40 81       	ld	r20, Z
     f56:	20 e4       	ldi	r18, 0x40	; 64
     f58:	42 9f       	mul	r20, r18
     f5a:	a0 01       	movw	r20, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	6f ef       	ldi	r22, 0xFF	; 255
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <memset>
     f6c:	08 95       	ret
     f6e:	fc 01       	movw	r30, r24
     f70:	e1 5f       	subi	r30, 0xF1	; 241
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	40 81       	ld	r20, Z
     f76:	f0 e4       	ldi	r31, 0x40	; 64
     f78:	4f 9f       	mul	r20, r31
     f7a:	a0 01       	movw	r20, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	fc 01       	movw	r30, r24
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <memset>
     f8c:	08 95       	ret

00000f8e <_ZN3DMDC1EhhPh>:
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
     f94:	fc 01       	movw	r30, r24
     f96:	e3 5f       	subi	r30, 0xF3	; 243
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	60 83       	st	Z, r22
     f9c:	31 96       	adiw	r30, 0x01	; 1
     f9e:	40 83       	st	Z, r20
     fa0:	64 9f       	mul	r22, r20
     fa2:	40 2d       	mov	r20, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	40 83       	st	Z, r20
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	31 96       	adiw	r30, 0x01	; 1
     fae:	ca 01       	movw	r24, r20
     fb0:	82 95       	swap	r24
     fb2:	92 95       	swap	r25
     fb4:	90 7f       	andi	r25, 0xF0	; 240
     fb6:	98 27       	eor	r25, r24
     fb8:	80 7f       	andi	r24, 0xF0	; 240
     fba:	98 27       	eor	r25, r24
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	32 96       	adiw	r30, 0x02	; 2
     fc2:	ca 01       	movw	r24, r20
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	82 95       	swap	r24
     fca:	92 95       	swap	r25
     fcc:	90 7f       	andi	r25, 0xF0	; 240
     fce:	98 27       	eor	r25, r24
     fd0:	80 7f       	andi	r24, 0xF0	; 240
     fd2:	98 27       	eor	r25, r24
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	32 96       	adiw	r30, 0x02	; 2
     fda:	44 0f       	add	r20, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	ba 01       	movw	r22, r20
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	46 0f       	add	r20, r22
     fea:	57 1f       	adc	r21, r23
     fec:	44 0f       	add	r20, r20
     fee:	55 1f       	adc	r21, r21
     ff0:	44 0f       	add	r20, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	51 83       	std	Z+1, r21	; 0x01
     ff6:	40 83       	st	Z, r20
     ff8:	39 83       	std	Y+1, r19	; 0x01
     ffa:	28 83       	st	Y, r18
     ffc:	32 96       	adiw	r30, 0x02	; 2
     ffe:	10 82       	st	Z, r1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	85 e6       	ldi	r24, 0x65	; 101
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_ZN8SPIClass11setBitOrderEh>
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	85 e6       	ldi	r24, 0x65	; 101
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <_ZN8SPIClass11setDataModeEh>
    1014:	64 e0       	ldi	r22, 0x04	; 4
    1016:	85 e6       	ldi	r24, 0x65	; 101
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_ZN8SPIClass15setClockDividerEh>
    101e:	85 e6       	ldi	r24, 0x65	; 101
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN8SPIClass5beginEv>
    1026:	2a 9a       	sbi	0x05, 2	; 5
    1028:	2b 9a       	sbi	0x05, 3	; 5
    102a:	3b 9a       	sbi	0x07, 3	; 7
    102c:	3c 9a       	sbi	0x07, 4	; 7
    102e:	25 9a       	sbi	0x04, 5	; 4
    1030:	3d 9a       	sbi	0x07, 5	; 7
    1032:	23 9a       	sbi	0x04, 3	; 4
    1034:	21 9a       	sbi	0x04, 1	; 4
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	ce 01       	movw	r24, r28
    103a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZN3DMD8drawLineEiiiih>:
    1044:	2f 92       	push	r2
    1046:	3f 92       	push	r3
    1048:	4f 92       	push	r4
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	00 d0       	rcall	.+0      	; 0x106a <_ZN3DMD8drawLineEiiiih+0x26>
    106a:	00 d0       	rcall	.+0      	; 0x106c <_ZN3DMD8drawLineEiiiih+0x28>
    106c:	00 d0       	rcall	.+0      	; 0x106e <_ZN3DMD8drawLineEiiiih+0x2a>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	6b 01       	movw	r12, r22
    1078:	5e 83       	std	Y+6, r21	; 0x06
    107a:	4d 83       	std	Y+5, r20	; 0x05
    107c:	3c 83       	std	Y+4, r19	; 0x04
    107e:	2b 83       	std	Y+3, r18	; 0x03
    1080:	18 01       	movw	r2, r16
    1082:	1e 2d       	mov	r17, r14
    1084:	71 01       	movw	r14, r2
    1086:	e4 1a       	sub	r14, r20
    1088:	f5 0a       	sbc	r15, r21
    108a:	29 01       	movw	r4, r18
    108c:	46 1a       	sub	r4, r22
    108e:	57 0a       	sbc	r5, r23
    1090:	ff 20       	and	r15, r15
    1092:	3c f4       	brge	.+14     	; 0x10a2 <_ZN3DMD8drawLineEiiiih+0x5e>
    1094:	f1 94       	neg	r15
    1096:	e1 94       	neg	r14
    1098:	f1 08       	sbc	r15, r1
    109a:	88 24       	eor	r8, r8
    109c:	8a 94       	dec	r8
    109e:	98 2c       	mov	r9, r8
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <_ZN3DMD8drawLineEiiiih+0x64>
    10a2:	88 24       	eor	r8, r8
    10a4:	83 94       	inc	r8
    10a6:	91 2c       	mov	r9, r1
    10a8:	55 20       	and	r5, r5
    10aa:	3c f4       	brge	.+14     	; 0x10ba <_ZN3DMD8drawLineEiiiih+0x76>
    10ac:	51 94       	neg	r5
    10ae:	41 94       	neg	r4
    10b0:	51 08       	sbc	r5, r1
    10b2:	aa 24       	eor	r10, r10
    10b4:	aa 94       	dec	r10
    10b6:	ba 2c       	mov	r11, r10
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <_ZN3DMD8drawLineEiiiih+0x7c>
    10ba:	aa 24       	eor	r10, r10
    10bc:	a3 94       	inc	r10
    10be:	b1 2c       	mov	r11, r1
    10c0:	ee 0c       	add	r14, r14
    10c2:	ff 1c       	adc	r15, r15
    10c4:	44 0c       	add	r4, r4
    10c6:	55 1c       	adc	r5, r5
    10c8:	01 e0       	ldi	r16, 0x01	; 1
    10ca:	21 2f       	mov	r18, r17
    10cc:	4d 81       	ldd	r20, Y+5	; 0x05
    10ce:	5e 81       	ldd	r21, Y+6	; 0x06
    10d0:	b6 01       	movw	r22, r12
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    10da:	e4 14       	cp	r14, r4
    10dc:	f5 04       	cpc	r15, r5
    10de:	4c f5       	brge	.+82     	; 0x1132 <_ZN3DMD8drawLineEiiiih+0xee>
    10e0:	c2 01       	movw	r24, r4
    10e2:	95 95       	asr	r25
    10e4:	87 95       	ror	r24
    10e6:	37 01       	movw	r6, r14
    10e8:	68 1a       	sub	r6, r24
    10ea:	79 0a       	sbc	r7, r25
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	8c 15       	cp	r24, r12
    10f2:	9d 05       	cpc	r25, r13
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <_ZN3DMD8drawLineEiiiih+0xb4>
    10f6:	43 c0       	rjmp	.+134    	; 0x117e <_ZN3DMD8drawLineEiiiih+0x13a>
    10f8:	77 20       	and	r7, r7
    10fa:	44 f0       	brlt	.+16     	; 0x110c <_ZN3DMD8drawLineEiiiih+0xc8>
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	88 0d       	add	r24, r8
    1102:	99 1d       	adc	r25, r9
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	64 18       	sub	r6, r4
    110a:	75 08       	sbc	r7, r5
    110c:	ca 0c       	add	r12, r10
    110e:	db 1c       	adc	r13, r11
    1110:	6e 0c       	add	r6, r14
    1112:	7f 1c       	adc	r7, r15
    1114:	01 e0       	ldi	r16, 0x01	; 1
    1116:	21 2f       	mov	r18, r17
    1118:	4d 81       	ldd	r20, Y+5	; 0x05
    111a:	5e 81       	ldd	r21, Y+6	; 0x06
    111c:	b6 01       	movw	r22, r12
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	8c 15       	cp	r24, r12
    112c:	9d 05       	cpc	r25, r13
    112e:	21 f7       	brne	.-56     	; 0x10f8 <_ZN3DMD8drawLineEiiiih+0xb4>
    1130:	26 c0       	rjmp	.+76     	; 0x117e <_ZN3DMD8drawLineEiiiih+0x13a>
    1132:	c7 01       	movw	r24, r14
    1134:	95 95       	asr	r25
    1136:	87 95       	ror	r24
    1138:	32 01       	movw	r6, r4
    113a:	68 1a       	sub	r6, r24
    113c:	79 0a       	sbc	r7, r25
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	28 16       	cp	r2, r24
    1144:	39 06       	cpc	r3, r25
    1146:	d9 f0       	breq	.+54     	; 0x117e <_ZN3DMD8drawLineEiiiih+0x13a>
    1148:	77 20       	and	r7, r7
    114a:	24 f0       	brlt	.+8      	; 0x1154 <_ZN3DMD8drawLineEiiiih+0x110>
    114c:	ca 0c       	add	r12, r10
    114e:	db 1c       	adc	r13, r11
    1150:	6e 18       	sub	r6, r14
    1152:	7f 08       	sbc	r7, r15
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	88 0d       	add	r24, r8
    115a:	99 1d       	adc	r25, r9
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	64 0c       	add	r6, r4
    1162:	75 1c       	adc	r7, r5
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	21 2f       	mov	r18, r17
    1168:	ac 01       	movw	r20, r24
    116a:	b6 01       	movw	r22, r12
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	28 16       	cp	r2, r24
    117a:	39 06       	cpc	r3, r25
    117c:	29 f7       	brne	.-54     	; 0x1148 <_ZN3DMD8drawLineEiiiih+0x104>
    117e:	26 96       	adiw	r28, 0x06	; 6
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	7f 90       	pop	r7
    11a4:	6f 90       	pop	r6
    11a6:	5f 90       	pop	r5
    11a8:	4f 90       	pop	r4
    11aa:	3f 90       	pop	r3
    11ac:	2f 90       	pop	r2
    11ae:	08 95       	ret

000011b0 <_ZN3DMD13drawFilledBoxEiiiih>:
/*--------------------------------------------------------------------------------------
 Draw or clear a filled box(rectangle) with a single pixel border
--------------------------------------------------------------------------------------*/
void DMD::drawFilledBox(int x1, int y1, int x2, int y2,
			byte bGraphicsMode)
{
    11b0:	6f 92       	push	r6
    11b2:	7f 92       	push	r7
    11b4:	8f 92       	push	r8
    11b6:	9f 92       	push	r9
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	3c 01       	movw	r6, r24
    11ce:	eb 01       	movw	r28, r22
    11d0:	4a 01       	movw	r8, r20
    11d2:	69 01       	movw	r12, r18
    11d4:	58 01       	movw	r10, r16
    11d6:	fe 2c       	mov	r15, r14
    for (int b = x1; b <= x2; b++) {
    11d8:	26 17       	cp	r18, r22
    11da:	37 07       	cpc	r19, r23
    11dc:	64 f0       	brlt	.+24     	; 0x11f6 <_ZN3DMD13drawFilledBoxEiiiih+0x46>
	    drawLine(b, y1, b, y2, bGraphicsMode);
    11de:	ef 2c       	mov	r14, r15
    11e0:	85 01       	movw	r16, r10
    11e2:	9e 01       	movw	r18, r28
    11e4:	a4 01       	movw	r20, r8
    11e6:	be 01       	movw	r22, r28
    11e8:	c3 01       	movw	r24, r6
    11ea:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN3DMD8drawLineEiiiih>
 Draw or clear a filled box(rectangle) with a single pixel border
--------------------------------------------------------------------------------------*/
void DMD::drawFilledBox(int x1, int y1, int x2, int y2,
			byte bGraphicsMode)
{
    for (int b = x1; b <= x2; b++) {
    11ee:	21 96       	adiw	r28, 0x01	; 1
    11f0:	cc 16       	cp	r12, r28
    11f2:	dd 06       	cpc	r13, r29
    11f4:	a4 f7       	brge	.-24     	; 0x11de <_ZN3DMD13drawFilledBoxEiiiih+0x2e>
	    drawLine(b, y1, b, y2, bGraphicsMode);
    }
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	08 95       	ret

00001214 <_ZN3DMD15drawTestPatternEh>:

/*--------------------------------------------------------------------------------------
 Draw the selected test pattern
--------------------------------------------------------------------------------------*/
void DMD::drawTestPattern(byte bPattern)
{
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    unsigned int ui;

    unsigned int numPixels=DisplaysTotal * DMD_PIXELS_ACROSS * DMD_PIXELS_DOWN;
    1230:	fc 01       	movw	r30, r24
    1232:	e1 5f       	subi	r30, 0xF1	; 241
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	e0 80       	ld	r14, Z
    1238:	f1 2c       	mov	r15, r1
    123a:	fe 2c       	mov	r15, r14
    123c:	ee 24       	eor	r14, r14
    123e:	ff 0c       	add	r15, r15
    unsigned int pixelsWide=DMD_PIXELS_ACROSS*DisplaysWide;
    1240:	32 97       	sbiw	r30, 0x02	; 2
    1242:	c0 81       	ld	r28, Z
    1244:	20 e2       	ldi	r18, 0x20	; 32
    1246:	c2 9f       	mul	r28, r18
    1248:	e0 01       	movw	r28, r0
    124a:	11 24       	eor	r1, r1
    for (ui = 0; ui < numPixels; ui++) {
    124c:	e1 14       	cp	r14, r1
    124e:	f1 04       	cpc	r15, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <_ZN3DMD15drawTestPatternEh+0x40>
    1252:	b3 c0       	rjmp	.+358    	; 0x13ba <_ZN3DMD15drawTestPatternEh+0x1a6>
    1254:	16 2f       	mov	r17, r22
    1256:	6c 01       	movw	r12, r24
    1258:	61 2c       	mov	r6, r1
    125a:	71 2c       	mov	r7, r1
		    else
		        //odd row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
		    break;
	    case PATTERN_STRIPE_0:	// vertical stripes, first stripe on
		    writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
    125c:	88 24       	eor	r8, r8
    125e:	99 24       	eor	r9, r9
    1260:	8c 1a       	sub	r8, r28
    1262:	9d 0a       	sbc	r9, r29
    1264:	5e 01       	movw	r10, r28
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	a8 1a       	sub	r10, r24
    126a:	b1 08       	sbc	r11, r1
    unsigned int ui;

    unsigned int numPixels=DisplaysTotal * DMD_PIXELS_ACROSS * DMD_PIXELS_DOWN;
    unsigned int pixelsWide=DMD_PIXELS_ACROSS*DisplaysWide;
    for (ui = 0; ui < numPixels; ui++) {
	    switch (bPattern) {
    126c:	11 30       	cpi	r17, 0x01	; 1
    126e:	c9 f1       	breq	.+114    	; 0x12e2 <_ZN3DMD15drawTestPatternEh+0xce>
    1270:	38 f0       	brcs	.+14     	; 0x1280 <_ZN3DMD15drawTestPatternEh+0x6c>
    1272:	12 30       	cpi	r17, 0x02	; 2
    1274:	09 f4       	brne	.+2      	; 0x1278 <_ZN3DMD15drawTestPatternEh+0x64>
    1276:	66 c0       	rjmp	.+204    	; 0x1344 <_ZN3DMD15drawTestPatternEh+0x130>
    1278:	13 30       	cpi	r17, 0x03	; 3
    127a:	09 f4       	brne	.+2      	; 0x127e <_ZN3DMD15drawTestPatternEh+0x6a>
    127c:	74 c0       	rjmp	.+232    	; 0x1366 <_ZN3DMD15drawTestPatternEh+0x152>
    127e:	86 c0       	rjmp	.+268    	; 0x138c <_ZN3DMD15drawTestPatternEh+0x178>
	    case PATTERN_ALT_0:	// every alternate pixel, first pixel on
		    if ((ui & pixelsWide) == 0)
		        //even row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
    1280:	aa 24       	eor	r10, r10
    1282:	bb 24       	eor	r11, r11
    1284:	ac 1a       	sub	r10, r28
    1286:	bd 0a       	sbc	r11, r29
    1288:	4e 01       	movw	r8, r28
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	82 1a       	sub	r8, r18
    128e:	91 08       	sbc	r9, r1
    unsigned int numPixels=DisplaysTotal * DMD_PIXELS_ACROSS * DMD_PIXELS_DOWN;
    unsigned int pixelsWide=DMD_PIXELS_ACROSS*DisplaysWide;
    for (ui = 0; ui < numPixels; ui++) {
	    switch (bPattern) {
	    case PATTERN_ALT_0:	// every alternate pixel, first pixel on
		    if ((ui & pixelsWide) == 0)
    1290:	ce 01       	movw	r24, r28
    1292:	86 21       	and	r24, r6
    1294:	97 21       	and	r25, r7
    1296:	89 2b       	or	r24, r25
    1298:	89 f4       	brne	.+34     	; 0x12bc <_ZN3DMD15drawTestPatternEh+0xa8>
		        //even row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
    129a:	c5 01       	movw	r24, r10
    129c:	86 21       	and	r24, r6
    129e:	97 21       	and	r25, r7
    12a0:	be 01       	movw	r22, r28
    12a2:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    12a6:	ab 01       	movw	r20, r22
    12a8:	06 2d       	mov	r16, r6
    12aa:	01 70       	andi	r16, 0x01	; 1
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	b4 01       	movw	r22, r8
    12b0:	66 21       	and	r22, r6
    12b2:	77 21       	and	r23, r7
    12b4:	c6 01       	movw	r24, r12
    12b6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    12ba:	78 c0       	rjmp	.+240    	; 0x13ac <_ZN3DMD15drawTestPatternEh+0x198>
		    else
		        //odd row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
    12bc:	83 01       	movw	r16, r6
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	08 27       	eor	r16, r24
    12c2:	01 70       	andi	r16, 0x01	; 1
    12c4:	c5 01       	movw	r24, r10
    12c6:	86 21       	and	r24, r6
    12c8:	97 21       	and	r25, r7
    12ca:	be 01       	movw	r22, r28
    12cc:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    12d0:	ab 01       	movw	r20, r22
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	b4 01       	movw	r22, r8
    12d6:	66 21       	and	r22, r6
    12d8:	77 21       	and	r23, r7
    12da:	c6 01       	movw	r24, r12
    12dc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    12e0:	65 c0       	rjmp	.+202    	; 0x13ac <_ZN3DMD15drawTestPatternEh+0x198>
		    break;
	    case PATTERN_ALT_1:	// every alternate pixel, first pixel off
		    if ((ui & pixelsWide) == 0)
		        //even row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
    12e2:	aa 24       	eor	r10, r10
    12e4:	bb 24       	eor	r11, r11
    12e6:	ac 1a       	sub	r10, r28
    12e8:	bd 0a       	sbc	r11, r29
    12ea:	4e 01       	movw	r8, r28
    12ec:	21 e0       	ldi	r18, 0x01	; 1
    12ee:	82 1a       	sub	r8, r18
    12f0:	91 08       	sbc	r9, r1
		    else
		        //odd row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
		    break;
	    case PATTERN_ALT_1:	// every alternate pixel, first pixel off
		    if ((ui & pixelsWide) == 0)
    12f2:	ce 01       	movw	r24, r28
    12f4:	86 21       	and	r24, r6
    12f6:	97 21       	and	r25, r7
    12f8:	89 2b       	or	r24, r25
    12fa:	99 f4       	brne	.+38     	; 0x1322 <_ZN3DMD15drawTestPatternEh+0x10e>
		        //even row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
    12fc:	83 01       	movw	r16, r6
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	08 27       	eor	r16, r24
    1302:	01 70       	andi	r16, 0x01	; 1
    1304:	c5 01       	movw	r24, r10
    1306:	86 21       	and	r24, r6
    1308:	97 21       	and	r25, r7
    130a:	be 01       	movw	r22, r28
    130c:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    1310:	ab 01       	movw	r20, r22
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	b4 01       	movw	r22, r8
    1316:	66 21       	and	r22, r6
    1318:	77 21       	and	r23, r7
    131a:	c6 01       	movw	r24, r12
    131c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    1320:	3d c0       	rjmp	.+122    	; 0x139c <_ZN3DMD15drawTestPatternEh+0x188>
		    else
		        //odd row
		        writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
    1322:	c5 01       	movw	r24, r10
    1324:	86 21       	and	r24, r6
    1326:	97 21       	and	r25, r7
    1328:	be 01       	movw	r22, r28
    132a:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    132e:	ab 01       	movw	r20, r22
    1330:	06 2d       	mov	r16, r6
    1332:	01 70       	andi	r16, 0x01	; 1
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	b4 01       	movw	r22, r8
    1338:	66 21       	and	r22, r6
    133a:	77 21       	and	r23, r7
    133c:	c6 01       	movw	r24, r12
    133e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    1342:	2c c0       	rjmp	.+88     	; 0x139c <_ZN3DMD15drawTestPatternEh+0x188>
		    break;
	    case PATTERN_STRIPE_0:	// vertical stripes, first stripe on
		    writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, ui & 1);
    1344:	c4 01       	movw	r24, r8
    1346:	86 21       	and	r24, r6
    1348:	97 21       	and	r25, r7
    134a:	be 01       	movw	r22, r28
    134c:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    1350:	ab 01       	movw	r20, r22
    1352:	06 2d       	mov	r16, r6
    1354:	01 70       	andi	r16, 0x01	; 1
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	b5 01       	movw	r22, r10
    135a:	66 21       	and	r22, r6
    135c:	77 21       	and	r23, r7
    135e:	c6 01       	movw	r24, r12
    1360:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
		    break;
    1364:	13 c0       	rjmp	.+38     	; 0x138c <_ZN3DMD15drawTestPatternEh+0x178>
	    case PATTERN_STRIPE_1:	// vertical stripes, first stripe off
		    writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
    1366:	c3 01       	movw	r24, r6
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	82 27       	eor	r24, r18
    136c:	08 2f       	mov	r16, r24
    136e:	01 70       	andi	r16, 0x01	; 1
    1370:	c4 01       	movw	r24, r8
    1372:	86 21       	and	r24, r6
    1374:	97 21       	and	r25, r7
    1376:	be 01       	movw	r22, r28
    1378:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    137c:	ab 01       	movw	r20, r22
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	b5 01       	movw	r22, r10
    1382:	66 21       	and	r22, r6
    1384:	77 21       	and	r23, r7
    1386:	c6 01       	movw	r24, r12
    1388:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
{
    unsigned int ui;

    unsigned int numPixels=DisplaysTotal * DMD_PIXELS_ACROSS * DMD_PIXELS_DOWN;
    unsigned int pixelsWide=DMD_PIXELS_ACROSS*DisplaysWide;
    for (ui = 0; ui < numPixels; ui++) {
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	68 1a       	sub	r6, r24
    1390:	78 0a       	sbc	r7, r24
    1392:	e6 14       	cp	r14, r6
    1394:	f7 04       	cpc	r15, r7
    1396:	09 f0       	breq	.+2      	; 0x139a <_ZN3DMD15drawTestPatternEh+0x186>
    1398:	69 cf       	rjmp	.-302    	; 0x126c <_ZN3DMD15drawTestPatternEh+0x58>
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <_ZN3DMD15drawTestPatternEh+0x1a6>
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	62 1a       	sub	r6, r18
    13a0:	72 0a       	sbc	r7, r18
    13a2:	6e 14       	cp	r6, r14
    13a4:	7f 04       	cpc	r7, r15
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <_ZN3DMD15drawTestPatternEh+0x196>
    13a8:	a4 cf       	rjmp	.-184    	; 0x12f2 <_ZN3DMD15drawTestPatternEh+0xde>
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <_ZN3DMD15drawTestPatternEh+0x1a6>
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	68 1a       	sub	r6, r24
    13b0:	78 0a       	sbc	r7, r24
    13b2:	6e 14       	cp	r6, r14
    13b4:	7f 04       	cpc	r7, r15
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <_ZN3DMD15drawTestPatternEh+0x1a6>
    13b8:	6b cf       	rjmp	.-298    	; 0x1290 <_ZN3DMD15drawTestPatternEh+0x7c>
	    case PATTERN_STRIPE_1:	// vertical stripes, first stripe off
		    writePixel((ui & (pixelsWide-1)), ((ui & ~(pixelsWide-1)) / pixelsWide), GRAPHICS_NORMAL, !(ui & 1));
		    break;
        }
    }
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	08 95       	ret

000013d8 <_ZN3DMD16scanDisplayBySPIEv>:
 Scan the dot matrix LED panel display, from the RAM mirror out to the display hardware.
 Call 4 times to scan the whole display which is made up of 4 interleaved rows within the 16 total rows.
 Insert the calls to this function into the main loop for the highest call rate, or from a timer interrupt
--------------------------------------------------------------------------------------*/
void DMD::scanDisplayBySPI()
{
    13d8:	8f 92       	push	r8
    13da:	9f 92       	push	r9
    13dc:	af 92       	push	r10
    13de:	bf 92       	push	r11
    13e0:	cf 92       	push	r12
    13e2:	df 92       	push	r13
    13e4:	ef 92       	push	r14
    13e6:	ff 92       	push	r15
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	8c 01       	movw	r16, r24
    //if PIN_OTHER_SPI_nCS is in use during a DMD scan request then scanDisplayBySPI() will exit without conflict! (and skip that scan)
    //if( !(PORTB & PIN_OTHER_SPI_nCS ) )
	//	return;
    
        //SPI transfer pixels to the display hardware shift registers
        int rowsize=DisplaysTotal<<2;
    13f2:	fc 01       	movw	r30, r24
    13f4:	e1 5f       	subi	r30, 0xF1	; 241
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	e0 80       	ld	r14, Z
    13fa:	f1 2c       	mov	r15, r1
    13fc:	ee 0c       	add	r14, r14
    13fe:	ff 1c       	adc	r15, r15
    1400:	ee 0c       	add	r14, r14
    1402:	ff 1c       	adc	r15, r15
        int offset=rowsize * bDMDByte;
    1404:	37 96       	adiw	r30, 0x07	; 7
    1406:	20 81       	ld	r18, Z
    1408:	2e 9d       	mul	r18, r14
    140a:	c0 01       	movw	r24, r0
    140c:	2f 9d       	mul	r18, r15
    140e:	90 0d       	add	r25, r0
    1410:	11 24       	eor	r1, r1
        for (int i=0;i<rowsize;i++) {
    1412:	1e 14       	cp	r1, r14
    1414:	1f 04       	cpc	r1, r15
    1416:	0c f0       	brlt	.+2      	; 0x141a <_ZN3DMD16scanDisplayBySPIEv+0x42>
    1418:	4d c0       	rjmp	.+154    	; 0x14b4 <_ZN3DMD16scanDisplayBySPIEv+0xdc>
    141a:	ec 01       	movw	r28, r24
    141c:	e8 0e       	add	r14, r24
    141e:	f9 1e       	adc	r15, r25
            SPI.transfer(bDMDScreenRAM[offset+i+row3]);
    1420:	58 01       	movw	r10, r16
    1422:	8c ee       	ldi	r24, 0xEC	; 236
    1424:	a8 1a       	sub	r10, r24
    1426:	8e ef       	ldi	r24, 0xFE	; 254
    1428:	b8 0a       	sbc	r11, r24
            SPI.transfer(bDMDScreenRAM[offset+i+row2]);
    142a:	68 01       	movw	r12, r16
    142c:	ae ee       	ldi	r26, 0xEE	; 238
    142e:	ca 1a       	sub	r12, r26
    1430:	ae ef       	ldi	r26, 0xFE	; 254
    1432:	da 0a       	sbc	r13, r26
            SPI.transfer(bDMDScreenRAM[offset+i+row1]);
    1434:	48 01       	movw	r8, r16
    1436:	b0 ef       	ldi	r27, 0xF0	; 240
    1438:	8b 1a       	sub	r8, r27
    143a:	be ef       	ldi	r27, 0xFE	; 254
    143c:	9b 0a       	sbc	r9, r27
    
        //SPI transfer pixels to the display hardware shift registers
        int rowsize=DisplaysTotal<<2;
        int offset=rowsize * bDMDByte;
        for (int i=0;i<rowsize;i++) {
            SPI.transfer(bDMDScreenRAM[offset+i+row3]);
    143e:	d8 01       	movw	r26, r16
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	d5 01       	movw	r26, r10
    1446:	8d 91       	ld	r24, X+
    1448:	9c 91       	ld	r25, X
    144a:	e8 0f       	add	r30, r24
    144c:	f9 1f       	adc	r31, r25
    144e:	ec 0f       	add	r30, r28
    1450:	fd 1f       	adc	r31, r29
    1452:	60 81       	ld	r22, Z
    1454:	85 e6       	ldi	r24, 0x65	; 101
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN8SPIClass8transferEh>
            SPI.transfer(bDMDScreenRAM[offset+i+row2]);
    145c:	d8 01       	movw	r26, r16
    145e:	ed 91       	ld	r30, X+
    1460:	fc 91       	ld	r31, X
    1462:	d6 01       	movw	r26, r12
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	e8 0f       	add	r30, r24
    146a:	f9 1f       	adc	r31, r25
    146c:	ec 0f       	add	r30, r28
    146e:	fd 1f       	adc	r31, r29
    1470:	60 81       	ld	r22, Z
    1472:	85 e6       	ldi	r24, 0x65	; 101
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN8SPIClass8transferEh>
            SPI.transfer(bDMDScreenRAM[offset+i+row1]);
    147a:	d8 01       	movw	r26, r16
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	d4 01       	movw	r26, r8
    1482:	8d 91       	ld	r24, X+
    1484:	9c 91       	ld	r25, X
    1486:	e8 0f       	add	r30, r24
    1488:	f9 1f       	adc	r31, r25
    148a:	ec 0f       	add	r30, r28
    148c:	fd 1f       	adc	r31, r29
    148e:	60 81       	ld	r22, Z
    1490:	85 e6       	ldi	r24, 0x65	; 101
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN8SPIClass8transferEh>
            SPI.transfer(bDMDScreenRAM[offset+i]);
    1498:	d8 01       	movw	r26, r16
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	ec 0f       	add	r30, r28
    14a0:	fd 1f       	adc	r31, r29
    14a2:	60 81       	ld	r22, Z
    14a4:	85 e6       	ldi	r24, 0x65	; 101
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN8SPIClass8transferEh>
    14ac:	21 96       	adiw	r28, 0x01	; 1
	//	return;
    
        //SPI transfer pixels to the display hardware shift registers
        int rowsize=DisplaysTotal<<2;
        int offset=rowsize * bDMDByte;
        for (int i=0;i<rowsize;i++) {
    14ae:	ce 15       	cp	r28, r14
    14b0:	df 05       	cpc	r29, r15
    14b2:	29 f6       	brne	.-118    	; 0x143e <_ZN3DMD16scanDisplayBySPIEv+0x66>
            SPI.transfer(bDMDScreenRAM[offset+i+row2]);
            SPI.transfer(bDMDScreenRAM[offset+i+row1]);
            SPI.transfer(bDMDScreenRAM[offset+i]);
        }

        OE_DMD_ROWS_OFF();
    14b4:	29 98       	cbi	0x05, 1	; 5
        LATCH_DMD_SHIFT_REG_TO_OUTPUT();
    14b6:	45 9a       	sbi	0x08, 5	; 8
    14b8:	45 98       	cbi	0x08, 5	; 8
        switch (bDMDByte) {
    14ba:	f8 01       	movw	r30, r16
    14bc:	ea 5e       	subi	r30, 0xEA	; 234
    14be:	fe 4f       	sbci	r31, 0xFE	; 254
    14c0:	80 81       	ld	r24, Z
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <_ZN3DMD16scanDisplayBySPIEv+0x10a>
    14c6:	28 f0       	brcs	.+10     	; 0x14d2 <_ZN3DMD16scanDisplayBySPIEv+0xfa>
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	99 f0       	breq	.+38     	; 0x14f2 <_ZN3DMD16scanDisplayBySPIEv+0x11a>
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	c9 f0       	breq	.+50     	; 0x1502 <_ZN3DMD16scanDisplayBySPIEv+0x12a>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <_ZN3DMD16scanDisplayBySPIEv+0x136>
        case 0:			// row 1, 5, 9, 13 were clocked out
            LIGHT_DMD_ROW_01_05_09_13();
    14d2:	44 98       	cbi	0x08, 4	; 8
    14d4:	43 98       	cbi	0x08, 3	; 8
            bDMDByte=1;
    14d6:	f8 01       	movw	r30, r16
    14d8:	ea 5e       	subi	r30, 0xEA	; 234
    14da:	fe 4f       	sbci	r31, 0xFE	; 254
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	80 83       	st	Z, r24
            break;
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <_ZN3DMD16scanDisplayBySPIEv+0x136>
        case 1:			// row 2, 6, 10, 14 were clocked out
            LIGHT_DMD_ROW_02_06_10_14();
    14e2:	44 98       	cbi	0x08, 4	; 8
    14e4:	43 9a       	sbi	0x08, 3	; 8
            bDMDByte=2;
    14e6:	f8 01       	movw	r30, r16
    14e8:	ea 5e       	subi	r30, 0xEA	; 234
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	80 83       	st	Z, r24
            break;
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <_ZN3DMD16scanDisplayBySPIEv+0x136>
        case 2:			// row 3, 7, 11, 15 were clocked out
            LIGHT_DMD_ROW_03_07_11_15();
    14f2:	44 9a       	sbi	0x08, 4	; 8
    14f4:	43 98       	cbi	0x08, 3	; 8
            bDMDByte=3;
    14f6:	f8 01       	movw	r30, r16
    14f8:	ea 5e       	subi	r30, 0xEA	; 234
    14fa:	fe 4f       	sbci	r31, 0xFE	; 254
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	80 83       	st	Z, r24
            break;
    1500:	06 c0       	rjmp	.+12     	; 0x150e <_ZN3DMD16scanDisplayBySPIEv+0x136>
        case 3:			// row 4, 8, 12, 16 were clocked out
            LIGHT_DMD_ROW_04_08_12_16();
    1502:	44 9a       	sbi	0x08, 4	; 8
    1504:	43 9a       	sbi	0x08, 3	; 8
            bDMDByte=0;
    1506:	f8 01       	movw	r30, r16
    1508:	ea 5e       	subi	r30, 0xEA	; 234
    150a:	fe 4f       	sbci	r31, 0xFE	; 254
    150c:	10 82       	st	Z, r1
            break;
        }
        OE_DMD_ROWS_ON();
    150e:	29 9a       	sbi	0x05, 1	; 5
    
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	8f 90       	pop	r8
    1528:	08 95       	ret

0000152a <_ZN3DMD10selectFontEPKh>:

void DMD::selectFont(const uint8_t * font)
{
    this->Font = font;
    152a:	85 5f       	subi	r24, 0xF5	; 245
    152c:	9e 4f       	sbci	r25, 0xFE	; 254
    152e:	fc 01       	movw	r30, r24
    1530:	71 83       	std	Z+1, r23	; 0x01
    1532:	60 83       	st	Z, r22
    1534:	08 95       	ret

00001536 <_ZN3DMD9charWidthEh>:

int DMD::charWidth(const unsigned char letter)
{
    unsigned char c = letter;
    // Space is often not included in font so use width of 'n'
    if (c == ' ') c = 'n';
    1536:	60 32       	cpi	r22, 0x20	; 32
    1538:	09 f4       	brne	.+2      	; 0x153c <_ZN3DMD9charWidthEh+0x6>
    153a:	6e e6       	ldi	r22, 0x6E	; 110
    uint8_t width = 0;

    uint8_t firstChar = pgm_read_byte(this->Font + FONT_FIRST_CHAR);
    153c:	fc 01       	movw	r30, r24
    153e:	e5 5f       	subi	r30, 0xF5	; 245
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	20 81       	ld	r18, Z
    1544:	31 81       	ldd	r19, Z+1	; 0x01
    1546:	f9 01       	movw	r30, r18
    1548:	34 96       	adiw	r30, 0x04	; 4
    154a:	94 91       	lpm	r25, Z
    uint8_t charCount = pgm_read_byte(this->Font + FONT_CHAR_COUNT);
    154c:	31 96       	adiw	r30, 0x01	; 1
    154e:	e4 91       	lpm	r30, Z

    //uint16_t index = 0;

    if (c < firstChar || c >= (firstChar + charCount)) {
    1550:	69 17       	cp	r22, r25
    1552:	a8 f0       	brcs	.+42     	; 0x157e <_ZN3DMD9charWidthEh+0x48>
    1554:	46 2f       	mov	r20, r22
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	e9 0f       	add	r30, r25
    155c:	f1 1d       	adc	r31, r1
    155e:	4e 17       	cp	r20, r30
    1560:	5f 07       	cpc	r21, r31
    1562:	84 f4       	brge	.+32     	; 0x1584 <_ZN3DMD9charWidthEh+0x4e>
	    return 0;
    }
    c -= firstChar;
    1564:	69 1b       	sub	r22, r25

    if (pgm_read_byte(this->Font + FONT_LENGTH) == 0
    1566:	f9 01       	movw	r30, r18
    1568:	84 91       	lpm	r24, Z
	&& pgm_read_byte(this->Font + FONT_LENGTH + 1) == 0) {
    156a:	81 11       	cpse	r24, r1
    156c:	12 c0       	rjmp	.+36     	; 0x1592 <_ZN3DMD9charWidthEh+0x5c>
    156e:	31 96       	adiw	r30, 0x01	; 1
    1570:	e4 91       	lpm	r30, Z
    1572:	ee 23       	and	r30, r30
    1574:	51 f0       	breq	.+20     	; 0x158a <_ZN3DMD9charWidthEh+0x54>
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <_ZN3DMD9charWidthEh+0x5c>
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
    } else {
	    // variable width font, read width data
	    width = pgm_read_byte(this->Font + FONT_WIDTH_TABLE + c);
    }
    return width;
    1578:	8e 2f       	mov	r24, r30
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	08 95       	ret
    uint8_t charCount = pgm_read_byte(this->Font + FONT_CHAR_COUNT);

    //uint16_t index = 0;

    if (c < firstChar || c >= (firstChar + charCount)) {
	    return 0;
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	08 95       	ret
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	08 95       	ret
    c -= firstChar;

    if (pgm_read_byte(this->Font + FONT_LENGTH) == 0
	&& pgm_read_byte(this->Font + FONT_LENGTH + 1) == 0) {
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
    158a:	f9 01       	movw	r30, r18
    158c:	32 96       	adiw	r30, 0x02	; 2
    158e:	e4 91       	lpm	r30, Z
    1590:	f3 cf       	rjmp	.-26     	; 0x1578 <_ZN3DMD9charWidthEh+0x42>
    } else {
	    // variable width font, read width data
	    width = pgm_read_byte(this->Font + FONT_WIDTH_TABLE + c);
    1592:	e6 2f       	mov	r30, r22
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	36 96       	adiw	r30, 0x06	; 6
    1598:	e2 0f       	add	r30, r18
    159a:	f3 1f       	adc	r31, r19
    159c:	e4 91       	lpm	r30, Z
    159e:	ec cf       	rjmp	.-40     	; 0x1578 <_ZN3DMD9charWidthEh+0x42>

000015a0 <_ZN3DMD8drawCharEiihh>:
    this->Font = font;
}


int DMD::drawChar(const int bX, const int bY, const unsigned char letter, byte bGraphicsMode)
{
    15a0:	2f 92       	push	r2
    15a2:	3f 92       	push	r3
    15a4:	4f 92       	push	r4
    15a6:	5f 92       	push	r5
    15a8:	6f 92       	push	r6
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	64 97       	sbiw	r28, 0x14	; 20
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    if (bX > (DMD_PIXELS_ACROSS*DisplaysWide) || bY > (DMD_PIXELS_DOWN*DisplaysHigh) ) return -1;
    15d4:	fc 01       	movw	r30, r24
    15d6:	e3 5f       	subi	r30, 0xF3	; 243
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	e0 81       	ld	r30, Z
    15dc:	30 e2       	ldi	r19, 0x20	; 32
    15de:	e3 9f       	mul	r30, r19
    15e0:	f0 01       	movw	r30, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	e6 17       	cp	r30, r22
    15e6:	f7 07       	cpc	r31, r23
    15e8:	0c f4       	brge	.+2      	; 0x15ec <_ZN3DMD8drawCharEiihh+0x4c>
    15ea:	30 c1       	rjmp	.+608    	; 0x184c <_ZN3DMD8drawCharEiihh+0x2ac>
    15ec:	fc 01       	movw	r30, r24
    15ee:	e2 5f       	subi	r30, 0xF2	; 242
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	e0 81       	ld	r30, Z
    15f4:	a0 e1       	ldi	r26, 0x10	; 16
    15f6:	ea 9f       	mul	r30, r26
    15f8:	f0 01       	movw	r30, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	e4 17       	cp	r30, r20
    15fe:	f5 07       	cpc	r31, r21
    1600:	0c f4       	brge	.+2      	; 0x1604 <_ZN3DMD8drawCharEiihh+0x64>
    1602:	29 c1       	rjmp	.+594    	; 0x1856 <_ZN3DMD8drawCharEiihh+0x2b6>
    1604:	0d 83       	std	Y+5, r16	; 0x05
    1606:	1a 01       	movw	r2, r20
    1608:	7b 87       	std	Y+11, r23	; 0x0b
    160a:	6a 87       	std	Y+10, r22	; 0x0a
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char c = letter;
    uint8_t height = pgm_read_byte(this->Font + FONT_HEIGHT);
    1610:	fc 01       	movw	r30, r24
    1612:	e5 5f       	subi	r30, 0xF5	; 245
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	fb 01       	movw	r30, r22
    161c:	33 96       	adiw	r30, 0x03	; 3
    161e:	44 90       	lpm	r4, Z
    if (c == ' ') {
    1620:	20 32       	cpi	r18, 0x20	; 32
    1622:	b9 f4       	brne	.+46     	; 0x1652 <_ZN3DMD8drawCharEiihh+0xb2>
	    int charWide = charWidth(' ');
    1624:	60 e2       	ldi	r22, 0x20	; 32
    1626:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3DMD9charWidthEh>
    162a:	6c 01       	movw	r12, r24
	    this->drawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
    162c:	81 01       	movw	r16, r2
    162e:	04 0d       	add	r16, r4
    1630:	11 1d       	adc	r17, r1
    1632:	2a 85       	ldd	r18, Y+10	; 0x0a
    1634:	3b 85       	ldd	r19, Y+11	; 0x0b
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	ee 24       	eor	r14, r14
    163c:	e3 94       	inc	r14
    163e:	a1 01       	movw	r20, r2
    1640:	6a 85       	ldd	r22, Y+10	; 0x0a
    1642:	7b 85       	ldd	r23, Y+11	; 0x0b
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
	    return charWide;
    164c:	df 82       	std	Y+7, r13	; 0x07
    164e:	ce 82       	std	Y+6, r12	; 0x06
    1650:	2a c1       	rjmp	.+596    	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
    }
    uint8_t width = 0;
    uint8_t bytes = (height + 7) / 8;

    uint8_t firstChar = pgm_read_byte(this->Font + FONT_FIRST_CHAR);
    1652:	fb 01       	movw	r30, r22
    1654:	34 96       	adiw	r30, 0x04	; 4
    1656:	34 91       	lpm	r19, Z
    uint8_t charCount = pgm_read_byte(this->Font + FONT_CHAR_COUNT);
    1658:	31 96       	adiw	r30, 0x01	; 1
    165a:	14 91       	lpm	r17, Z

    uint16_t index = 0;

    if (c < firstChar || c >= (firstChar + charCount)) return 0;
    165c:	23 17       	cp	r18, r19
    165e:	08 f4       	brcc	.+2      	; 0x1662 <_ZN3DMD8drawCharEiihh+0xc2>
    1660:	ff c0       	rjmp	.+510    	; 0x1860 <_ZN3DMD8drawCharEiihh+0x2c0>
    1662:	42 2f       	mov	r20, r18
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	81 2f       	mov	r24, r17
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	83 0f       	add	r24, r19
    166c:	91 1d       	adc	r25, r1
    166e:	48 17       	cp	r20, r24
    1670:	59 07       	cpc	r21, r25
    1672:	0c f0       	brlt	.+2      	; 0x1676 <_ZN3DMD8drawCharEiihh+0xd6>
    1674:	f8 c0       	rjmp	.+496    	; 0x1866 <_ZN3DMD8drawCharEiihh+0x2c6>
	    int charWide = charWidth(' ');
	    this->drawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
	    return charWide;
    }
    uint8_t width = 0;
    uint8_t bytes = (height + 7) / 8;
    1676:	51 2c       	mov	r5, r1
    1678:	a2 01       	movw	r20, r4
    167a:	49 5f       	subi	r20, 0xF9	; 249
    167c:	5f 4f       	sbci	r21, 0xFF	; 255
    167e:	ca 01       	movw	r24, r20
    1680:	99 23       	and	r25, r25
    1682:	0c f4       	brge	.+2      	; 0x1686 <_ZN3DMD8drawCharEiihh+0xe6>
    1684:	07 96       	adiw	r24, 0x07	; 7
    1686:	95 95       	asr	r25
    1688:	87 95       	ror	r24
    168a:	95 95       	asr	r25
    168c:	87 95       	ror	r24
    168e:	95 95       	asr	r25
    1690:	87 95       	ror	r24
    uint8_t charCount = pgm_read_byte(this->Font + FONT_CHAR_COUNT);

    uint16_t index = 0;

    if (c < firstChar || c >= (firstChar + charCount)) return 0;
    c -= firstChar;
    1692:	23 1b       	sub	r18, r19

    if (pgm_read_byte(this->Font + FONT_LENGTH) == 0
    1694:	fb 01       	movw	r30, r22
    1696:	34 91       	lpm	r19, Z
	    && pgm_read_byte(this->Font + FONT_LENGTH + 1) == 0) {
    1698:	31 11       	cpse	r19, r1
    169a:	e8 c0       	rjmp	.+464    	; 0x186c <_ZN3DMD8drawCharEiihh+0x2cc>
    169c:	31 96       	adiw	r30, 0x01	; 1
    169e:	e4 91       	lpm	r30, Z
    16a0:	ee 23       	and	r30, r30
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <_ZN3DMD8drawCharEiihh+0x106>
    16a4:	f2 c0       	rjmp	.+484    	; 0x188a <_ZN3DMD8drawCharEiihh+0x2ea>
    16a6:	e2 c0       	rjmp	.+452    	; 0x186c <_ZN3DMD8drawCharEiihh+0x2cc>
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
	    index = c * bytes * width + FONT_WIDTH_TABLE;
    } else {
	    // variable width font, read width data, to get the index
	    for (uint8_t i = 0; i < c; i++) {
	        index += pgm_read_byte(this->Font + FONT_WIDTH_TABLE + i);
    16a8:	34 91       	lpm	r19, Z
    16aa:	a3 0f       	add	r26, r19
    16ac:	b1 1d       	adc	r27, r1
    16ae:	31 96       	adiw	r30, 0x01	; 1
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
	    index = c * bytes * width + FONT_WIDTH_TABLE;
    } else {
	    // variable width font, read width data, to get the index
	    for (uint8_t i = 0; i < c; i++) {
    16b0:	e4 17       	cp	r30, r20
    16b2:	f5 07       	cpc	r31, r21
    16b4:	c9 f7       	brne	.-14     	; 0x16a8 <_ZN3DMD8drawCharEiihh+0x108>
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN3DMD8drawCharEiihh+0x11c>
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
	        index += pgm_read_byte(this->Font + FONT_WIDTH_TABLE + i);
	    }
	    index = index * bytes + charCount + FONT_WIDTH_TABLE;
    16bc:	8a 9f       	mul	r24, r26
    16be:	a0 01       	movw	r20, r0
    16c0:	8b 9f       	mul	r24, r27
    16c2:	50 0d       	add	r21, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	e1 2f       	mov	r30, r17
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	36 96       	adiw	r30, 0x06	; 6
    16cc:	4e 0f       	add	r20, r30
    16ce:	5f 1f       	adc	r21, r31
	    width = pgm_read_byte(this->Font + FONT_WIDTH_TABLE + c);
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	36 96       	adiw	r30, 0x06	; 6
    16d6:	e6 0f       	add	r30, r22
    16d8:	f7 1f       	adc	r31, r23
    16da:	e4 91       	lpm	r30, Z
    }
    if (bX < -width || bY < -height) return width;
    16dc:	ee 2e       	mov	r14, r30
    16de:	f1 2c       	mov	r15, r1
    16e0:	ff 82       	std	Y+7, r15	; 0x07
    16e2:	ee 82       	std	Y+6, r14	; 0x06
    16e4:	97 01       	movw	r18, r14
    16e6:	31 95       	neg	r19
    16e8:	21 95       	neg	r18
    16ea:	31 09       	sbc	r19, r1
    16ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    16ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    16f0:	62 17       	cp	r22, r18
    16f2:	73 07       	cpc	r23, r19
    16f4:	0c f4       	brge	.+2      	; 0x16f8 <_ZN3DMD8drawCharEiihh+0x158>
    16f6:	d7 c0       	rjmp	.+430    	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
    16f8:	22 27       	eor	r18, r18
    16fa:	33 27       	eor	r19, r19
    16fc:	24 19       	sub	r18, r4
    16fe:	35 09       	sbc	r19, r5
    1700:	22 16       	cp	r2, r18
    1702:	33 06       	cpc	r3, r19
    1704:	0c f4       	brge	.+2      	; 0x1708 <_ZN3DMD8drawCharEiihh+0x168>
    1706:	cf c0       	rjmp	.+414    	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
    1708:	ee 23       	and	r30, r30
    170a:	09 f4       	brne	.+2      	; 0x170e <_ZN3DMD8drawCharEiihh+0x16e>
    170c:	cc c0       	rjmp	.+408    	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
	    int charWide = charWidth(' ');
	    this->drawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
	    return charWide;
    }
    uint8_t width = 0;
    uint8_t bytes = (height + 7) / 8;
    170e:	8c 87       	std	Y+12, r24	; 0x0c
    1710:	9b 01       	movw	r18, r22
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	e1 50       	subi	r30, 0x01	; 1
    1718:	79 01       	movw	r14, r18
    171a:	ee 0e       	add	r14, r30
    171c:	f1 1c       	adc	r15, r1
    171e:	f8 8a       	std	Y+16, r15	; 0x10
    1720:	ef 86       	std	Y+15, r14	; 0x0f
    1722:	7a 83       	std	Y+2, r23	; 0x02
    1724:	69 83       	std	Y+1, r22	; 0x01
    if (bX < -width || bY < -height) return width;

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
	        uint8_t data = pgm_read_byte(this->Font + index + j + (i * width));
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	25 5f       	subi	r18, 0xF5	; 245
    172c:	3e 4f       	sbci	r19, 0xFE	; 254
    172e:	39 87       	std	Y+9, r19	; 0x09
    1730:	28 87       	std	Y+8, r18	; 0x08
    1732:	7a 01       	movw	r14, r20
    1734:	e6 1a       	sub	r14, r22
    1736:	f7 0a       	sbc	r15, r23
    1738:	fa 8a       	std	Y+18, r15	; 0x12
    173a:	e9 8a       	std	Y+17, r14	; 0x11
		    int offset = (i * 8);
		    if ((i == bytes - 1) && bytes > 1) {
    173c:	99 27       	eor	r25, r25
    173e:	9c 01       	movw	r18, r24
    1740:	21 50       	subi	r18, 0x01	; 1
    1742:	31 09       	sbc	r19, r1
    1744:	3b 87       	std	Y+11, r19	; 0x0b
    1746:	2a 87       	std	Y+10, r18	; 0x0a
		        offset = height - 8;
    1748:	a2 01       	movw	r20, r4
    174a:	48 50       	subi	r20, 0x08	; 8
    174c:	51 09       	sbc	r21, r1
    174e:	5e 87       	std	Y+14, r21	; 0x0e
    1750:	4d 87       	std	Y+13, r20	; 0x0d
    }
    if (bX < -width || bY < -height) return width;

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
    1752:	1c 85       	ldd	r17, Y+12	; 0x0c
    1754:	11 50       	subi	r17, 0x01	; 1
    1756:	1e 3f       	cpi	r17, 0xFE	; 254
    1758:	08 f0       	brcs	.+2      	; 0x175c <_ZN3DMD8drawCharEiihh+0x1bc>
    175a:	6c c0       	rjmp	.+216    	; 0x1834 <_ZN3DMD8drawCharEiihh+0x294>
	        uint8_t data = pgm_read_byte(this->Font + index + j + (i * width));
    175c:	69 88       	ldd	r6, Y+17	; 0x11
    175e:	7a 88       	ldd	r7, Y+18	; 0x12
    1760:	e9 80       	ldd	r14, Y+1	; 0x01
    1762:	fa 80       	ldd	r15, Y+2	; 0x02
    1764:	6e 0c       	add	r6, r14
    1766:	7f 1c       	adc	r7, r15
    1768:	81 2f       	mov	r24, r17
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	ee 80       	ldd	r14, Y+6	; 0x06
    176e:	ff 80       	ldd	r15, Y+7	; 0x07
    1770:	e8 9e       	mul	r14, r24
    1772:	f0 01       	movw	r30, r0
    1774:	e9 9e       	mul	r14, r25
    1776:	f0 0d       	add	r31, r0
    1778:	f8 9e       	mul	r15, r24
    177a:	f0 0d       	add	r31, r0
    177c:	11 24       	eor	r1, r1
    177e:	e6 0d       	add	r30, r6
    1780:	f7 1d       	adc	r31, r7
    1782:	a8 85       	ldd	r26, Y+8	; 0x08
    1784:	b9 85       	ldd	r27, Y+9	; 0x09
    1786:	8d 90       	ld	r8, X+
    1788:	9c 90       	ld	r9, X
    178a:	e8 0d       	add	r30, r8
    178c:	f9 1d       	adc	r31, r9
    178e:	e4 91       	lpm	r30, Z
		    int offset = (i * 8);
    1790:	5c 01       	movw	r10, r24
    1792:	aa 0c       	add	r10, r10
    1794:	bb 1c       	adc	r11, r11
    1796:	aa 0c       	add	r10, r10
    1798:	bb 1c       	adc	r11, r11
    179a:	aa 0c       	add	r10, r10
    179c:	bb 1c       	adc	r11, r11
		    if ((i == bytes - 1) && bytes > 1) {
    179e:	ea 84       	ldd	r14, Y+10	; 0x0a
    17a0:	fb 84       	ldd	r15, Y+11	; 0x0b
    17a2:	8e 15       	cp	r24, r14
    17a4:	9f 05       	cpc	r25, r15
    17a6:	31 f4       	brne	.+12     	; 0x17b4 <_ZN3DMD8drawCharEiihh+0x214>
    17a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	28 f0       	brcs	.+10     	; 0x17b8 <_ZN3DMD8drawCharEiihh+0x218>
		        offset = height - 8;
    17ae:	cd 84       	ldd	r12, Y+13	; 0x0d
    17b0:	de 84       	ldd	r13, Y+14	; 0x0e
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <_ZN3DMD8drawCharEiihh+0x21a>

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
	        uint8_t data = pgm_read_byte(this->Font + index + j + (i * width));
		    int offset = (i * 8);
    17b4:	65 01       	movw	r12, r10
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <_ZN3DMD8drawCharEiihh+0x21a>
    17b8:	65 01       	movw	r12, r10
    17ba:	76 01       	movw	r14, r12
    17bc:	c2 0c       	add	r12, r2
    17be:	d3 1c       	adc	r13, r3
    17c0:	1c 8a       	std	Y+20, r1	; 0x14
    17c2:	1b 8a       	std	Y+19, r1	; 0x13
		    if ((i == bytes - 1) && bytes > 1) {
		        offset = height - 8;
            }
	        for (uint8_t k = 0; k < 8; k++) { // Vertical bits
		        if ((offset+k >= i*8) && (offset+k <= height)) {
		            if (data & (1 << k)) {
    17c4:	8e 2e       	mov	r8, r30
    17c6:	91 2c       	mov	r9, r1
		    int offset = (i * 8);
		    if ((i == bytes - 1) && bytes > 1) {
		        offset = height - 8;
            }
	        for (uint8_t k = 0; k < 8; k++) { // Vertical bits
		        if ((offset+k >= i*8) && (offset+k <= height)) {
    17c8:	2b 89       	ldd	r18, Y+19	; 0x13
    17ca:	ea 14       	cp	r14, r10
    17cc:	fb 04       	cpc	r15, r11
    17ce:	f4 f0       	brlt	.+60     	; 0x180c <_ZN3DMD8drawCharEiihh+0x26c>
    17d0:	4e 14       	cp	r4, r14
    17d2:	5f 04       	cpc	r5, r15
    17d4:	dc f0       	brlt	.+54     	; 0x180c <_ZN3DMD8drawCharEiihh+0x26c>
		            if (data & (1 << k)) {
    17d6:	c4 01       	movw	r24, r8
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <_ZN3DMD8drawCharEiihh+0x23e>
    17da:	95 95       	asr	r25
    17dc:	87 95       	ror	r24
    17de:	2a 95       	dec	r18
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <_ZN3DMD8drawCharEiihh+0x23a>
    17e2:	80 ff       	sbrs	r24, 0
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <_ZN3DMD8drawCharEiihh+0x25a>
			            writePixel(bX + j, bY + offset + k, bGraphicsMode, true);
    17e6:	01 e0       	ldi	r16, 0x01	; 1
    17e8:	2d 81       	ldd	r18, Y+5	; 0x05
    17ea:	a6 01       	movw	r20, r12
    17ec:	69 81       	ldd	r22, Y+1	; 0x01
    17ee:	7a 81       	ldd	r23, Y+2	; 0x02
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <_ZN3DMD8drawCharEiihh+0x26c>
		            } else {
			            writePixel(bX + j, bY + offset + k, bGraphicsMode, false);
    17fa:	00 e0       	ldi	r16, 0x00	; 0
    17fc:	2d 81       	ldd	r18, Y+5	; 0x05
    17fe:	a6 01       	movw	r20, r12
    1800:	69 81       	ldd	r22, Y+1	; 0x01
    1802:	7a 81       	ldd	r23, Y+2	; 0x02
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN3DMD10writePixelEjjhh>
    180c:	6b 89       	ldd	r22, Y+19	; 0x13
    180e:	7c 89       	ldd	r23, Y+20	; 0x14
    1810:	6f 5f       	subi	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	7c 8b       	std	Y+20, r23	; 0x14
    1816:	6b 8b       	std	Y+19, r22	; 0x13
    1818:	7f ef       	ldi	r23, 0xFF	; 255
    181a:	e7 1a       	sub	r14, r23
    181c:	f7 0a       	sbc	r15, r23
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	c8 1a       	sub	r12, r24
    1822:	d8 0a       	sbc	r13, r24
	        uint8_t data = pgm_read_byte(this->Font + index + j + (i * width));
		    int offset = (i * 8);
		    if ((i == bytes - 1) && bytes > 1) {
		        offset = height - 8;
            }
	        for (uint8_t k = 0; k < 8; k++) { // Vertical bits
    1824:	ab 89       	ldd	r26, Y+19	; 0x13
    1826:	bc 89       	ldd	r27, Y+20	; 0x14
    1828:	18 97       	sbiw	r26, 0x08	; 8
    182a:	71 f6       	brne	.-100    	; 0x17c8 <_ZN3DMD8drawCharEiihh+0x228>
    }
    if (bX < -width || bY < -height) return width;

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
	    for (uint8_t i = bytes - 1; i < 254; i--) { // Vertical Bytes
    182c:	11 50       	subi	r17, 0x01	; 1
    182e:	1e 3f       	cpi	r17, 0xFE	; 254
    1830:	08 f4       	brcc	.+2      	; 0x1834 <_ZN3DMD8drawCharEiihh+0x294>
    1832:	9a cf       	rjmp	.-204    	; 0x1768 <_ZN3DMD8drawCharEiihh+0x1c8>
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	31 96       	adiw	r30, 0x01	; 1
    183a:	fa 83       	std	Y+2, r31	; 0x02
    183c:	e9 83       	std	Y+1, r30	; 0x01
	    width = pgm_read_byte(this->Font + FONT_WIDTH_TABLE + c);
    }
    if (bX < -width || bY < -height) return width;

    // last but not least, draw the character
    for (uint8_t j = 0; j < width; j++) { // Width
    183e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1840:	f8 88       	ldd	r15, Y+16	; 0x10
    1842:	ee 16       	cp	r14, r30
    1844:	ff 06       	cpc	r15, r31
    1846:	09 f0       	breq	.+2      	; 0x184a <_ZN3DMD8drawCharEiihh+0x2aa>
    1848:	84 cf       	rjmp	.-248    	; 0x1752 <_ZN3DMD8drawCharEiihh+0x1b2>
    184a:	2d c0       	rjmp	.+90     	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
}


int DMD::drawChar(const int bX, const int bY, const unsigned char letter, byte bGraphicsMode)
{
    if (bX > (DMD_PIXELS_ACROSS*DisplaysWide) || bY > (DMD_PIXELS_DOWN*DisplaysHigh) ) return -1;
    184c:	2f ef       	ldi	r18, 0xFF	; 255
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	3f 83       	std	Y+7, r19	; 0x07
    1852:	2e 83       	std	Y+6, r18	; 0x06
    1854:	28 c0       	rjmp	.+80     	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
    1856:	4f ef       	ldi	r20, 0xFF	; 255
    1858:	5f ef       	ldi	r21, 0xFF	; 255
    185a:	5f 83       	std	Y+7, r21	; 0x07
    185c:	4e 83       	std	Y+6, r20	; 0x06
    185e:	23 c0       	rjmp	.+70     	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
    uint8_t firstChar = pgm_read_byte(this->Font + FONT_FIRST_CHAR);
    uint8_t charCount = pgm_read_byte(this->Font + FONT_CHAR_COUNT);

    uint16_t index = 0;

    if (c < firstChar || c >= (firstChar + charCount)) return 0;
    1860:	1f 82       	std	Y+7, r1	; 0x07
    1862:	1e 82       	std	Y+6, r1	; 0x06
    1864:	20 c0       	rjmp	.+64     	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
    1866:	1f 82       	std	Y+7, r1	; 0x07
    1868:	1e 82       	std	Y+6, r1	; 0x06
    186a:	1d c0       	rjmp	.+58     	; 0x18a6 <_ZN3DMD8drawCharEiihh+0x306>
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
	    index = c * bytes * width + FONT_WIDTH_TABLE;
    } else {
	    // variable width font, read width data, to get the index
	    for (uint8_t i = 0; i < c; i++) {
    186c:	22 23       	and	r18, r18
    186e:	09 f4       	brne	.+2      	; 0x1872 <_ZN3DMD8drawCharEiihh+0x2d2>
    1870:	23 cf       	rjmp	.-442    	; 0x16b8 <_ZN3DMD8drawCharEiihh+0x118>
    1872:	fb 01       	movw	r30, r22
    1874:	36 96       	adiw	r30, 0x06	; 6
    1876:	4f ef       	ldi	r20, 0xFF	; 255
    1878:	42 0f       	add	r20, r18
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	49 5f       	subi	r20, 0xF9	; 249
    187e:	5f 4f       	sbci	r21, 0xFF	; 255
    1880:	46 0f       	add	r20, r22
    1882:	57 1f       	adc	r21, r23
    1884:	a0 e0       	ldi	r26, 0x00	; 0
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	0f cf       	rjmp	.-482    	; 0x16a8 <_ZN3DMD8drawCharEiihh+0x108>
    c -= firstChar;

    if (pgm_read_byte(this->Font + FONT_LENGTH) == 0
	    && pgm_read_byte(this->Font + FONT_LENGTH + 1) == 0) {
	    // zero length is flag indicating fixed width font (array does not contain width data entries)
	    width = pgm_read_byte(this->Font + FONT_FIXED_WIDTH);
    188a:	fb 01       	movw	r30, r22
    188c:	32 96       	adiw	r30, 0x02	; 2
    188e:	e4 91       	lpm	r30, Z
	    index = c * bytes * width + FONT_WIDTH_TABLE;
    1890:	82 9f       	mul	r24, r18
    1892:	90 01       	movw	r18, r0
    1894:	11 24       	eor	r1, r1
    1896:	e2 9f       	mul	r30, r18
    1898:	a0 01       	movw	r20, r0
    189a:	e3 9f       	mul	r30, r19
    189c:	50 0d       	add	r21, r0
    189e:	11 24       	eor	r1, r1
    18a0:	4a 5f       	subi	r20, 0xFA	; 250
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	1b cf       	rjmp	.-458    	; 0x16dc <_ZN3DMD8drawCharEiihh+0x13c>
		        }
	        }
	    }
    }
    return width;
}
    18a6:	8e 81       	ldd	r24, Y+6	; 0x06
    18a8:	9f 81       	ldd	r25, Y+7	; 0x07
    18aa:	64 96       	adiw	r28, 0x14	; 20
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	7f 90       	pop	r7
    18d0:	6f 90       	pop	r6
    18d2:	5f 90       	pop	r5
    18d4:	4f 90       	pop	r4
    18d6:	3f 90       	pop	r3
    18d8:	2f 90       	pop	r2
    18da:	08 95       	ret

000018dc <_ZN3DMD10drawStringEiiPKchh>:

}

void DMD::drawString(int bX, int bY, const char *bChars, byte length,
		     byte bGraphicsMode)
{
    18dc:	2f 92       	push	r2
    18de:	3f 92       	push	r3
    18e0:	4f 92       	push	r4
    18e2:	5f 92       	push	r5
    18e4:	6f 92       	push	r6
    18e6:	7f 92       	push	r7
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <_ZN3DMD10drawStringEiiPKchh+0x26>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <_ZN3DMD10drawStringEiiPKchh+0x28>
    1904:	00 d0       	rcall	.+0      	; 0x1906 <_ZN3DMD10drawStringEiiPKchh+0x2a>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    if (bX >= (DMD_PIXELS_ACROSS*DisplaysWide) || bY >= DMD_PIXELS_DOWN * DisplaysHigh)
    190a:	fc 01       	movw	r30, r24
    190c:	e3 5f       	subi	r30, 0xF3	; 243
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	e0 81       	ld	r30, Z
    1912:	a0 e2       	ldi	r26, 0x20	; 32
    1914:	ea 9f       	mul	r30, r26
    1916:	f0 01       	movw	r30, r0
    1918:	11 24       	eor	r1, r1
    191a:	6e 17       	cp	r22, r30
    191c:	7f 07       	cpc	r23, r31
    191e:	0c f0       	brlt	.+2      	; 0x1922 <_ZN3DMD10drawStringEiiPKchh+0x46>
    1920:	82 c0       	rjmp	.+260    	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    1922:	fc 01       	movw	r30, r24
    1924:	e2 5f       	subi	r30, 0xF2	; 242
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	e0 81       	ld	r30, Z
    192a:	b0 e1       	ldi	r27, 0x10	; 16
    192c:	eb 9f       	mul	r30, r27
    192e:	f0 01       	movw	r30, r0
    1930:	11 24       	eor	r1, r1
    1932:	4e 17       	cp	r20, r30
    1934:	5f 07       	cpc	r21, r31
    1936:	0c f0       	brlt	.+2      	; 0x193a <_ZN3DMD10drawStringEiiPKchh+0x5e>
    1938:	76 c0       	rjmp	.+236    	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
	return;
    uint8_t height = pgm_read_byte(this->Font + FONT_HEIGHT);
    193a:	fc 01       	movw	r30, r24
    193c:	e5 5f       	subi	r30, 0xF5	; 245
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	01 90       	ld	r0, Z+
    1942:	f0 81       	ld	r31, Z
    1944:	e0 2d       	mov	r30, r0
    1946:	33 96       	adiw	r30, 0x03	; 3
    1948:	e4 91       	lpm	r30, Z
    if (bY+height<0) return;
    194a:	da 01       	movw	r26, r20
    194c:	ae 0f       	add	r26, r30
    194e:	b1 1d       	adc	r27, r1
    1950:	bc 83       	std	Y+4, r27	; 0x04
    1952:	ab 83       	std	Y+3, r26	; 0x03
    1954:	bb 23       	and	r27, r27
    1956:	0c f4       	brge	.+2      	; 0x195a <_ZN3DMD10drawStringEiiPKchh+0x7e>
    1958:	66 c0       	rjmp	.+204    	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    195a:	fe 2c       	mov	r15, r14
    195c:	09 83       	std	Y+1, r16	; 0x01
    195e:	19 01       	movw	r2, r18
    1960:	5a 01       	movw	r10, r20
    1962:	6b 01       	movw	r12, r22
    1964:	2c 01       	movw	r4, r24

    int strWidth = 0;
	this->drawLine(bX -1 , bY, bX -1 , bY + height, GRAPHICS_INVERSE);
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	71 09       	sbc	r23, r1
    196a:	ee 24       	eor	r14, r14
    196c:	e3 94       	inc	r14
    196e:	8d 01       	movw	r16, r26
    1970:	9b 01       	movw	r18, r22
    1972:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN3DMD8drawLineEiiiih>

    for (int i = 0; i < length; i++) {
    1976:	b9 81       	ldd	r27, Y+1	; 0x01
    1978:	bb 23       	and	r27, r27
    197a:	09 f4       	brne	.+2      	; 0x197e <_ZN3DMD10drawStringEiiPKchh+0xa2>
    197c:	54 c0       	rjmp	.+168    	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    197e:	41 01       	movw	r8, r2
    1980:	2b 0e       	add	r2, r27
    1982:	31 1c       	adc	r3, r1
    1984:	1e 82       	std	Y+6, r1	; 0x06
    1986:	1d 82       	std	Y+5, r1	; 0x05
	        this->drawLine(bX + strWidth , bY, bX + strWidth , bY + height, GRAPHICS_INVERSE);
            strWidth++;
        } else if (charWide < 0) {
            return;
        }
        if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide || bY >= DMD_PIXELS_DOWN * DisplaysHigh) return;
    1988:	32 01       	movw	r6, r4
    198a:	e3 ef       	ldi	r30, 0xF3	; 243
    198c:	6e 1a       	sub	r6, r30
    198e:	ee ef       	ldi	r30, 0xFE	; 254
    1990:	7e 0a       	sbc	r7, r30
    1992:	92 01       	movw	r18, r4
    1994:	22 5f       	subi	r18, 0xF2	; 242
    1996:	3e 4f       	sbci	r19, 0xFE	; 254
    1998:	3a 83       	std	Y+2, r19	; 0x02
    199a:	29 83       	std	Y+1, r18	; 0x01

    int strWidth = 0;
	this->drawLine(bX -1 , bY, bX -1 , bY + height, GRAPHICS_INVERSE);

    for (int i = 0; i < length; i++) {
        int charWide = this->drawChar(bX+strWidth, bY, bChars[i], bGraphicsMode);
    199c:	d4 01       	movw	r26, r8
    199e:	2d 91       	ld	r18, X+
    19a0:	4d 01       	movw	r8, r26
    19a2:	0f 2d       	mov	r16, r15
    19a4:	a5 01       	movw	r20, r10
    19a6:	6d 81       	ldd	r22, Y+5	; 0x05
    19a8:	7e 81       	ldd	r23, Y+6	; 0x06
    19aa:	6c 0d       	add	r22, r12
    19ac:	7d 1d       	adc	r23, r13
    19ae:	c2 01       	movw	r24, r4
    19b0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
	    if (charWide > 0) {
    19b4:	18 16       	cp	r1, r24
    19b6:	19 06       	cpc	r1, r25
    19b8:	cc f4       	brge	.+50     	; 0x19ec <_ZN3DMD10drawStringEiiPKchh+0x110>
	        strWidth += charWide ;
    19ba:	ed 81       	ldd	r30, Y+5	; 0x05
    19bc:	fe 81       	ldd	r31, Y+6	; 0x06
    19be:	e8 0f       	add	r30, r24
    19c0:	f9 1f       	adc	r31, r25
    19c2:	fe 83       	std	Y+6, r31	; 0x06
    19c4:	ed 83       	std	Y+5, r30	; 0x05
	        this->drawLine(bX + strWidth , bY, bX + strWidth , bY + height, GRAPHICS_INVERSE);
    19c6:	bf 01       	movw	r22, r30
    19c8:	6c 0d       	add	r22, r12
    19ca:	7d 1d       	adc	r23, r13
    19cc:	ee 24       	eor	r14, r14
    19ce:	e3 94       	inc	r14
    19d0:	0b 81       	ldd	r16, Y+3	; 0x03
    19d2:	1c 81       	ldd	r17, Y+4	; 0x04
    19d4:	9b 01       	movw	r18, r22
    19d6:	a5 01       	movw	r20, r10
    19d8:	c2 01       	movw	r24, r4
    19da:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN3DMD8drawLineEiiiih>
            strWidth++;
    19de:	2d 81       	ldd	r18, Y+5	; 0x05
    19e0:	3e 81       	ldd	r19, Y+6	; 0x06
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	3e 83       	std	Y+6, r19	; 0x06
    19e8:	2d 83       	std	Y+5, r18	; 0x05
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <_ZN3DMD10drawStringEiiPKchh+0x114>
        } else if (charWide < 0) {
    19ec:	99 23       	and	r25, r25
    19ee:	dc f0       	brlt	.+54     	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
            return;
        }
        if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide || bY >= DMD_PIXELS_DOWN * DisplaysHigh) return;
    19f0:	d3 01       	movw	r26, r6
    19f2:	8c 91       	ld	r24, X
    19f4:	b0 e2       	ldi	r27, 0x20	; 32
    19f6:	8b 9f       	mul	r24, r27
    19f8:	c0 01       	movw	r24, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	2d 81       	ldd	r18, Y+5	; 0x05
    19fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1a00:	2c 0d       	add	r18, r12
    1a02:	3d 1d       	adc	r19, r13
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	74 f4       	brge	.+28     	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    1a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0e:	80 81       	ld	r24, Z
    1a10:	f0 e1       	ldi	r31, 0x10	; 16
    1a12:	8f 9f       	mul	r24, r31
    1a14:	c0 01       	movw	r24, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	a8 16       	cp	r10, r24
    1a1a:	b9 06       	cpc	r11, r25
    1a1c:	24 f4       	brge	.+8      	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    if (bY+height<0) return;

    int strWidth = 0;
	this->drawLine(bX -1 , bY, bX -1 , bY + height, GRAPHICS_INVERSE);

    for (int i = 0; i < length; i++) {
    1a1e:	82 14       	cp	r8, r2
    1a20:	93 04       	cpc	r9, r3
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <_ZN3DMD10drawStringEiiPKchh+0x14a>
    1a24:	bb cf       	rjmp	.-138    	; 0x199c <_ZN3DMD10drawStringEiiPKchh+0xc0>
        } else if (charWide < 0) {
            return;
        }
        if ((bX + strWidth) >= DMD_PIXELS_ACROSS * DisplaysWide || bY >= DMD_PIXELS_DOWN * DisplaysHigh) return;
    }
}
    1a26:	26 96       	adiw	r28, 0x06	; 6
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	7f 90       	pop	r7
    1a4c:	6f 90       	pop	r6
    1a4e:	5f 90       	pop	r5
    1a50:	4f 90       	pop	r4
    1a52:	3f 90       	pop	r3
    1a54:	2f 90       	pop	r2
    1a56:	08 95       	ret

00001a58 <_ZN3DMD11drawMarqueeEPKchii>:

void DMD::drawMarquee(const char *bChars, byte length, int left, int top)
{
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	5f 92       	push	r5
    1a5e:	6f 92       	push	r6
    1a60:	7f 92       	push	r7
    1a62:	8f 92       	push	r8
    1a64:	9f 92       	push	r9
    1a66:	af 92       	push	r10
    1a68:	bf 92       	push	r11
    1a6a:	cf 92       	push	r12
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	6c 01       	movw	r12, r24
    1a7c:	54 2e       	mov	r5, r20
    1a7e:	19 01       	movw	r2, r18
    1a80:	38 01       	movw	r6, r16
    marqueeWidth = 0;
    1a82:	fc 01       	movw	r30, r24
    1a84:	ed 5f       	subi	r30, 0xFD	; 253
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	11 82       	std	Z+1, r1	; 0x01
    1a8a:	10 82       	st	Z, r1
    for (int i = 0; i < length; i++) {
    1a8c:	84 2e       	mov	r8, r20
    1a8e:	91 2c       	mov	r9, r1
    1a90:	18 14       	cp	r1, r8
    1a92:	19 04       	cpc	r1, r9
    1a94:	04 f5       	brge	.+64     	; 0x1ad6 <_ZN3DMD11drawMarqueeEPKchii+0x7e>
    1a96:	8c 01       	movw	r16, r24
    1a98:	0e 5f       	subi	r16, 0xFE	; 254
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	c6 2f       	mov	r28, r22
    1a9e:	d7 2f       	mov	r29, r23
    1aa0:	54 01       	movw	r10, r8
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	a8 0e       	add	r10, r24
    1aa6:	b1 1c       	adc	r11, r1
    1aa8:	ac 0c       	add	r10, r12
    1aaa:	bd 1c       	adc	r11, r13
	    marqueeText[i] = bChars[i];
	    marqueeWidth += charWidth(bChars[i]) + 1;
    1aac:	7f 01       	movw	r14, r30
    1aae:	fe 01       	movw	r30, r28

void DMD::drawMarquee(const char *bChars, byte length, int left, int top)
{
    marqueeWidth = 0;
    for (int i = 0; i < length; i++) {
	    marqueeText[i] = bChars[i];
    1ab0:	89 91       	ld	r24, Y+
    1ab2:	d8 01       	movw	r26, r16
    1ab4:	8d 93       	st	X+, r24
    1ab6:	8d 01       	movw	r16, r26
	    marqueeWidth += charWidth(bChars[i]) + 1;
    1ab8:	60 81       	ld	r22, Z
    1aba:	c6 01       	movw	r24, r12
    1abc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3DMD9charWidthEh>
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	20 81       	ld	r18, Z
    1ac6:	31 81       	ldd	r19, Z+1	; 0x01
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
}

void DMD::drawMarquee(const char *bChars, byte length, int left, int top)
{
    marqueeWidth = 0;
    for (int i = 0; i < length; i++) {
    1ad0:	0a 15       	cp	r16, r10
    1ad2:	1b 05       	cpc	r17, r11
    1ad4:	61 f7       	brne	.-40     	; 0x1aae <_ZN3DMD11drawMarqueeEPKchii+0x56>
	    marqueeText[i] = bChars[i];
	    marqueeWidth += charWidth(bChars[i]) + 1;
    }
    marqueeHeight=pgm_read_byte(this->Font + FONT_HEIGHT);
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	e5 5f       	subi	r30, 0xF5	; 245
    1ada:	fe 4f       	sbci	r31, 0xFE	; 254
    1adc:	01 90       	ld	r0, Z+
    1ade:	f0 81       	ld	r31, Z
    1ae0:	e0 2d       	mov	r30, r0
    1ae2:	33 96       	adiw	r30, 0x03	; 3
    1ae4:	84 91       	lpm	r24, Z
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	eb 5f       	subi	r30, 0xFB	; 251
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	80 83       	st	Z, r24
    marqueeText[length] = '\0';
    1af2:	f6 01       	movw	r30, r12
    1af4:	e8 0d       	add	r30, r8
    1af6:	f9 1d       	adc	r31, r9
    1af8:	12 82       	std	Z+2, r1	; 0x02
    marqueeOffsetY = top;
    1afa:	f6 01       	movw	r30, r12
    1afc:	e7 5f       	subi	r30, 0xF7	; 247
    1afe:	fe 4f       	sbci	r31, 0xFE	; 254
    1b00:	71 82       	std	Z+1, r7	; 0x01
    1b02:	60 82       	st	Z, r6
    marqueeOffsetX = left;
    1b04:	32 97       	sbiw	r30, 0x02	; 2
    1b06:	31 82       	std	Z+1, r3	; 0x01
    1b08:	20 82       	st	Z, r2
    marqueeLength = length;
    1b0a:	35 97       	sbiw	r30, 0x05	; 5
    1b0c:	50 82       	st	Z, r5
    drawString(marqueeOffsetX, marqueeOffsetY, marqueeText, marqueeLength,
    1b0e:	96 01       	movw	r18, r12
    1b10:	2e 5f       	subi	r18, 0xFE	; 254
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
	   GRAPHICS_NORMAL);
    1b14:	e1 2c       	mov	r14, r1
    1b16:	05 2d       	mov	r16, r5
    1b18:	a3 01       	movw	r20, r6
    1b1a:	b1 01       	movw	r22, r2
    1b1c:	c6 01       	movw	r24, r12
    1b1e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <_ZN3DMD10drawStringEiiPKchh>
}
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	5f 90       	pop	r5
    1b40:	3f 90       	pop	r3
    1b42:	2f 90       	pop	r2
    1b44:	08 95       	ret

00001b46 <_ZN3DMD11stepMarqueeEii>:

boolean DMD::stepMarquee(int amountX, int amountY)
{
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	ec 01       	movw	r28, r24
    1b60:	8b 01       	movw	r16, r22
    1b62:	7a 01       	movw	r14, r20
    boolean ret=false;
    marqueeOffsetX += amountX;
    1b64:	fc 01       	movw	r30, r24
    1b66:	e9 5f       	subi	r30, 0xF9	; 249
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	86 0f       	add	r24, r22
    1b70:	97 1f       	adc	r25, r23
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    marqueeOffsetY += amountY;
    1b76:	32 96       	adiw	r30, 0x02	; 2
    1b78:	20 81       	ld	r18, Z
    1b7a:	31 81       	ldd	r19, Z+1	; 0x01
    1b7c:	24 0f       	add	r18, r20
    1b7e:	35 1f       	adc	r19, r21
    1b80:	31 83       	std	Z+1, r19	; 0x01
    1b82:	20 83       	st	Z, r18
    if (marqueeOffsetX < -marqueeWidth) {
    1b84:	36 97       	sbiw	r30, 0x06	; 6
    1b86:	20 81       	ld	r18, Z
    1b88:	31 81       	ldd	r19, Z+1	; 0x01
    1b8a:	31 95       	neg	r19
    1b8c:	21 95       	neg	r18
    1b8e:	31 09       	sbc	r19, r1
    1b90:	82 17       	cp	r24, r18
    1b92:	93 07       	cpc	r25, r19
    1b94:	94 f4       	brge	.+36     	; 0x1bba <_ZN3DMD11stepMarqueeEii+0x74>
	    marqueeOffsetX = DMD_PIXELS_ACROSS * DisplaysWide;
    1b96:	34 96       	adiw	r30, 0x04	; 4
    1b98:	de 01       	movw	r26, r28
    1b9a:	a3 5f       	subi	r26, 0xF3	; 243
    1b9c:	be 4f       	sbci	r27, 0xFE	; 254
    1b9e:	8c 91       	ld	r24, X
    1ba0:	20 e2       	ldi	r18, 0x20	; 32
    1ba2:	82 9f       	mul	r24, r18
    1ba4:	c0 01       	movw	r24, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
	    clearScreen(true);
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	ce 01       	movw	r24, r28
    1bb0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
        ret=true;
    1bb4:	dd 24       	eor	r13, r13
    1bb6:	d3 94       	inc	r13
    1bb8:	16 c0       	rjmp	.+44     	; 0x1be6 <_ZN3DMD11stepMarqueeEii+0xa0>
    } else if (marqueeOffsetX > DMD_PIXELS_ACROSS * DisplaysWide) {
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e3 5f       	subi	r30, 0xF3	; 243
    1bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc0:	40 81       	ld	r20, Z
    1bc2:	60 e2       	ldi	r22, 0x20	; 32
    1bc4:	46 9f       	mul	r20, r22
    1bc6:	a0 01       	movw	r20, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	48 17       	cp	r20, r24
    1bcc:	59 07       	cpc	r21, r25
    1bce:	54 f4       	brge	.+20     	; 0x1be4 <_ZN3DMD11stepMarqueeEii+0x9e>
	    marqueeOffsetX = -marqueeWidth;
    1bd0:	36 97       	sbiw	r30, 0x06	; 6
    1bd2:	31 83       	std	Z+1, r19	; 0x01
    1bd4:	20 83       	st	Z, r18
	    clearScreen(true);
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	ce 01       	movw	r24, r28
    1bda:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
        ret=true;
    1bde:	dd 24       	eor	r13, r13
    1be0:	d3 94       	inc	r13
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <_ZN3DMD11stepMarqueeEii+0xa0>
	   GRAPHICS_NORMAL);
}

boolean DMD::stepMarquee(int amountX, int amountY)
{
    boolean ret=false;
    1be4:	d1 2c       	mov	r13, r1
	    clearScreen(true);
        ret=true;
    }
    
        
    if (marqueeOffsetY < -marqueeHeight) {
    1be6:	fe 01       	movw	r30, r28
    1be8:	e7 5f       	subi	r30, 0xF7	; 247
    1bea:	fe 4f       	sbci	r31, 0xFE	; 254
    1bec:	40 81       	ld	r20, Z
    1bee:	51 81       	ldd	r21, Z+1	; 0x01
    1bf0:	34 97       	sbiw	r30, 0x04	; 4
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	91 95       	neg	r25
    1bf8:	81 95       	neg	r24
    1bfa:	91 09       	sbc	r25, r1
    1bfc:	48 17       	cp	r20, r24
    1bfe:	59 07       	cpc	r21, r25
    1c00:	94 f4       	brge	.+36     	; 0x1c26 <_ZN3DMD11stepMarqueeEii+0xe0>
	    marqueeOffsetY = DMD_PIXELS_DOWN * DisplaysHigh;
    1c02:	34 96       	adiw	r30, 0x04	; 4
    1c04:	de 01       	movw	r26, r28
    1c06:	a2 5f       	subi	r26, 0xF2	; 242
    1c08:	be 4f       	sbci	r27, 0xFE	; 254
    1c0a:	8c 91       	ld	r24, X
    1c0c:	a0 e1       	ldi	r26, 0x10	; 16
    1c0e:	8a 9f       	mul	r24, r26
    1c10:	c0 01       	movw	r24, r0
    1c12:	11 24       	eor	r1, r1
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
	    clearScreen(true);
    1c18:	61 e0       	ldi	r22, 0x01	; 1
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
        ret=true;
    1c20:	dd 24       	eor	r13, r13
    1c22:	d3 94       	inc	r13
    1c24:	14 c0       	rjmp	.+40     	; 0x1c4e <_ZN3DMD11stepMarqueeEii+0x108>
    } else if (marqueeOffsetY > DMD_PIXELS_DOWN * DisplaysHigh) {
    1c26:	fe 01       	movw	r30, r28
    1c28:	e2 5f       	subi	r30, 0xF2	; 242
    1c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2c:	20 81       	ld	r18, Z
    1c2e:	b0 e1       	ldi	r27, 0x10	; 16
    1c30:	2b 9f       	mul	r18, r27
    1c32:	90 01       	movw	r18, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	24 17       	cp	r18, r20
    1c38:	35 07       	cpc	r19, r21
    1c3a:	4c f4       	brge	.+18     	; 0x1c4e <_ZN3DMD11stepMarqueeEii+0x108>
	    marqueeOffsetY = -marqueeHeight;
    1c3c:	35 97       	sbiw	r30, 0x05	; 5
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
	    clearScreen(true);
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	ce 01       	movw	r24, r28
    1c46:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
        ret=true;
    1c4a:	dd 24       	eor	r13, r13
    1c4c:	d3 94       	inc	r13
    }

    // Special case horizontal scrolling to improve speed
    if (amountY==0 && amountX==-1) {
    1c4e:	ef 28       	or	r14, r15
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <_ZN3DMD11stepMarqueeEii+0x10e>
    1c52:	f1 c0       	rjmp	.+482    	; 0x1e36 <_ZN3DMD11stepMarqueeEii+0x2f0>
    1c54:	0f 3f       	cpi	r16, 0xFF	; 255
    1c56:	ef ef       	ldi	r30, 0xFF	; 255
    1c58:	1e 07       	cpc	r17, r30
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <_ZN3DMD11stepMarqueeEii+0x118>
    1c5c:	83 c0       	rjmp	.+262    	; 0x1d64 <_ZN3DMD11stepMarqueeEii+0x21e>
        // Shift entire screen one bit
        for (int i=0; i<DMD_RAM_SIZE_BYTES*DisplaysTotal;i++) {
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e1 5f       	subi	r30, 0xF1	; 241
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	80 81       	ld	r24, Z
    1c66:	88 23       	and	r24, r24
    1c68:	e1 f1       	breq	.+120    	; 0x1ce2 <_ZN3DMD11stepMarqueeEii+0x19c>
    1c6a:	e0 e0       	ldi	r30, 0x00	; 0
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
            if ((i%(DisplaysWide*4)) == (DisplaysWide*4) -1) {
    1c6e:	7e 01       	movw	r14, r28
    1c70:	23 ef       	ldi	r18, 0xF3	; 243
    1c72:	e2 1a       	sub	r14, r18
    1c74:	2e ef       	ldi	r18, 0xFE	; 254
    1c76:	f2 0a       	sbc	r15, r18
    }

    // Special case horizontal scrolling to improve speed
    if (amountY==0 && amountX==-1) {
        // Shift entire screen one bit
        for (int i=0; i<DMD_RAM_SIZE_BYTES*DisplaysTotal;i++) {
    1c78:	8e 01       	movw	r16, r28
    1c7a:	01 5f       	subi	r16, 0xF1	; 241
    1c7c:	1e 4f       	sbci	r17, 0xFE	; 254
            if ((i%(DisplaysWide*4)) == (DisplaysWide*4) -1) {
    1c7e:	d7 01       	movw	r26, r14
    1c80:	2c 91       	ld	r18, X
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	22 0f       	add	r18, r18
    1c8a:	33 1f       	adc	r19, r19
    1c8c:	cf 01       	movw	r24, r30
    1c8e:	b9 01       	movw	r22, r18
    1c90:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodhi4>
    1c94:	21 50       	subi	r18, 0x01	; 1
    1c96:	31 09       	sbc	r19, r1
    1c98:	82 17       	cp	r24, r18
    1c9a:	93 07       	cpc	r25, r19
    1c9c:	49 f4       	brne	.+18     	; 0x1cb0 <_ZN3DMD11stepMarqueeEii+0x16a>
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]<<1)+1;
    1c9e:	a8 81       	ld	r26, Y
    1ca0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca2:	ae 0f       	add	r26, r30
    1ca4:	bf 1f       	adc	r27, r31
    1ca6:	8c 91       	ld	r24, X
    1ca8:	88 0f       	add	r24, r24
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	8c 93       	st	X, r24
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <_ZN3DMD11stepMarqueeEii+0x188>
            } else {
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]<<1) + ((bDMDScreenRAM[i+1] & 0x80) >>7);
    1cb0:	a8 81       	ld	r26, Y
    1cb2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb4:	ae 0f       	add	r26, r30
    1cb6:	bf 1f       	adc	r27, r31
    1cb8:	11 96       	adiw	r26, 0x01	; 1
    1cba:	8c 91       	ld	r24, X
    1cbc:	11 97       	sbiw	r26, 0x01	; 1
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	99 27       	eor	r25, r25
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	8c 91       	ld	r24, X
    1cc8:	88 0f       	add	r24, r24
    1cca:	89 0f       	add	r24, r25
    1ccc:	8c 93       	st	X, r24
    }

    // Special case horizontal scrolling to improve speed
    if (amountY==0 && amountX==-1) {
        // Shift entire screen one bit
        for (int i=0; i<DMD_RAM_SIZE_BYTES*DisplaysTotal;i++) {
    1cce:	31 96       	adiw	r30, 0x01	; 1
    1cd0:	d8 01       	movw	r26, r16
    1cd2:	8c 91       	ld	r24, X
    1cd4:	b0 e4       	ldi	r27, 0x40	; 64
    1cd6:	8b 9f       	mul	r24, r27
    1cd8:	c0 01       	movw	r24, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	e8 17       	cp	r30, r24
    1cde:	f9 07       	cpc	r31, r25
    1ce0:	74 f2       	brlt	.-100    	; 0x1c7e <_ZN3DMD11stepMarqueeEii+0x138>
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]<<1) + ((bDMDScreenRAM[i+1] & 0x80) >>7);
            }
        }

        // Redraw last char on screen
        int strWidth=marqueeOffsetX;
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e9 5f       	subi	r30, 0xF9	; 249
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	e0 80       	ld	r14, Z
    1cea:	f1 80       	ldd	r15, Z+1	; 0x01
        for (byte i=0; i < marqueeLength; i++) {
    1cec:	35 97       	sbiw	r30, 0x05	; 5
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 23       	and	r24, r24
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <_ZN3DMD11stepMarqueeEii+0x1b0>
    1cf4:	b4 c0       	rjmp	.+360    	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
    1cf6:	c1 2c       	mov	r12, r1
            int wide = charWidth(marqueeText[i]);
            if (strWidth+wide >= DisplaysWide*DMD_PIXELS_ACROSS) {
    1cf8:	5e 01       	movw	r10, r28
    1cfa:	e3 ef       	ldi	r30, 0xF3	; 243
    1cfc:	ae 1a       	sub	r10, r30
    1cfe:	ee ef       	ldi	r30, 0xFE	; 254
    1d00:	be 0a       	sbc	r11, r30
            }
        }

        // Redraw last char on screen
        int strWidth=marqueeOffsetX;
        for (byte i=0; i < marqueeLength; i++) {
    1d02:	4e 01       	movw	r8, r28
    1d04:	fe ef       	ldi	r31, 0xFE	; 254
    1d06:	8f 1a       	sub	r8, r31
    1d08:	9f 0a       	sbc	r9, r31
            int wide = charWidth(marqueeText[i]);
    1d0a:	0c 2d       	mov	r16, r12
    1d0c:	10 e0       	ldi	r17, 0x00	; 0
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e0 0f       	add	r30, r16
    1d12:	f1 1f       	adc	r31, r17
    1d14:	62 81       	ldd	r22, Z+2	; 0x02
    1d16:	ce 01       	movw	r24, r28
    1d18:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3DMD9charWidthEh>
            if (strWidth+wide >= DisplaysWide*DMD_PIXELS_ACROSS) {
    1d1c:	ac 01       	movw	r20, r24
    1d1e:	4e 0d       	add	r20, r14
    1d20:	5f 1d       	adc	r21, r15
    1d22:	d5 01       	movw	r26, r10
    1d24:	2c 91       	ld	r18, X
    1d26:	b0 e2       	ldi	r27, 0x20	; 32
    1d28:	2b 9f       	mul	r18, r27
    1d2a:	90 01       	movw	r18, r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	42 17       	cp	r20, r18
    1d30:	53 07       	cpc	r21, r19
    1d32:	7c f0       	brlt	.+30     	; 0x1d52 <_ZN3DMD11stepMarqueeEii+0x20c>
                drawChar(strWidth, marqueeOffsetY,marqueeText[i],GRAPHICS_NORMAL);
    1d34:	fe 01       	movw	r30, r28
    1d36:	e0 0f       	add	r30, r16
    1d38:	f1 1f       	adc	r31, r17
    1d3a:	de 01       	movw	r26, r28
    1d3c:	a7 5f       	subi	r26, 0xF7	; 247
    1d3e:	be 4f       	sbci	r27, 0xFE	; 254
    1d40:	4d 91       	ld	r20, X+
    1d42:	5c 91       	ld	r21, X
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	22 81       	ldd	r18, Z+2	; 0x02
    1d48:	b7 01       	movw	r22, r14
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
                return ret;
    1d50:	86 c0       	rjmp	.+268    	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
            }
            strWidth += wide+1;
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	e8 0e       	add	r14, r24
    1d56:	f9 1e       	adc	r15, r25
            }
        }

        // Redraw last char on screen
        int strWidth=marqueeOffsetX;
        for (byte i=0; i < marqueeLength; i++) {
    1d58:	c3 94       	inc	r12
    1d5a:	f4 01       	movw	r30, r8
    1d5c:	80 81       	ld	r24, Z
    1d5e:	c8 16       	cp	r12, r24
    1d60:	a0 f2       	brcs	.-88     	; 0x1d0a <_ZN3DMD11stepMarqueeEii+0x1c4>
    1d62:	7d c0       	rjmp	.+250    	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
                drawChar(strWidth, marqueeOffsetY,marqueeText[i],GRAPHICS_NORMAL);
                return ret;
            }
            strWidth += wide+1;
        }
    } else if (amountY==0 && amountX==1) {
    1d64:	01 30       	cpi	r16, 0x01	; 1
    1d66:	11 05       	cpc	r17, r1
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <_ZN3DMD11stepMarqueeEii+0x226>
    1d6a:	65 c0       	rjmp	.+202    	; 0x1e36 <_ZN3DMD11stepMarqueeEii+0x2f0>
        // Shift entire screen one bit
        for (int i=(DMD_RAM_SIZE_BYTES*DisplaysTotal)-1; i>=0;i--) {
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e1 5f       	subi	r30, 0xF1	; 241
    1d70:	fe 4f       	sbci	r31, 0xFE	; 254
    1d72:	20 81       	ld	r18, Z
    1d74:	f0 e4       	ldi	r31, 0x40	; 64
    1d76:	2f 9f       	mul	r18, r31
    1d78:	90 01       	movw	r18, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	31 09       	sbc	r19, r1
    1d80:	4a f1       	brmi	.+82     	; 0x1dd4 <_ZN3DMD11stepMarqueeEii+0x28e>
            if ((i%(DisplaysWide*4)) == 0) {
    1d82:	8e 01       	movw	r16, r28
    1d84:	03 5f       	subi	r16, 0xF3	; 243
    1d86:	1e 4f       	sbci	r17, 0xFE	; 254
    1d88:	d8 01       	movw	r26, r16
    1d8a:	6c 91       	ld	r22, X
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	66 0f       	add	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	66 0f       	add	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	c9 01       	movw	r24, r18
    1d98:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__divmodhi4>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	49 f4       	brne	.+18     	; 0x1db2 <_ZN3DMD11stepMarqueeEii+0x26c>
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]>>1)+128;
    1da0:	e8 81       	ld	r30, Y
    1da2:	f9 81       	ldd	r31, Y+1	; 0x01
    1da4:	e2 0f       	add	r30, r18
    1da6:	f3 1f       	adc	r31, r19
    1da8:	80 81       	ld	r24, Z
    1daa:	86 95       	lsr	r24
    1dac:	80 58       	subi	r24, 0x80	; 128
    1dae:	80 83       	st	Z, r24
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <_ZN3DMD11stepMarqueeEii+0x288>
            } else {
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]>>1) + ((bDMDScreenRAM[i-1] & 1) <<7);
    1db2:	e8 81       	ld	r30, Y
    1db4:	f9 81       	ldd	r31, Y+1	; 0x01
    1db6:	e2 0f       	add	r30, r18
    1db8:	f3 1f       	adc	r31, r19
    1dba:	df 01       	movw	r26, r30
    1dbc:	11 97       	sbiw	r26, 0x01	; 1
    1dbe:	9c 91       	ld	r25, X
    1dc0:	80 81       	ld	r24, Z
    1dc2:	86 95       	lsr	r24
    1dc4:	b0 e8       	ldi	r27, 0x80	; 128
    1dc6:	9b 9f       	mul	r25, r27
    1dc8:	80 0d       	add	r24, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	80 83       	st	Z, r24
            }
            strWidth += wide+1;
        }
    } else if (amountY==0 && amountX==1) {
        // Shift entire screen one bit
        for (int i=(DMD_RAM_SIZE_BYTES*DisplaysTotal)-1; i>=0;i--) {
    1dce:	21 50       	subi	r18, 0x01	; 1
    1dd0:	31 09       	sbc	r19, r1
    1dd2:	d0 f6       	brcc	.-76     	; 0x1d88 <_ZN3DMD11stepMarqueeEii+0x242>
                bDMDScreenRAM[i]=(bDMDScreenRAM[i]>>1) + ((bDMDScreenRAM[i-1] & 1) <<7);
            }
        }

        // Redraw last char on screen
        int strWidth=marqueeOffsetX;
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e9 5f       	subi	r30, 0xF9	; 249
    1dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dda:	e0 80       	ld	r14, Z
    1ddc:	f1 80       	ldd	r15, Z+1	; 0x01
        for (byte i=0; i < marqueeLength; i++) {
    1dde:	35 97       	sbiw	r30, 0x05	; 5
    1de0:	80 81       	ld	r24, Z
    1de2:	88 23       	and	r24, r24
    1de4:	e1 f1       	breq	.+120    	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
    1de6:	91 2c       	mov	r9, r1
    1de8:	8f 01       	movw	r16, r30
            int wide = charWidth(marqueeText[i]);
    1dea:	a9 2c       	mov	r10, r9
    1dec:	b1 2c       	mov	r11, r1
    1dee:	fe 01       	movw	r30, r28
    1df0:	ea 0d       	add	r30, r10
    1df2:	fb 1d       	adc	r31, r11
    1df4:	62 81       	ldd	r22, Z+2	; 0x02
    1df6:	ce 01       	movw	r24, r28
    1df8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN3DMD9charWidthEh>
            if (strWidth+wide >= 0) {
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	2e 0d       	add	r18, r14
    1e00:	3f 1d       	adc	r19, r15
    1e02:	33 23       	and	r19, r19
    1e04:	7c f0       	brlt	.+30     	; 0x1e24 <_ZN3DMD11stepMarqueeEii+0x2de>
                drawChar(strWidth, marqueeOffsetY,marqueeText[i],GRAPHICS_NORMAL);
    1e06:	fe 01       	movw	r30, r28
    1e08:	ea 0d       	add	r30, r10
    1e0a:	fb 1d       	adc	r31, r11
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a7 5f       	subi	r26, 0xF7	; 247
    1e10:	be 4f       	sbci	r27, 0xFE	; 254
    1e12:	4d 91       	ld	r20, X+
    1e14:	5c 91       	ld	r21, X
    1e16:	00 e0       	ldi	r16, 0x00	; 0
    1e18:	22 81       	ldd	r18, Z+2	; 0x02
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
                return ret;
    1e22:	1d c0       	rjmp	.+58     	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
            }
            strWidth += wide+1;
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	e8 0e       	add	r14, r24
    1e28:	f9 1e       	adc	r15, r25
            }
        }

        // Redraw last char on screen
        int strWidth=marqueeOffsetX;
        for (byte i=0; i < marqueeLength; i++) {
    1e2a:	93 94       	inc	r9
    1e2c:	d8 01       	movw	r26, r16
    1e2e:	8c 91       	ld	r24, X
    1e30:	98 16       	cp	r9, r24
    1e32:	d8 f2       	brcs	.-74     	; 0x1dea <_ZN3DMD11stepMarqueeEii+0x2a4>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <_ZN3DMD11stepMarqueeEii+0x318>
                return ret;
            }
            strWidth += wide+1;
        }
    } else {
        drawString(marqueeOffsetX, marqueeOffsetY, marqueeText, marqueeLength,
    1e36:	fe 01       	movw	r30, r28
    1e38:	ee 5f       	subi	r30, 0xFE	; 254
    1e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3c:	9e 01       	movw	r18, r28
    1e3e:	2e 5f       	subi	r18, 0xFE	; 254
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	de 01       	movw	r26, r28
    1e44:	a7 5f       	subi	r26, 0xF7	; 247
    1e46:	be 4f       	sbci	r27, 0xFE	; 254
	       GRAPHICS_NORMAL);
    1e48:	4d 91       	ld	r20, X+
    1e4a:	5c 91       	ld	r21, X
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
                return ret;
            }
            strWidth += wide+1;
        }
    } else {
        drawString(marqueeOffsetX, marqueeOffsetY, marqueeText, marqueeLength,
    1e4e:	12 97       	sbiw	r26, 0x02	; 2
	       GRAPHICS_NORMAL);
    1e50:	6d 91       	ld	r22, X+
    1e52:	7c 91       	ld	r23, X
    1e54:	e1 2c       	mov	r14, r1
    1e56:	00 81       	ld	r16, Z
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <_ZN3DMD10drawStringEiiPKchh>
    }

    return ret;
}
    1e5e:	8d 2d       	mov	r24, r13
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	df 90       	pop	r13
    1e6e:	cf 90       	pop	r12
    1e70:	bf 90       	pop	r11
    1e72:	af 90       	pop	r10
    1e74:	9f 90       	pop	r9
    1e76:	8f 90       	pop	r8
    1e78:	08 95       	ret

00001e7a <_Z13DriverIO_Initv>:

//************************************************************************
void DriverIO_Init()
{
	// using timer0 overflow ISR with prescaler 64
	TCCR0A = _BV(WGM01)|_BV(WGM00);
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = _BV(TOIE0);
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = _BV(CS01)|_BV(CS00);
    1e84:	85 bd       	out	0x25, r24	; 37
#ifdef DEBUG_LOG_ENABLE
	DriverUart_Init(DEBUG_LOG_BAUDRATE);
#endif
		
	// enable global IRQ
	sei();
    1e86:	78 94       	sei
    1e88:	08 95       	ret

00001e8a <_Z6millisv>:

//************************************************************************
Timer_t millis()
{
	uint32_t m;
	uint8_t oldSREG = SREG;
    1e8a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1e8c:	f8 94       	cli
	m = timer0_millis;
    1e8e:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <_ZL13timer0_millis>
    1e92:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <_ZL13timer0_millis+0x1>
    1e96:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL13timer0_millis+0x2>
    1e9a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_ZL13timer0_millis+0x3>
	SREG = oldSREG;
    1e9e:	2f bf       	out	0x3f, r18	; 63
	return m;
}
    1ea0:	08 95       	ret

00001ea2 <__vector_16>:

//************************************************************************
ISR(TIMER0_OVF_vect)
{
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	uint32_t m = timer0_millis;
    1eb8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_ZL13timer0_millis>
    1ebc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_ZL13timer0_millis+0x1>
    1ec0:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_ZL13timer0_millis+0x2>
    1ec4:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_ZL13timer0_millis+0x3>
	uint8_t f = timer0_fract;
    1ec8:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <_ZL12timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1ecc:	23 e0       	ldi	r18, 0x03	; 3
    1ece:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX)
    1ed0:	2d 37       	cpi	r18, 0x7D	; 125
    1ed2:	20 f4       	brcc	.+8      	; 0x1edc <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	uint32_t m = timer0_millis;
	uint8_t f = timer0_fract;

	m += MILLIS_INC;
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	a1 1d       	adc	r26, r1
    1ed8:	b1 1d       	adc	r27, r1
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX)
	{
		f -= FRACT_MAX;
    1edc:	26 e8       	ldi	r18, 0x86	; 134
    1ede:	23 0f       	add	r18, r19
		m += 1;
    1ee0:	02 96       	adiw	r24, 0x02	; 2
    1ee2:	a1 1d       	adc	r26, r1
    1ee4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1ee6:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <_ZL12timer0_fract>
	timer0_millis = m;
    1eea:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_ZL13timer0_millis>
    1eee:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_ZL13timer0_millis+0x1>
    1ef2:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <_ZL13timer0_millis+0x2>
    1ef6:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <_ZL13timer0_millis+0x3>
	timer0_overflow_count++;
    1efa:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
    1efe:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
    1f02:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <__data_end+0x2>
    1f06:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <__data_end+0x3>
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	a1 1d       	adc	r26, r1
    1f0e:	b1 1d       	adc	r27, r1
    1f10:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
    1f14:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
    1f18:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__data_end+0x2>
    1f1c:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__data_end+0x3>
    1f20:	bf 91       	pop	r27
    1f22:	af 91       	pop	r26
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <_ZN8SPIClass5beginEv>:
  SPCR |= (1<<SPE);
}

void SPIClass::end() 
{
  SPCR &= ~(1<<SPE);
    1f36:	8c b5       	in	r24, 0x2c	; 44
    1f38:	80 61       	ori	r24, 0x10	; 16
    1f3a:	8c bd       	out	0x2c, r24	; 44
    1f3c:	8c b5       	in	r24, 0x2c	; 44
    1f3e:	80 64       	ori	r24, 0x40	; 64
    1f40:	8c bd       	out	0x2c, r24	; 44
    1f42:	08 95       	ret

00001f44 <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST)  SPCR |= (1<<DORD);
    1f44:	61 30       	cpi	r22, 0x01	; 1
    1f46:	21 f4       	brne	.+8      	; 0x1f50 <_ZN8SPIClass11setBitOrderEh+0xc>
    1f48:	8c b5       	in	r24, 0x2c	; 44
    1f4a:	80 62       	ori	r24, 0x20	; 32
    1f4c:	8c bd       	out	0x2c, r24	; 44
    1f4e:	08 95       	ret
  else SPCR &= ~(1<<DORD);
    1f50:	8c b5       	in	r24, 0x2c	; 44
    1f52:	8f 7d       	andi	r24, 0xDF	; 223
    1f54:	8c bd       	out	0x2c, r24	; 44
    1f56:	08 95       	ret

00001f58 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1f58:	8c b5       	in	r24, 0x2c	; 44
    1f5a:	83 7f       	andi	r24, 0xF3	; 243
    1f5c:	68 2b       	or	r22, r24
    1f5e:	6c bd       	out	0x2c, r22	; 44
    1f60:	08 95       	ret

00001f62 <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    1f62:	8c b5       	in	r24, 0x2c	; 44
    1f64:	8c 7f       	andi	r24, 0xFC	; 252
    1f66:	96 2f       	mov	r25, r22
    1f68:	93 70       	andi	r25, 0x03	; 3
    1f6a:	89 2b       	or	r24, r25
    1f6c:	8c bd       	out	0x2c, r24	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1f6e:	9d b5       	in	r25, 0x2d	; 45
    1f70:	62 fb       	bst	r22, 2
    1f72:	88 27       	eor	r24, r24
    1f74:	80 f9       	bld	r24, 0
    1f76:	69 2f       	mov	r22, r25
    1f78:	6e 7f       	andi	r22, 0xFE	; 254
    1f7a:	68 2b       	or	r22, r24
    1f7c:	6d bd       	out	0x2d, r22	; 45
    1f7e:	08 95       	ret

00001f80 <_ZN8SPIClass8transferEh>:
}

uint8_t SPIClass::transfer(uint8_t data)
{
	SPDR = data;					// send data
    1f80:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));		// wait for transfer complete
    1f82:	0d b4       	in	r0, 0x2d	; 45
    1f84:	07 fe       	sbrs	r0, 7
    1f86:	fd cf       	rjmp	.-6      	; 0x1f82 <_ZN8SPIClass8transferEh+0x2>
	return(SPDR);					// receive data
    1f88:	8e b5       	in	r24, 0x2e	; 46
}
    1f8a:	08 95       	ret

00001f8c <_Z19handler_button_initv>:
static void handler_button_short_press();
static void handler_button_long_press();

void handler_button_init()
{
	Button_GPIO_ISR__Init();	
    1f8c:	8a b1       	in	r24, 0x0a	; 10
    1f8e:	8b 71       	andi	r24, 0x1B	; 27
    1f90:	8a b9       	out	0x0a, r24	; 10
    1f92:	53 98       	cbi	0x0a, 3	; 10
    1f94:	8b b1       	in	r24, 0x0b	; 11
    1f96:	84 6e       	ori	r24, 0xE4	; 228
    1f98:	8b b9       	out	0x0b, r24	; 11
    1f9a:	5b 9a       	sbi	0x0b, 3	; 11
    1f9c:	e9 e6       	ldi	r30, 0x69	; 105
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	84 60       	ori	r24, 0x04	; 4
    1fa4:	80 83       	st	Z, r24
    1fa6:	e9 9a       	sbi	0x1d, 1	; 29
    1fa8:	08 95       	ret

00001faa <_Z23handler_button_mannagerv>:
			ttgame.match_winner_side = PLAYER_SIDE_LEFT;
	}
}

void handler_button_mannager()
{
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
	if (Millis > softrtc.isr_timer)
    1fae:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    1fb2:	00 91 79 01 	lds	r16, 0x0179	; 0x800179 <softrtc+0x3>
    1fb6:	10 91 7a 01 	lds	r17, 0x017A	; 0x80017a <softrtc+0x4>
    1fba:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <softrtc+0x5>
    1fbe:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <softrtc+0x6>
    1fc2:	06 17       	cp	r16, r22
    1fc4:	17 07       	cpc	r17, r23
    1fc6:	28 07       	cpc	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	88 f5       	brcc	.+98     	; 0x202e <_Z23handler_button_mannagerv+0x84>
	Button_GPIO_ISR__Init();	
}

static void handler_softrtc_update_isr()
{
	if(ttgame.match_state == MATCH_FINISHED)
    1fcc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ttgame+0x3>
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	21 f4       	brne	.+8      	; 0x1fdc <_Z23handler_button_mannagerv+0x32>
	{
		softrtc.colon_on = true;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <softrtc+0x2>
    1fda:	19 c0       	rjmp	.+50     	; 0x200e <_Z23handler_button_mannagerv+0x64>
		return;
	}
	
	softrtc.second++;
    1fdc:	e6 e7       	ldi	r30, 0x76	; 118
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	80 83       	st	Z, r24
	softrtc.colon_on = !softrtc.colon_on;	
    1fe6:	92 81       	ldd	r25, Z+2	; 0x02
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	91 11       	cpse	r25, r1
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	e6 e7       	ldi	r30, 0x76	; 118
    1ff0:	f1 e0       	ldi	r31, 0x01	; 1
    1ff2:	82 83       	std	Z+2, r24	; 0x02
	if (softrtc.second >= 60)
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8c 33       	cpi	r24, 0x3C	; 60
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <_Z23handler_button_mannagerv+0x58>
	{
		softrtc.minute++;
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	81 83       	std	Z+1, r24	; 0x01
		softrtc.second = 0;
    2000:	10 82       	st	Z, r1
	}
	if (softrtc.minute >= 60)
    2002:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <softrtc+0x1>
    2006:	8c 33       	cpi	r24, 0x3C	; 60
    2008:	10 f0       	brcs	.+4      	; 0x200e <_Z23handler_button_mannagerv+0x64>
	{
		softrtc.minute = 0;
    200a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <softrtc+0x1>
void handler_button_mannager()
{
	if (Millis > softrtc.isr_timer)
	{
		handler_softrtc_update_isr();
		softrtc.isr_timer = RTC_ISR_UPDATE_TIME_MS + Millis;
    200e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	88 51       	subi	r24, 0x18	; 24
    2018:	9c 4f       	sbci	r25, 0xFC	; 252
    201a:	af 4f       	sbci	r26, 0xFF	; 255
    201c:	bf 4f       	sbci	r27, 0xFF	; 255
    201e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <softrtc+0x3>
    2022:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <softrtc+0x4>
    2026:	a0 93 7b 01 	sts	0x017B, r26	; 0x80017b <softrtc+0x5>
    202a:	b0 93 7c 01 	sts	0x017C, r27	; 0x80017c <softrtc+0x6>
	}
}

static void handler_button_short_press()
{
	if (remote.button_short_press & REMOTE_BUTTON_A)
    202e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <remote+0x1>
    2032:	88 23       	and	r24, r24
    2034:	bc f4       	brge	.+46     	; 0x2064 <_Z23handler_button_mannagerv+0xba>
	{
		remote.button_short_press &= ~REMOTE_BUTTON_A;
    2036:	e6 e6       	ldi	r30, 0x66	; 102
    2038:	f1 e0       	ldi	r31, 0x01	; 1
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	8f 77       	andi	r24, 0x7F	; 127
    203e:	81 83       	std	Z+1, r24	; 0x01
		DebugLog("Short Press: A");
    2040:	00 00       	nop
		if (ttgame.app_mode == APP_MODE_MATCH && ttgame.match_state < MATCH_FINISHED)
    2042:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ttgame>
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	69 f4       	brne	.+26     	; 0x2064 <_Z23handler_button_mannagerv+0xba>
    204a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ttgame+0x3>
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	48 f4       	brcc	.+18     	; 0x2064 <_Z23handler_button_mannagerv+0xba>
		{
			// left team score increment
			ttgame.left_team->match_score++;			
    2052:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <ttgame+0x4>
    2056:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <ttgame+0x5>
    205a:	80 81       	ld	r24, Z
    205c:	8f 5f       	subi	r24, 0xFF	; 255
    205e:	80 83       	st	Z, r24
			handler_display_match_winner();
    2060:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_Z28handler_display_match_winnerv>
		}
	}

	if (remote.button_short_press & REMOTE_BUTTON_B)
    2064:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <remote+0x1>
    2068:	82 ff       	sbrs	r24, 2
    206a:	17 c0       	rjmp	.+46     	; 0x209a <_Z23handler_button_mannagerv+0xf0>
	{
		remote.button_short_press &= ~REMOTE_BUTTON_B;	
    206c:	e6 e6       	ldi	r30, 0x66	; 102
    206e:	f1 e0       	ldi	r31, 0x01	; 1
    2070:	81 81       	ldd	r24, Z+1	; 0x01
    2072:	8b 7f       	andi	r24, 0xFB	; 251
    2074:	81 83       	std	Z+1, r24	; 0x01
		DebugLog("Short Press: B");
    2076:	00 00       	nop
		if (ttgame.app_mode == APP_MODE_MATCH && ttgame.match_state < MATCH_FINISHED)
    2078:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ttgame>
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	69 f4       	brne	.+26     	; 0x209a <_Z23handler_button_mannagerv+0xf0>
    2080:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ttgame+0x3>
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	48 f4       	brcc	.+18     	; 0x209a <_Z23handler_button_mannagerv+0xf0>
		{
			// right team score increment
			ttgame.right_team->match_score++;
    2088:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <ttgame+0x6>
    208c:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <ttgame+0x7>
    2090:	80 81       	ld	r24, Z
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 83       	st	Z, r24
			handler_display_match_winner();
    2096:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_Z28handler_display_match_winnerv>
		}
	}
	
	if (remote.button_short_press & REMOTE_BUTTON_C)
    209a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <remote+0x1>
    209e:	85 ff       	sbrs	r24, 5
    20a0:	2a c0       	rjmp	.+84     	; 0x20f6 <_Z23handler_button_mannagerv+0x14c>
	{
		remote.button_short_press &= ~REMOTE_BUTTON_C;	
    20a2:	e6 e6       	ldi	r30, 0x66	; 102
    20a4:	f1 e0       	ldi	r31, 0x01	; 1
    20a6:	81 81       	ldd	r24, Z+1	; 0x01
    20a8:	8f 7d       	andi	r24, 0xDF	; 223
    20aa:	81 83       	std	Z+1, r24	; 0x01
		DebugLog("Short Press: C");
    20ac:	00 00       	nop
		
		// clear match score
		ttgame.left_team->match_score = 0;
    20ae:	ed e7       	ldi	r30, 0x7D	; 125
    20b0:	f1 e0       	ldi	r31, 0x01	; 1
    20b2:	a4 81       	ldd	r26, Z+4	; 0x04
    20b4:	b5 81       	ldd	r27, Z+5	; 0x05
    20b6:	1c 92       	st	X, r1
		ttgame.right_team->match_score = 0;
    20b8:	a6 81       	ldd	r26, Z+6	; 0x06
    20ba:	b7 81       	ldd	r27, Z+7	; 0x07
    20bc:	1c 92       	st	X, r1
		softrtc.minute = 0;
    20be:	a6 e7       	ldi	r26, 0x76	; 118
    20c0:	b1 e0       	ldi	r27, 0x01	; 1
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	1c 92       	st	X, r1
    20c6:	11 97       	sbiw	r26, 0x01	; 1
		softrtc.second = 0;
    20c8:	1c 92       	st	X, r1
		if(((ttgame.left_team->series_score + ttgame.right_team->series_score) % 2) == 0)
    20ca:	a4 81       	ldd	r26, Z+4	; 0x04
    20cc:	b5 81       	ldd	r27, Z+5	; 0x05
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	9c 91       	ld	r25, X
    20d2:	06 80       	ldd	r0, Z+6	; 0x06
    20d4:	f7 81       	ldd	r31, Z+7	; 0x07
    20d6:	e0 2d       	mov	r30, r0
    20d8:	81 81       	ldd	r24, Z+1	; 0x01
    20da:	89 0f       	add	r24, r25
    20dc:	80 fd       	sbrc	r24, 0
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <_Z23handler_button_mannagerv+0x13c>
			ttgame.service_side = PLAYER_SIDE_LEFT;
    20e0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <ttgame+0x2>
    20e4:	03 c0       	rjmp	.+6      	; 0x20ec <_Z23handler_button_mannagerv+0x142>
		else 
			ttgame.service_side = PLAYER_SIDE_RIGHT;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <ttgame+0x2>
		ttgame.match_winner_side = PLAYER_SIDE_NONE;
    20ec:	ed e7       	ldi	r30, 0x7D	; 125
    20ee:	f1 e0       	ldi	r31, 0x01	; 1
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	80 87       	std	Z+8, r24	; 0x08
		ttgame.match_state = MATCH_RUNNING;
    20f4:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if (remote.button_short_press & REMOTE_BUTTON_D)
    20f6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <remote+0x1>
    20fa:	86 ff       	sbrs	r24, 6
    20fc:	2a c0       	rjmp	.+84     	; 0x2152 <_Z23handler_button_mannagerv+0x1a8>
	{
		remote.button_short_press &= ~REMOTE_BUTTON_D;	
    20fe:	e6 e6       	ldi	r30, 0x66	; 102
    2100:	f1 e0       	ldi	r31, 0x01	; 1
    2102:	81 81       	ldd	r24, Z+1	; 0x01
    2104:	8f 7b       	andi	r24, 0xBF	; 191
    2106:	81 83       	std	Z+1, r24	; 0x01
		DebugLog("Short Press: D");
    2108:	00 00       	nop
		
		// switch display app modes
		ttgame.app_mode++;
    210a:	ed e7       	ldi	r30, 0x7D	; 125
    210c:	f1 e0       	ldi	r31, 0x01	; 1
    210e:	80 81       	ld	r24, Z
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	80 83       	st	Z, r24
		if (ttgame.app_mode >= MAX_APP_MODE)
    2114:	83 30       	cpi	r24, 0x03	; 3
    2116:	d8 f0       	brcs	.+54     	; 0x214e <_Z23handler_button_mannagerv+0x1a4>
		{
			if(ttgame.left_team->match_score > 0 || ttgame.right_team->match_score > 0 ||
    2118:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <ttgame+0x4>
    211c:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <ttgame+0x5>
    2120:	80 81       	ld	r24, Z
    2122:	81 11       	cpse	r24, r1
    2124:	0e c0       	rjmp	.+28     	; 0x2142 <_Z23handler_button_mannagerv+0x198>
    2126:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <ttgame+0x6>
    212a:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <ttgame+0x7>
    212e:	8c 91       	ld	r24, X
    2130:	81 11       	cpse	r24, r1
    2132:	07 c0       	rjmp	.+14     	; 0x2142 <_Z23handler_button_mannagerv+0x198>
    2134:	81 81       	ldd	r24, Z+1	; 0x01
    2136:	81 11       	cpse	r24, r1
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <_Z23handler_button_mannagerv+0x198>
				ttgame.left_team->series_score > 0 || ttgame.right_team->series_score > 0)
    213a:	11 96       	adiw	r26, 0x01	; 1
    213c:	8c 91       	ld	r24, X
    213e:	88 23       	and	r24, r24
    2140:	21 f0       	breq	.+8      	; 0x214a <_Z23handler_button_mannagerv+0x1a0>
				ttgame.app_mode = APP_MODE_MATCH;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ttgame>
    2148:	02 c0       	rjmp	.+4      	; 0x214e <_Z23handler_button_mannagerv+0x1a4>
			else ttgame.app_mode = APP_MODE_TITTLE;
    214a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <ttgame>
		}
		ttgame.display_state = DISPLAY_INIT;
    214e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ttgame+0x1>
	}
}

static void handler_button_long_press()
{
	if (remote.button_long_press & REMOTE_BUTTON_C)
    2152:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <remote+0x2>
    2156:	85 ff       	sbrs	r24, 5
    2158:	20 c0       	rjmp	.+64     	; 0x219a <_Z23handler_button_mannagerv+0x1f0>
	{
		remote.button_long_press &= ~REMOTE_BUTTON_C;	
    215a:	e6 e6       	ldi	r30, 0x66	; 102
    215c:	f1 e0       	ldi	r31, 0x01	; 1
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	8f 7d       	andi	r24, 0xDF	; 223
    2162:	82 83       	std	Z+2, r24	; 0x02
		DebugLog("Long Press: C");
    2164:	00 00       	nop
		
		// clear series score
		ttgame.left_team->match_score = 0;
    2166:	ed e7       	ldi	r30, 0x7D	; 125
    2168:	f1 e0       	ldi	r31, 0x01	; 1
    216a:	a4 81       	ldd	r26, Z+4	; 0x04
    216c:	b5 81       	ldd	r27, Z+5	; 0x05
    216e:	1c 92       	st	X, r1
		ttgame.right_team->match_score = 0;
    2170:	a6 81       	ldd	r26, Z+6	; 0x06
    2172:	b7 81       	ldd	r27, Z+7	; 0x07
    2174:	1c 92       	st	X, r1
		ttgame.left_team->series_score = 0;
    2176:	a4 81       	ldd	r26, Z+4	; 0x04
    2178:	b5 81       	ldd	r27, Z+5	; 0x05
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	1c 92       	st	X, r1
		ttgame.right_team->series_score = 0;
    217e:	a6 81       	ldd	r26, Z+6	; 0x06
    2180:	b7 81       	ldd	r27, Z+7	; 0x07
    2182:	11 96       	adiw	r26, 0x01	; 1
    2184:	1c 92       	st	X, r1
		softrtc.minute = 0;
    2186:	a6 e7       	ldi	r26, 0x76	; 118
    2188:	b1 e0       	ldi	r27, 0x01	; 1
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	1c 92       	st	X, r1
    218e:	11 97       	sbiw	r26, 0x01	; 1
		softrtc.second = 0;
    2190:	1c 92       	st	X, r1
		ttgame.service_side = PLAYER_SIDE_LEFT;
    2192:	12 82       	std	Z+2, r1	; 0x02
		ttgame.match_winner_side = PLAYER_SIDE_NONE;
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	80 87       	std	Z+8, r24	; 0x08
		ttgame.match_state = MATCH_RUNNING;
    2198:	13 82       	std	Z+3, r1	; 0x03
	}
	
	if (remote.button_long_press & REMOTE_BUTTON_D)
    219a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <remote+0x2>
    219e:	86 ff       	sbrs	r24, 6
    21a0:	27 c0       	rjmp	.+78     	; 0x21f0 <_Z23handler_button_mannagerv+0x246>
	{
		remote.button_long_press &= ~REMOTE_BUTTON_D;
    21a2:	e6 e6       	ldi	r30, 0x66	; 102
    21a4:	f1 e0       	ldi	r31, 0x01	; 1
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	8f 7b       	andi	r24, 0xBF	; 191
    21aa:	82 83       	std	Z+2, r24	; 0x02
		DebugLog("Long Press: D");		
    21ac:	00 00       	nop
		
		// toggle team side
		if(ttgame.service_side == PLAYER_SIDE_LEFT)
    21ae:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <ttgame+0x2>
    21b2:	81 11       	cpse	r24, r1
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <_Z23handler_button_mannagerv+0x214>
			ttgame.service_side = PLAYER_SIDE_RIGHT;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <ttgame+0x2>
    21bc:	04 c0       	rjmp	.+8      	; 0x21c6 <_Z23handler_button_mannagerv+0x21c>
		else if(ttgame.service_side == PLAYER_SIDE_RIGHT)
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	11 f4       	brne	.+4      	; 0x21c6 <_Z23handler_button_mannagerv+0x21c>
			ttgame.service_side = PLAYER_SIDE_LEFT;			
    21c2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <ttgame+0x2>
		
		tt_team_t *tt_team_ptr = ttgame.left_team;
    21c6:	ed e7       	ldi	r30, 0x7D	; 125
    21c8:	f1 e0       	ldi	r31, 0x01	; 1
    21ca:	84 81       	ldd	r24, Z+4	; 0x04
    21cc:	95 81       	ldd	r25, Z+5	; 0x05
		ttgame.left_team = ttgame.right_team;
    21ce:	26 81       	ldd	r18, Z+6	; 0x06
    21d0:	37 81       	ldd	r19, Z+7	; 0x07
    21d2:	35 83       	std	Z+5, r19	; 0x05
    21d4:	24 83       	std	Z+4, r18	; 0x04
		ttgame.right_team = tt_team_ptr;
    21d6:	97 83       	std	Z+7, r25	; 0x07
    21d8:	86 83       	std	Z+6, r24	; 0x06
		
		if(ttgame.match_winner_side == PLAYER_SIDE_LEFT)
    21da:	80 85       	ldd	r24, Z+8	; 0x08
    21dc:	81 11       	cpse	r24, r1
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <_Z23handler_button_mannagerv+0x23e>
			ttgame.match_winner_side = PLAYER_SIDE_RIGHT;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <ttgame+0x8>
    21e6:	04 c0       	rjmp	.+8      	; 0x21f0 <_Z23handler_button_mannagerv+0x246>
		else if(ttgame.match_winner_side == PLAYER_SIDE_RIGHT)
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <_Z23handler_button_mannagerv+0x246>
			ttgame.match_winner_side = PLAYER_SIDE_LEFT;
    21ec:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <ttgame+0x8>
	DebugLog("\rremote_isr: %d, %.2X, ", vtstate, remote.button_short_press);
}

static void handler_remote_long_press_debounce()
{
	if (remote.button_press_backup != BUTTON_CLEAR)
    21f0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <remote>
    21f4:	88 23       	and	r24, r24
    21f6:	79 f1       	breq	.+94     	; 0x2256 <_Z23handler_button_mannagerv+0x2ac>
	{
		if(remote.button_press_backup == REMOTE_BUTTON_IO_PINS && Millis > remote.debounce_long_timer)
    21f8:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <remote>
    21fc:	89 b1       	in	r24, 0x09	; 9
    21fe:	84 7e       	andi	r24, 0xE4	; 228
    2200:	98 13       	cpse	r25, r24
    2202:	29 c0       	rjmp	.+82     	; 0x2256 <_Z23handler_button_mannagerv+0x2ac>
    2204:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2208:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <remote+0xc>
    220c:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <remote+0xd>
    2210:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <remote+0xe>
    2214:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <remote+0xf>
    2218:	06 17       	cp	r16, r22
    221a:	17 07       	cpc	r17, r23
    221c:	28 07       	cpc	r18, r24
    221e:	39 07       	cpc	r19, r25
    2220:	d0 f4       	brcc	.+52     	; 0x2256 <_Z23handler_button_mannagerv+0x2ac>
		{
			if(++remote.debounce_long_count >= BUTTON_LONG_DEBOUNCE_COUNT)
    2222:	e6 e6       	ldi	r30, 0x66	; 102
    2224:	f1 e0       	ldi	r31, 0x01	; 1
    2226:	83 81       	ldd	r24, Z+3	; 0x03
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	83 83       	std	Z+3, r24	; 0x03
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	18 f0       	brcs	.+6      	; 0x2236 <_Z23handler_button_mannagerv+0x28c>
			{
				remote.button_long_press = remote.button_press_backup;
    2230:	80 81       	ld	r24, Z
    2232:	82 83       	std	Z+2, r24	; 0x02
				remote.button_press_backup = BUTTON_CLEAR;
    2234:	10 82       	st	Z, r1
			}
			remote.debounce_long_timer = BUTTON_LONG_DEBOUNCE_TIME_MS + Millis;
    2236:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8c 50       	subi	r24, 0x0C	; 12
    2240:	9e 4f       	sbci	r25, 0xFE	; 254
    2242:	af 4f       	sbci	r26, 0xFF	; 255
    2244:	bf 4f       	sbci	r27, 0xFF	; 255
    2246:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <remote+0xc>
    224a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <remote+0xd>
    224e:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <remote+0xe>
    2252:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <remote+0xf>
	}
	
	handler_button_short_press();
	handler_button_long_press();
	handler_remote_long_press_debounce();
}
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <__vector_2>:

ISR(REMOTE_VT_ISR_VECT)
{
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	2f 93       	push	r18
    2268:	3f 93       	push	r19
    226a:	4f 93       	push	r20
    226c:	5f 93       	push	r21
    226e:	6f 93       	push	r22
    2270:	7f 93       	push	r23
    2272:	8f 93       	push	r24
    2274:	9f 93       	push	r25
    2276:	af 93       	push	r26
    2278:	bf 93       	push	r27
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	ef 93       	push	r30
    2280:	ff 93       	push	r31
}

static void handler_remote_button_press_isr()
{
	uint8_t vtstate = REMOTE_VT_IO_PIN ? 1 : 0;	
	if(vtstate) //rising edge, button downed
    2282:	4b 9b       	sbis	0x09, 3	; 9
    2284:	12 c0       	rjmp	.+36     	; 0x22aa <__vector_2+0x4e>
	{
		remote.button_press_backup = REMOTE_BUTTON_IO_PINS;
    2286:	89 b1       	in	r24, 0x09	; 9
    2288:	84 7e       	andi	r24, 0xE4	; 228
    228a:	c6 e6       	ldi	r28, 0x66	; 102
    228c:	d1 e0       	ldi	r29, 0x01	; 1
    228e:	88 83       	st	Y, r24
		remote.debounce_long_timer = BUTTON_LONG_DEBOUNCE_TIME_MS + Millis;
    2290:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8c 50       	subi	r24, 0x0C	; 12
    229a:	9e 4f       	sbci	r25, 0xFE	; 254
    229c:	af 4f       	sbci	r26, 0xFF	; 255
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	8c 87       	std	Y+12, r24	; 0x0c
    22a2:	9d 87       	std	Y+13, r25	; 0x0d
    22a4:	ae 87       	std	Y+14, r26	; 0x0e
    22a6:	bf 87       	std	Y+15, r27	; 0x0f
    22a8:	09 c0       	rjmp	.+18     	; 0x22bc <__vector_2+0x60>
	}
	else //falling edge, button released
	{
		if(remote.button_press_backup != BUTTON_CLEAR)
    22aa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <remote>
    22ae:	88 23       	and	r24, r24
    22b0:	29 f0       	breq	.+10     	; 0x22bc <__vector_2+0x60>
		{
			remote.button_short_press = remote.button_press_backup;
    22b2:	e6 e6       	ldi	r30, 0x66	; 102
    22b4:	f1 e0       	ldi	r31, 0x01	; 1
    22b6:	80 81       	ld	r24, Z
    22b8:	81 83       	std	Z+1, r24	; 0x01
			remote.button_press_backup = BUTTON_CLEAR;
    22ba:	10 82       	st	Z, r1
		}
	}
	
	DebugLog("\rremote_isr: %d, %.2X, ", vtstate, remote.button_short_press);
    22bc:	00 00       	nop
}

ISR(REMOTE_VT_ISR_VECT)
{
	handler_remote_button_press_isr();
}
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	bf 91       	pop	r27
    22c8:	af 91       	pop	r26
    22ca:	9f 91       	pop	r25
    22cc:	8f 91       	pop	r24
    22ce:	7f 91       	pop	r23
    22d0:	6f 91       	pop	r22
    22d2:	5f 91       	pop	r21
    22d4:	4f 91       	pop	r20
    22d6:	3f 91       	pop	r19
    22d8:	2f 91       	pop	r18
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	0f 90       	pop	r0
    22e0:	1f 90       	pop	r1
    22e2:	18 95       	reti

000022e4 <_Z20handler_display_initv>:
static void handler_display_test_pixel_by_row();
static void handler_display_test_pattern();
static void handler_display_test_numbers();

void handler_display_init()
{
    22e4:	0f 93       	push	r16
    22e6:	cf 93       	push	r28
	ttgame.left_team = &team_a;
    22e8:	ed e7       	ldi	r30, 0x7D	; 125
    22ea:	f1 e0       	ldi	r31, 0x01	; 1
    22ec:	8d e8       	ldi	r24, 0x8D	; 141
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	95 83       	std	Z+5, r25	; 0x05
    22f2:	84 83       	std	Z+4, r24	; 0x04
	ttgame.right_team = &team_b;
    22f4:	8b e8       	ldi	r24, 0x8B	; 139
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	97 83       	std	Z+7, r25	; 0x07
    22fa:	86 83       	std	Z+6, r24	; 0x06
	dmd.clearScreen(false);
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	8f e9       	ldi	r24, 0x9F	; 159
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
	DMD_SCAN_ISR__Init();	
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    230c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    2310:	8f e1       	ldi	r24, 0x1F	; 31
    2312:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    2316:	87 e0       	ldi	r24, 0x07	; 7
    2318:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    231c:	2f ef       	ldi	r18, 0xFF	; 255
    231e:	83 ed       	ldi	r24, 0xD3	; 211
    2320:	90 e3       	ldi	r25, 0x30	; 48
    2322:	21 50       	subi	r18, 0x01	; 1
    2324:	80 40       	sbci	r24, 0x00	; 0
    2326:	90 40       	sbci	r25, 0x00	; 0
    2328:	e1 f7       	brne	.-8      	; 0x2322 <_Z20handler_display_initv+0x3e>
    232a:	00 c0       	rjmp	.+0      	; 0x232c <_Z20handler_display_initv+0x48>
    232c:	00 00       	nop
	}
}

static void handler_display_test_pattern()
{
	dmd.drawTestPattern(PATTERN_STRIPE_0);
    232e:	62 e0       	ldi	r22, 0x02	; 2
    2330:	8f e9       	ldi	r24, 0x9F	; 159
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN3DMD15drawTestPatternEh>
    2338:	2f ef       	ldi	r18, 0xFF	; 255
    233a:	83 ed       	ldi	r24, 0xD3	; 211
    233c:	90 e3       	ldi	r25, 0x30	; 48
    233e:	21 50       	subi	r18, 0x01	; 1
    2340:	80 40       	sbci	r24, 0x00	; 0
    2342:	90 40       	sbci	r25, 0x00	; 0
    2344:	e1 f7       	brne	.-8      	; 0x233e <_Z20handler_display_initv+0x5a>
    2346:	00 c0       	rjmp	.+0      	; 0x2348 <_Z20handler_display_initv+0x64>
    2348:	00 00       	nop
	_delay_ms(1000);
	dmd.drawTestPattern(PATTERN_STRIPE_1);
    234a:	63 e0       	ldi	r22, 0x03	; 3
    234c:	8f e9       	ldi	r24, 0x9F	; 159
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN3DMD15drawTestPatternEh>
    2354:	2f ef       	ldi	r18, 0xFF	; 255
    2356:	83 ed       	ldi	r24, 0xD3	; 211
    2358:	90 e3       	ldi	r25, 0x30	; 48
    235a:	21 50       	subi	r18, 0x01	; 1
    235c:	80 40       	sbci	r24, 0x00	; 0
    235e:	90 40       	sbci	r25, 0x00	; 0
    2360:	e1 f7       	brne	.-8      	; 0x235a <_Z20handler_display_initv+0x76>
    2362:	00 c0       	rjmp	.+0      	; 0x2364 <_Z20handler_display_initv+0x80>
    2364:	00 00       	nop
	_delay_ms(1000);
	dmd.drawTestPattern(PATTERN_ALT_0);
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	8f e9       	ldi	r24, 0x9F	; 159
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN3DMD15drawTestPatternEh>
    2370:	2f ef       	ldi	r18, 0xFF	; 255
    2372:	83 ed       	ldi	r24, 0xD3	; 211
    2374:	90 e3       	ldi	r25, 0x30	; 48
    2376:	21 50       	subi	r18, 0x01	; 1
    2378:	80 40       	sbci	r24, 0x00	; 0
    237a:	90 40       	sbci	r25, 0x00	; 0
    237c:	e1 f7       	brne	.-8      	; 0x2376 <_Z20handler_display_initv+0x92>
    237e:	00 c0       	rjmp	.+0      	; 0x2380 <_Z20handler_display_initv+0x9c>
    2380:	00 00       	nop
	_delay_ms(1000);
	dmd.drawTestPattern(PATTERN_ALT_1);
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	8f e9       	ldi	r24, 0x9F	; 159
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN3DMD15drawTestPatternEh>
    238c:	2f ef       	ldi	r18, 0xFF	; 255
    238e:	83 ed       	ldi	r24, 0xD3	; 211
    2390:	90 e3       	ldi	r25, 0x30	; 48
    2392:	21 50       	subi	r18, 0x01	; 1
    2394:	80 40       	sbci	r24, 0x00	; 0
    2396:	90 40       	sbci	r25, 0x00	; 0
    2398:	e1 f7       	brne	.-8      	; 0x2392 <_Z20handler_display_initv+0xae>
    239a:	00 c0       	rjmp	.+0      	; 0x239c <_Z20handler_display_initv+0xb8>
    239c:	00 00       	nop
	_delay_ms(1000);
}

static void handler_display_test_numbers()
{
	dmd.clearScreen(true);
    239e:	61 e0       	ldi	r22, 0x01	; 1
    23a0:	8f e9       	ldi	r24, 0x9F	; 159
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
	dmd.selectFont(Arial_14);
    23a8:	68 eb       	ldi	r22, 0xB8	; 184
    23aa:	78 e0       	ldi	r23, 0x08	; 8
    23ac:	8f e9       	ldi	r24, 0x9F	; 159
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN3DMD10selectFontEPKh>
	for (char i = '0'; i < '9'; i++)
    23b4:	c0 e3       	ldi	r28, 0x30	; 48
	{
		dmd.drawChar(0, 0, i, GRAPHICS_NORMAL);
    23b6:	00 e0       	ldi	r16, 0x00	; 0
    23b8:	2c 2f       	mov	r18, r28
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	8f e9       	ldi	r24, 0x9F	; 159
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>

static void handler_display_test_numbers()
{
	dmd.clearScreen(true);
	dmd.selectFont(Arial_14);
	for (char i = '0'; i < '9'; i++)
    23ca:	cf 5f       	subi	r28, 0xFF	; 255
    23cc:	c9 33       	cpi	r28, 0x39	; 57
    23ce:	99 f7       	brne	.-26     	; 0x23b6 <_Z20handler_display_initv+0xd2>
	
	//handler_display_test_pixel_by_column();
	//handler_display_test_pixel_by_row()
	handler_display_test_pattern();
	handler_display_test_numbers();
	dmd.clearScreen(true);
    23d0:	61 e0       	ldi	r22, 0x01	; 1
    23d2:	8f e9       	ldi	r24, 0x9F	; 159
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
}
    23da:	cf 91       	pop	r28
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <_Z28handler_display_match_winnerv>:
	}
}

void handler_display_match_winner()
{
	if (ttgame.left_team->match_score == MATCH_DUOS_MIN_SCORE &&
    23e0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <ttgame+0x4>
    23e4:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <ttgame+0x5>
    23e8:	80 81       	ld	r24, Z
    23ea:	8a 30       	cpi	r24, 0x0A	; 10
    23ec:	61 f4       	brne	.+24     	; 0x2406 <_Z28handler_display_match_winnerv+0x26>
		ttgame.right_team->match_score == MATCH_DUOS_MIN_SCORE)
    23ee:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <ttgame+0x6>
    23f2:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <ttgame+0x7>
	}
}

void handler_display_match_winner()
{
	if (ttgame.left_team->match_score == MATCH_DUOS_MIN_SCORE &&
    23f6:	8c 91       	ld	r24, X
    23f8:	8a 30       	cpi	r24, 0x0A	; 10
    23fa:	09 f0       	breq	.+2      	; 0x23fe <_Z28handler_display_match_winnerv+0x1e>
    23fc:	73 c0       	rjmp	.+230    	; 0x24e4 <_Z28handler_display_match_winnerv+0x104>
		ttgame.right_team->match_score == MATCH_DUOS_MIN_SCORE)
	{
		ttgame.match_state = MATCH_DEUCE;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <ttgame+0x3>
    2404:	04 c0       	rjmp	.+8      	; 0x240e <_Z28handler_display_match_winnerv+0x2e>
	}

	if (ttgame.match_state == MATCH_DEUCE)
    2406:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <ttgame+0x3>
    240a:	91 30       	cpi	r25, 0x01	; 1
    240c:	d1 f5       	brne	.+116    	; 0x2482 <_Z28handler_display_match_winnerv+0xa2>
	{
		if (ttgame.left_team->match_score >= (ttgame.right_team->match_score + MATCH_WIN_DUOS_SCORE))
    240e:	20 81       	ld	r18, Z
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <ttgame+0x6>
    2416:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <ttgame+0x7>
    241a:	8c 91       	ld	r24, X
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 96       	adiw	r24, 0x02	; 2
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	44 f0       	brlt	.+16     	; 0x2436 <_Z28handler_display_match_winnerv+0x56>
		{
			ttgame.left_team->series_score++;
    2426:	81 81       	ldd	r24, Z+1	; 0x01
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	81 83       	std	Z+1, r24	; 0x01
			ttgame.match_winner_side = PLAYER_SIDE_LEFT;
    242c:	ed e7       	ldi	r30, 0x7D	; 125
    242e:	f1 e0       	ldi	r31, 0x01	; 1
    2430:	10 86       	std	Z+8, r1	; 0x08
			ttgame.match_state = MATCH_FINISHED;
    2432:	82 e0       	ldi	r24, 0x02	; 2
    2434:	83 83       	std	Z+3, r24	; 0x03
		}
		if (ttgame.right_team->match_score >= (ttgame.left_team->match_score + MATCH_WIN_DUOS_SCORE))
    2436:	ad e7       	ldi	r26, 0x7D	; 125
    2438:	b1 e0       	ldi	r27, 0x01	; 1
    243a:	16 96       	adiw	r26, 0x06	; 6
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	17 97       	sbiw	r26, 0x07	; 7
    2442:	20 81       	ld	r18, Z
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	14 96       	adiw	r26, 0x04	; 4
    2448:	0d 90       	ld	r0, X+
    244a:	bc 91       	ld	r27, X
    244c:	a0 2d       	mov	r26, r0
    244e:	8c 91       	ld	r24, X
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 96       	adiw	r24, 0x02	; 2
    2454:	28 17       	cp	r18, r24
    2456:	39 07       	cpc	r19, r25
    2458:	4c f0       	brlt	.+18     	; 0x246c <_Z28handler_display_match_winnerv+0x8c>
		{
			ttgame.right_team->series_score++;
    245a:	81 81       	ldd	r24, Z+1	; 0x01
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	81 83       	std	Z+1, r24	; 0x01
			ttgame.match_winner_side = PLAYER_SIDE_RIGHT;
    2460:	ed e7       	ldi	r30, 0x7D	; 125
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	80 87       	std	Z+8, r24	; 0x08
			ttgame.match_state = MATCH_FINISHED;
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	83 83       	std	Z+3, r24	; 0x03
		}
		
		// toggle service side
		if (ttgame.service_side == PLAYER_SIDE_LEFT)
    246c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <ttgame+0x2>
    2470:	81 11       	cpse	r24, r1
    2472:	04 c0       	rjmp	.+8      	; 0x247c <_Z28handler_display_match_winnerv+0x9c>
			ttgame.service_side = PLAYER_SIDE_RIGHT;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <ttgame+0x2>
    247a:	08 95       	ret
		else
			ttgame.service_side = PLAYER_SIDE_LEFT;
    247c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <ttgame+0x2>
    2480:	08 95       	ret
	}
	else // before DEUCE
	{
		if (ttgame.left_team->match_score >= MATCH_WIN_MIN_SCORE)
    2482:	8b 30       	cpi	r24, 0x0B	; 11
    2484:	40 f0       	brcs	.+16     	; 0x2496 <_Z28handler_display_match_winnerv+0xb6>
		{
			ttgame.left_team->series_score++;
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	81 83       	std	Z+1, r24	; 0x01
			ttgame.match_winner_side = PLAYER_SIDE_LEFT;
    248c:	ed e7       	ldi	r30, 0x7D	; 125
    248e:	f1 e0       	ldi	r31, 0x01	; 1
    2490:	10 86       	std	Z+8, r1	; 0x08
			ttgame.match_state = MATCH_FINISHED;
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	83 83       	std	Z+3, r24	; 0x03
		}
		if (ttgame.right_team->match_score >= MATCH_WIN_MIN_SCORE)
    2496:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <ttgame+0x6>
    249a:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <ttgame+0x7>
    249e:	80 81       	ld	r24, Z
    24a0:	8b 30       	cpi	r24, 0x0B	; 11
    24a2:	48 f0       	brcs	.+18     	; 0x24b6 <_Z28handler_display_match_winnerv+0xd6>
		{
			ttgame.right_team->series_score++;
    24a4:	81 81       	ldd	r24, Z+1	; 0x01
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	81 83       	std	Z+1, r24	; 0x01
			ttgame.match_winner_side = PLAYER_SIDE_RIGHT;
    24aa:	ed e7       	ldi	r30, 0x7D	; 125
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 87       	std	Z+8, r24	; 0x08
			ttgame.match_state = MATCH_FINISHED;
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	83 83       	std	Z+3, r24	; 0x03
		}
		
		// toggle service side
		if (((ttgame.left_team->match_score + ttgame.right_team->match_score) % 2) == 0)
    24b6:	ed e7       	ldi	r30, 0x7D	; 125
    24b8:	f1 e0       	ldi	r31, 0x01	; 1
    24ba:	a4 81       	ldd	r26, Z+4	; 0x04
    24bc:	b5 81       	ldd	r27, Z+5	; 0x05
    24be:	9c 91       	ld	r25, X
    24c0:	06 80       	ldd	r0, Z+6	; 0x06
    24c2:	f7 81       	ldd	r31, Z+7	; 0x07
    24c4:	e0 2d       	mov	r30, r0
    24c6:	80 81       	ld	r24, Z
    24c8:	89 0f       	add	r24, r25
    24ca:	80 fd       	sbrc	r24, 0
    24cc:	10 c0       	rjmp	.+32     	; 0x24ee <_Z28handler_display_match_winnerv+0x10e>
		{
			if (ttgame.service_side == PLAYER_SIDE_LEFT)
    24ce:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <ttgame+0x2>
    24d2:	81 11       	cpse	r24, r1
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <_Z28handler_display_match_winnerv+0xfe>
				ttgame.service_side = PLAYER_SIDE_RIGHT;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <ttgame+0x2>
    24dc:	08 95       	ret
			else
				ttgame.service_side = PLAYER_SIDE_LEFT;
    24de:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <ttgame+0x2>
		}
	}
}
    24e2:	08 95       	ret
		ttgame.right_team->match_score == MATCH_DUOS_MIN_SCORE)
	{
		ttgame.match_state = MATCH_DEUCE;
	}

	if (ttgame.match_state == MATCH_DEUCE)
    24e4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ttgame+0x3>
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	a9 f6       	brne	.-86     	; 0x2496 <_Z28handler_display_match_winnerv+0xb6>
    24ec:	90 cf       	rjmp	.-224    	; 0x240e <_Z28handler_display_match_winnerv+0x2e>
    24ee:	08 95       	ret

000024f0 <_Z23handler_display_managerv>:
		}
	}
}

void handler_display_manager()
{
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
	switch (ttgame.app_mode)
    24fc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <ttgame>
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	09 f4       	brne	.+2      	; 0x2506 <_Z23handler_display_managerv+0x16>
    2504:	67 c0       	rjmp	.+206    	; 0x25d4 <_Z23handler_display_managerv+0xe4>
    2506:	20 f0       	brcs	.+8      	; 0x2510 <_Z23handler_display_managerv+0x20>
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	09 f4       	brne	.+2      	; 0x250e <_Z23handler_display_managerv+0x1e>
    250c:	7d c1       	rjmp	.+762    	; 0x2808 <_Z23handler_display_managerv+0x318>
    250e:	15 c2       	rjmp	.+1066   	; 0x293a <_Z23handler_display_managerv+0x44a>
	{
		case APP_MODE_TITTLE:
			if (ttgame.display_state == DISPLAY_INIT)
    2510:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ttgame+0x1>
    2514:	81 11       	cpse	r24, r1
    2516:	2e c0       	rjmp	.+92     	; 0x2574 <_Z23handler_display_managerv+0x84>
			{
				dmd.clearScreen(true);
    2518:	61 e0       	ldi	r22, 0x01	; 1
    251a:	8f e9       	ldi	r24, 0x9F	; 159
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
				dmd.selectFont(Arial_Black_16);
    2522:	68 e6       	ldi	r22, 0x68	; 104
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	8f e9       	ldi	r24, 0x9F	; 159
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN3DMD10selectFontEPKh>
				dmd.drawMarquee(tittle_text, strlen(tittle_text), DMD_PIXELS_ACROSS - 1, 0);
    252e:	e0 e0       	ldi	r30, 0x00	; 0
    2530:	f1 e0       	ldi	r31, 0x01	; 1
    2532:	01 90       	ld	r0, Z+
    2534:	00 20       	and	r0, r0
    2536:	e9 f7       	brne	.-6      	; 0x2532 <_Z23handler_display_managerv+0x42>
    2538:	31 97       	sbiw	r30, 0x01	; 1
    253a:	af 01       	movw	r20, r30
    253c:	40 50       	subi	r20, 0x00	; 0
    253e:	51 40       	sbci	r21, 0x01	; 1
    2540:	00 e0       	ldi	r16, 0x00	; 0
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	2f e1       	ldi	r18, 0x1F	; 31
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	71 e0       	ldi	r23, 0x01	; 1
    254c:	8f e9       	ldi	r24, 0x9F	; 159
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN3DMD11drawMarqueeEPKchii>
				ttgame.digit_update_timer = TITTLE_SCROLL_TIME_MS + Millis;
    2554:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2558:	ed e7       	ldi	r30, 0x7D	; 125
    255a:	f1 e0       	ldi	r31, 0x01	; 1
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	4e 96       	adiw	r24, 0x1e	; 30
    2562:	a1 1d       	adc	r26, r1
    2564:	b1 1d       	adc	r27, r1
    2566:	82 87       	std	Z+10, r24	; 0x0a
    2568:	93 87       	std	Z+11, r25	; 0x0b
    256a:	a4 87       	std	Z+12, r26	; 0x0c
    256c:	b5 87       	std	Z+13, r27	; 0x0d
				ttgame.display_state = DISPLAY_UPDATE;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	81 83       	std	Z+1, r24	; 0x01
    2572:	e3 c1       	rjmp	.+966    	; 0x293a <_Z23handler_display_managerv+0x44a>
			}
			else if (ttgame.display_state == DISPLAY_UPDATE)
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	09 f0       	breq	.+2      	; 0x257a <_Z23handler_display_managerv+0x8a>
    2578:	e0 c1       	rjmp	.+960    	; 0x293a <_Z23handler_display_managerv+0x44a>
			{
				if (Millis > ttgame.digit_update_timer)
    257a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    257e:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <ttgame+0xa>
    2582:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <ttgame+0xb>
    2586:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <ttgame+0xc>
    258a:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <ttgame+0xd>
    258e:	06 17       	cp	r16, r22
    2590:	17 07       	cpc	r17, r23
    2592:	28 07       	cpc	r18, r24
    2594:	39 07       	cpc	r19, r25
    2596:	08 f0       	brcs	.+2      	; 0x259a <_Z23handler_display_managerv+0xaa>
    2598:	d0 c1       	rjmp	.+928    	; 0x293a <_Z23handler_display_managerv+0x44a>
				{
					if (dmd.stepMarquee(-1, 0))
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	6f ef       	ldi	r22, 0xFF	; 255
    25a0:	7f ef       	ldi	r23, 0xFF	; 255
    25a2:	8f e9       	ldi	r24, 0x9F	; 159
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_ZN3DMD11stepMarqueeEii>
    25aa:	88 23       	and	r24, r24
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <_Z23handler_display_managerv+0xc4>
					ttgame.display_state = DISPLAY_INIT;
    25ae:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <ttgame+0x1>
    25b2:	c3 c1       	rjmp	.+902    	; 0x293a <_Z23handler_display_managerv+0x44a>
					else
					ttgame.digit_update_timer = TITTLE_SCROLL_TIME_MS + Millis;
    25b4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	4e 96       	adiw	r24, 0x1e	; 30
    25be:	a1 1d       	adc	r26, r1
    25c0:	b1 1d       	adc	r27, r1
    25c2:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ttgame+0xa>
    25c6:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <ttgame+0xb>
    25ca:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <ttgame+0xc>
    25ce:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <ttgame+0xd>
    25d2:	b3 c1       	rjmp	.+870    	; 0x293a <_Z23handler_display_managerv+0x44a>
				}
			}
			break;

		case APP_MODE_MATCH:
			if (ttgame.display_state == DISPLAY_INIT)
    25d4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ttgame+0x1>
    25d8:	81 11       	cpse	r24, r1
    25da:	21 c0       	rjmp	.+66     	; 0x261e <_Z23handler_display_managerv+0x12e>
			{
				dmd.clearScreen(true);
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	8f e9       	ldi	r24, 0x9F	; 159
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
				dmd.selectFont(System5x7);
    25e6:	62 ed       	ldi	r22, 0xD2	; 210
    25e8:	76 e0       	ldi	r23, 0x06	; 6
    25ea:	8f e9       	ldi	r24, 0x9F	; 159
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN3DMD10selectFontEPKh>
				dmd.drawLine((DMD_PIXELS_ACROSS / 2) - 1, 0, (DMD_PIXELS_ACROSS / 2) - 1, DMD_PIXELS_DOWN - 1, GRAPHICS_NORMAL);
    25f2:	e1 2c       	mov	r14, r1
    25f4:	0f e0       	ldi	r16, 0x0F	; 15
    25f6:	10 e0       	ldi	r17, 0x00	; 0
    25f8:	2f e0       	ldi	r18, 0x0F	; 15
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	50 e0       	ldi	r21, 0x00	; 0
    2600:	6f e0       	ldi	r22, 0x0F	; 15
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	8f e9       	ldi	r24, 0x9F	; 159
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN3DMD8drawLineEiiiih>
				ttgame.digit_update_timer = 0;
    260c:	ed e7       	ldi	r30, 0x7D	; 125
    260e:	f1 e0       	ldi	r31, 0x01	; 1
    2610:	12 86       	std	Z+10, r1	; 0x0a
    2612:	13 86       	std	Z+11, r1	; 0x0b
    2614:	14 86       	std	Z+12, r1	; 0x0c
    2616:	15 86       	std	Z+13, r1	; 0x0d
				ttgame.display_state = DISPLAY_UPDATE;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	81 83       	std	Z+1, r24	; 0x01
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <_Z23handler_display_managerv+0x134>
			}
			if (ttgame.display_state == DISPLAY_UPDATE)
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	09 f0       	breq	.+2      	; 0x2624 <_Z23handler_display_managerv+0x134>
    2622:	8b c1       	rjmp	.+790    	; 0x293a <_Z23handler_display_managerv+0x44a>
			{
				if (Millis > ttgame.digit_update_timer)
    2624:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2628:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <ttgame+0xa>
    262c:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <ttgame+0xb>
    2630:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <ttgame+0xc>
    2634:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <ttgame+0xd>
    2638:	06 17       	cp	r16, r22
    263a:	17 07       	cpc	r17, r23
    263c:	28 07       	cpc	r18, r24
    263e:	39 07       	cpc	r19, r25
    2640:	08 f0       	brcs	.+2      	; 0x2644 <_Z23handler_display_managerv+0x154>
    2642:	7b c1       	rjmp	.+758    	; 0x293a <_Z23handler_display_managerv+0x44a>
				{
					bool need_to_update_score = true;
					
					//flash the winner score
					if (ttgame.match_state == MATCH_FINISHED)
    2644:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ttgame+0x3>
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	b9 f5       	brne	.+110    	; 0x26ba <_Z23handler_display_managerv+0x1ca>
					{
						ttgame.flash_winner_state = !ttgame.flash_winner_state;
    264c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <ttgame+0x9>
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	81 11       	cpse	r24, r1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <ttgame+0x9>
						if (ttgame.flash_winner_state && ttgame.match_winner_side == PLAYER_SIDE_LEFT)
    265a:	81 11       	cpse	r24, r1
    265c:	2e c0       	rjmp	.+92     	; 0x26ba <_Z23handler_display_managerv+0x1ca>
    265e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <ttgame+0x8>
    2662:	81 11       	cpse	r24, r1
    2664:	14 c0       	rjmp	.+40     	; 0x268e <_Z23handler_display_managerv+0x19e>
						{
							dmd.drawChar(1, 9, ' ', GRAPHICS_NORMAL);
    2666:	00 e0       	ldi	r16, 0x00	; 0
    2668:	20 e2       	ldi	r18, 0x20	; 32
    266a:	49 e0       	ldi	r20, 0x09	; 9
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	61 e0       	ldi	r22, 0x01	; 1
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	8f e9       	ldi	r24, 0x9F	; 159
    2674:	91 e0       	ldi	r25, 0x01	; 1
    2676:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
							dmd.drawChar(7, 9, ' ', GRAPHICS_NORMAL);
    267a:	20 e2       	ldi	r18, 0x20	; 32
    267c:	49 e0       	ldi	r20, 0x09	; 9
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	67 e0       	ldi	r22, 0x07	; 7
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	8f e9       	ldi	r24, 0x9F	; 159
    2686:	91 e0       	ldi	r25, 0x01	; 1
    2688:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
							need_to_update_score = false;
    268c:	73 c0       	rjmp	.+230    	; 0x2774 <_Z23handler_display_managerv+0x284>
						}
						else if (ttgame.flash_winner_state && ttgame.match_winner_side == PLAYER_SIDE_RIGHT)
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	a1 f4       	brne	.+40     	; 0x26ba <_Z23handler_display_managerv+0x1ca>
						{
							dmd.drawChar(19, 9, ' ', GRAPHICS_NORMAL);
    2692:	00 e0       	ldi	r16, 0x00	; 0
    2694:	20 e2       	ldi	r18, 0x20	; 32
    2696:	49 e0       	ldi	r20, 0x09	; 9
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	63 e1       	ldi	r22, 0x13	; 19
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	8f e9       	ldi	r24, 0x9F	; 159
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
							dmd.drawChar(25, 9, ' ', GRAPHICS_NORMAL);
    26a6:	20 e2       	ldi	r18, 0x20	; 32
    26a8:	49 e0       	ldi	r20, 0x09	; 9
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	69 e1       	ldi	r22, 0x19	; 25
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	8f e9       	ldi	r24, 0x9F	; 159
    26b2:	91 e0       	ldi	r25, 0x01	; 1
    26b4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
    26b8:	5d c0       	rjmp	.+186    	; 0x2774 <_Z23handler_display_managerv+0x284>
					{
						sprintf(digit_buffer, "%02u|%02u,%02u|%02u",
							ttgame.left_team->series_score,
							ttgame.right_team->series_score,
							ttgame.left_team->match_score,
							ttgame.right_team->match_score
    26ba:	ed e7       	ldi	r30, 0x7D	; 125
    26bc:	f1 e0       	ldi	r31, 0x01	; 1
    26be:	a6 81       	ldd	r26, Z+6	; 0x06
    26c0:	b7 81       	ldd	r27, Z+7	; 0x07
					if (need_to_update_score)
					{
						sprintf(digit_buffer, "%02u|%02u,%02u|%02u",
							ttgame.left_team->series_score,
							ttgame.right_team->series_score,
							ttgame.left_team->match_score,
    26c2:	04 80       	ldd	r0, Z+4	; 0x04
    26c4:	f5 81       	ldd	r31, Z+5	; 0x05
    26c6:	e0 2d       	mov	r30, r0
							ttgame.right_team->match_score
						);
    26c8:	8c 91       	ld	r24, X
    26ca:	1f 92       	push	r1
    26cc:	8f 93       	push	r24
    26ce:	80 81       	ld	r24, Z
    26d0:	1f 92       	push	r1
    26d2:	8f 93       	push	r24
    26d4:	11 96       	adiw	r26, 0x01	; 1
    26d6:	8c 91       	ld	r24, X
    26d8:	1f 92       	push	r1
    26da:	8f 93       	push	r24
    26dc:	81 81       	ldd	r24, Z+1	; 0x01
    26de:	1f 92       	push	r1
    26e0:	8f 93       	push	r24
    26e2:	8d e3       	ldi	r24, 0x3D	; 61
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	9f 93       	push	r25
    26e8:	8f 93       	push	r24
    26ea:	cf e8       	ldi	r28, 0x8F	; 143
    26ec:	d1 e0       	ldi	r29, 0x01	; 1
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <sprintf>
						dmd.drawChar(4, 0, digit_buffer[1], GRAPHICS_NORMAL);
    26f6:	00 e0       	ldi	r16, 0x00	; 0
    26f8:	29 81       	ldd	r18, Y+1	; 0x01
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	64 e0       	ldi	r22, 0x04	; 4
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	8f e9       	ldi	r24, 0x9F	; 159
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
						dmd.drawChar(22, 0, digit_buffer[4], GRAPHICS_NORMAL);
    270a:	2c 81       	ldd	r18, Y+4	; 0x04
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	50 e0       	ldi	r21, 0x00	; 0
    2710:	66 e1       	ldi	r22, 0x16	; 22
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	8f e9       	ldi	r24, 0x9F	; 159
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
						dmd.drawChar(1, 9, digit_buffer[6], GRAPHICS_NORMAL);
    271c:	2e 81       	ldd	r18, Y+6	; 0x06
    271e:	49 e0       	ldi	r20, 0x09	; 9
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	8f e9       	ldi	r24, 0x9F	; 159
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
						dmd.drawChar(7, 9, digit_buffer[7], GRAPHICS_NORMAL);
    272e:	2f 81       	ldd	r18, Y+7	; 0x07
    2730:	49 e0       	ldi	r20, 0x09	; 9
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	67 e0       	ldi	r22, 0x07	; 7
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	8f e9       	ldi	r24, 0x9F	; 159
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
						dmd.drawChar(19, 9, digit_buffer[9], GRAPHICS_NORMAL);
    2740:	29 85       	ldd	r18, Y+9	; 0x09
    2742:	49 e0       	ldi	r20, 0x09	; 9
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	63 e1       	ldi	r22, 0x13	; 19
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	8f e9       	ldi	r24, 0x9F	; 159
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
						dmd.drawChar(25, 9, digit_buffer[10], GRAPHICS_NORMAL);
    2752:	2a 85       	ldd	r18, Y+10	; 0x0a
    2754:	49 e0       	ldi	r20, 0x09	; 9
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	69 e1       	ldi	r22, 0x19	; 25
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	8f e9       	ldi	r24, 0x9F	; 159
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
    2764:	8d b7       	in	r24, 0x3d	; 61
    2766:	9e b7       	in	r25, 0x3e	; 62
    2768:	0c 96       	adiw	r24, 0x0c	; 12
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	9e bf       	out	0x3e, r25	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	8d bf       	out	0x3d, r24	; 61
					}
					
					//service side icon display
					if (ttgame.service_side == PLAYER_SIDE_LEFT)
    2774:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <ttgame+0x2>
    2778:	81 11       	cpse	r24, r1
    277a:	1b c0       	rjmp	.+54     	; 0x27b2 <_Z23handler_display_managerv+0x2c2>
					{
						dmd.drawFilledBox(DMD_PIXELS_ACROSS - 2, 0, DMD_PIXELS_ACROSS - 1, 1, GRAPHICS_NOR);
    277c:	68 94       	set
    277e:	ee 24       	eor	r14, r14
    2780:	e2 f8       	bld	r14, 2
    2782:	01 e0       	ldi	r16, 0x01	; 1
    2784:	10 e0       	ldi	r17, 0x00	; 0
    2786:	2f e1       	ldi	r18, 0x1F	; 31
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	6e e1       	ldi	r22, 0x1E	; 30
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	8f e9       	ldi	r24, 0x9F	; 159
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
						dmd.drawFilledBox(0, 0, 1, 1, GRAPHICS_NORMAL);
    279a:	e1 2c       	mov	r14, r1
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	8f e9       	ldi	r24, 0x9F	; 159
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
    27b0:	1a c0       	rjmp	.+52     	; 0x27e6 <_Z23handler_display_managerv+0x2f6>
					}
					else
					{
						dmd.drawFilledBox(0, 0, 1, 1, GRAPHICS_NOR);
    27b2:	68 94       	set
    27b4:	ee 24       	eor	r14, r14
    27b6:	e2 f8       	bld	r14, 2
    27b8:	01 e0       	ldi	r16, 0x01	; 1
    27ba:	10 e0       	ldi	r17, 0x00	; 0
    27bc:	21 e0       	ldi	r18, 0x01	; 1
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	8f e9       	ldi	r24, 0x9F	; 159
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
						dmd.drawFilledBox(DMD_PIXELS_ACROSS - 2, 0, DMD_PIXELS_ACROSS - 1, 1, GRAPHICS_NORMAL);						
    27d0:	e1 2c       	mov	r14, r1
    27d2:	2f e1       	ldi	r18, 0x1F	; 31
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	6e e1       	ldi	r22, 0x1E	; 30
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	8f e9       	ldi	r24, 0x9F	; 159
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <_ZN3DMD13drawFilledBoxEiiiih>
					}
					ttgame.digit_update_timer = SCORE_UPDATE_TIME_MS + Millis;
    27e6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	88 53       	subi	r24, 0x38	; 56
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	af 4f       	sbci	r26, 0xFF	; 255
    27f4:	bf 4f       	sbci	r27, 0xFF	; 255
    27f6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ttgame+0xa>
    27fa:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <ttgame+0xb>
    27fe:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <ttgame+0xc>
    2802:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <ttgame+0xd>
    2806:	99 c0       	rjmp	.+306    	; 0x293a <_Z23handler_display_managerv+0x44a>
				}
			}
			break;
		
		case APP_MODE_TIMER:
			if (ttgame.display_state == DISPLAY_INIT)
    2808:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ttgame+0x1>
    280c:	81 11       	cpse	r24, r1
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <_Z23handler_display_managerv+0x348>
			{
				dmd.clearScreen(true);
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	8f e9       	ldi	r24, 0x9F	; 159
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_ZN3DMD11clearScreenEh>
				dmd.selectFont(Arial_14);
    281a:	68 eb       	ldi	r22, 0xB8	; 184
    281c:	78 e0       	ldi	r23, 0x08	; 8
    281e:	8f e9       	ldi	r24, 0x9F	; 159
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN3DMD10selectFontEPKh>
				ttgame.digit_update_timer = 0;
    2826:	ed e7       	ldi	r30, 0x7D	; 125
    2828:	f1 e0       	ldi	r31, 0x01	; 1
    282a:	12 86       	std	Z+10, r1	; 0x0a
    282c:	13 86       	std	Z+11, r1	; 0x0b
    282e:	14 86       	std	Z+12, r1	; 0x0c
    2830:	15 86       	std	Z+13, r1	; 0x0d
				ttgame.display_state = DISPLAY_UPDATE;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	81 83       	std	Z+1, r24	; 0x01
    2836:	03 c0       	rjmp	.+6      	; 0x283e <_Z23handler_display_managerv+0x34e>
			}
			if (ttgame.display_state == DISPLAY_UPDATE)
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	09 f0       	breq	.+2      	; 0x283e <_Z23handler_display_managerv+0x34e>
    283c:	7e c0       	rjmp	.+252    	; 0x293a <_Z23handler_display_managerv+0x44a>
			{
				if (Millis > ttgame.digit_update_timer)
    283e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    2842:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <ttgame+0xa>
    2846:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <ttgame+0xb>
    284a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <ttgame+0xc>
    284e:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <ttgame+0xd>
    2852:	06 17       	cp	r16, r22
    2854:	17 07       	cpc	r17, r23
    2856:	28 07       	cpc	r18, r24
    2858:	39 07       	cpc	r19, r25
    285a:	08 f0       	brcs	.+2      	; 0x285e <_Z23handler_display_managerv+0x36e>
    285c:	6e c0       	rjmp	.+220    	; 0x293a <_Z23handler_display_managerv+0x44a>
				{
					sprintf(digit_buffer, "%02u:%02u", softrtc.minute, softrtc.second);
    285e:	0f 2e       	mov	r0, r31
    2860:	f6 e7       	ldi	r31, 0x76	; 118
    2862:	ef 2e       	mov	r14, r31
    2864:	f1 e0       	ldi	r31, 0x01	; 1
    2866:	ff 2e       	mov	r15, r31
    2868:	f0 2d       	mov	r31, r0
    286a:	f7 01       	movw	r30, r14
    286c:	90 81       	ld	r25, Z
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	1f 92       	push	r1
    2872:	9f 93       	push	r25
    2874:	1f 92       	push	r1
    2876:	8f 93       	push	r24
    2878:	81 e5       	ldi	r24, 0x51	; 81
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	9f 93       	push	r25
    287e:	8f 93       	push	r24
    2880:	cf e8       	ldi	r28, 0x8F	; 143
    2882:	d1 e0       	ldi	r29, 0x01	; 1
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	0e 94 14 15 	call	0x2a28	; 0x2a28 <sprintf>
					dmd.drawChar(1, 2, digit_buffer[0], GRAPHICS_NORMAL);
    288c:	00 e0       	ldi	r16, 0x00	; 0
    288e:	28 81       	ld	r18, Y
    2890:	42 e0       	ldi	r20, 0x02	; 2
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	61 e0       	ldi	r22, 0x01	; 1
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	8f e9       	ldi	r24, 0x9F	; 159
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
					dmd.drawChar(8, 2, digit_buffer[1], GRAPHICS_NORMAL);
    28a0:	29 81       	ldd	r18, Y+1	; 0x01
    28a2:	42 e0       	ldi	r20, 0x02	; 2
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	68 e0       	ldi	r22, 0x08	; 8
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	8f e9       	ldi	r24, 0x9F	; 159
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
					dmd.drawChar(17, 2, digit_buffer[3], GRAPHICS_NORMAL);
    28b2:	2b 81       	ldd	r18, Y+3	; 0x03
    28b4:	42 e0       	ldi	r20, 0x02	; 2
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	61 e1       	ldi	r22, 0x11	; 17
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	8f e9       	ldi	r24, 0x9F	; 159
    28be:	91 e0       	ldi	r25, 0x01	; 1
    28c0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
					dmd.drawChar(24, 2, digit_buffer[4], GRAPHICS_NORMAL);
    28c4:	2c 81       	ldd	r18, Y+4	; 0x04
    28c6:	42 e0       	ldi	r20, 0x02	; 2
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	68 e1       	ldi	r22, 0x18	; 24
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	8f e9       	ldi	r24, 0x9F	; 159
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
					if (softrtc.colon_on)
    28d6:	f7 01       	movw	r30, r14
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	2d b7       	in	r18, 0x3d	; 61
    28dc:	3e b7       	in	r19, 0x3e	; 62
    28de:	28 5f       	subi	r18, 0xF8	; 248
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	3e bf       	out	0x3e, r19	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	2d bf       	out	0x3d, r18	; 61
    28ec:	88 23       	and	r24, r24
    28ee:	59 f0       	breq	.+22     	; 0x2906 <_Z23handler_display_managerv+0x416>
						dmd.drawChar(15, 1, ':', GRAPHICS_OR);
    28f0:	03 e0       	ldi	r16, 0x03	; 3
    28f2:	2a e3       	ldi	r18, 0x3A	; 58
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	6f e0       	ldi	r22, 0x0F	; 15
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	8f e9       	ldi	r24, 0x9F	; 159
    28fe:	91 e0       	ldi	r25, 0x01	; 1
    2900:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
    2904:	0a c0       	rjmp	.+20     	; 0x291a <_Z23handler_display_managerv+0x42a>
					else
						dmd.drawChar(15, 1, ':', GRAPHICS_NOR);
    2906:	04 e0       	ldi	r16, 0x04	; 4
    2908:	2a e3       	ldi	r18, 0x3A	; 58
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	6f e0       	ldi	r22, 0x0F	; 15
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	8f e9       	ldi	r24, 0x9F	; 159
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN3DMD8drawCharEiihh>
					ttgame.digit_update_timer = CLOCK_UPDATE_TIME_MS + Millis;
    291a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z6millisv>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	8c 50       	subi	r24, 0x0C	; 12
    2924:	9e 4f       	sbci	r25, 0xFE	; 254
    2926:	af 4f       	sbci	r26, 0xFF	; 255
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ttgame+0xa>
    292e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <ttgame+0xb>
    2932:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <ttgame+0xc>
    2936:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <ttgame+0xd>
				}
			}
			break;
	}
}
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	08 95       	ret

00002948 <__vector_7>:

ISR(DMD_SCAN_ISR_VECT)
{
    2948:	1f 92       	push	r1
    294a:	0f 92       	push	r0
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	0f 92       	push	r0
    2950:	11 24       	eor	r1, r1
    2952:	2f 93       	push	r18
    2954:	3f 93       	push	r19
    2956:	4f 93       	push	r20
    2958:	5f 93       	push	r21
    295a:	6f 93       	push	r22
    295c:	7f 93       	push	r23
    295e:	8f 93       	push	r24
    2960:	9f 93       	push	r25
    2962:	af 93       	push	r26
    2964:	bf 93       	push	r27
    2966:	ef 93       	push	r30
    2968:	ff 93       	push	r31
	dmd.clearScreen(true);
}

static void handler_display_scan_isr()
{
	dmd.scanDisplayBySPI();
    296a:	8f e9       	ldi	r24, 0x9F	; 159
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN3DMD16scanDisplayBySPIEv>
}

ISR(DMD_SCAN_ISR_VECT)
{
	handler_display_scan_isr();
    2972:	ff 91       	pop	r31
    2974:	ef 91       	pop	r30
    2976:	bf 91       	pop	r27
    2978:	af 91       	pop	r26
    297a:	9f 91       	pop	r25
    297c:	8f 91       	pop	r24
    297e:	7f 91       	pop	r23
    2980:	6f 91       	pop	r22
    2982:	5f 91       	pop	r21
    2984:	4f 91       	pop	r20
    2986:	3f 91       	pop	r19
    2988:	2f 91       	pop	r18
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <_GLOBAL__sub_I_dmd_buffer>:
#include "Typedefs.h"
#include "Handler_Button.h"
#include "Handler_Display.h"

uint8_t dmd_buffer[DMD_RAM_SIZE_BYTES];
DMD dmd(1, 1, dmd_buffer);
    2994:	26 eb       	ldi	r18, 0xB6	; 182
    2996:	32 e0       	ldi	r19, 0x02	; 2
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	8f e9       	ldi	r24, 0x9F	; 159
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN3DMDC1EhhPh>
    29a4:	08 95       	ret

000029a6 <main>:
#include "Handler_Button.h"
#include "Handler_Display.h"

int main(void)
{
    DriverIO_Init();
    29a6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <_Z13DriverIO_Initv>
    DebugLog(tittle_text);	
    29aa:	00 00       	nop
    handler_display_init();
    29ac:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_Z20handler_display_initv>
    handler_button_init();
    29b0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_Z19handler_button_initv>
	
    while (1) 
    {
  		handler_button_mannager();
    29b4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <_Z23handler_button_mannagerv>
  		handler_display_manager();
    29b8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_Z23handler_display_managerv>
    29bc:	fb cf       	rjmp	.-10     	; 0x29b4 <main+0xe>

000029be <__udivmodhi4>:
    29be:	aa 1b       	sub	r26, r26
    29c0:	bb 1b       	sub	r27, r27
    29c2:	51 e1       	ldi	r21, 0x11	; 17
    29c4:	07 c0       	rjmp	.+14     	; 0x29d4 <__udivmodhi4_ep>

000029c6 <__udivmodhi4_loop>:
    29c6:	aa 1f       	adc	r26, r26
    29c8:	bb 1f       	adc	r27, r27
    29ca:	a6 17       	cp	r26, r22
    29cc:	b7 07       	cpc	r27, r23
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <__udivmodhi4_ep>
    29d0:	a6 1b       	sub	r26, r22
    29d2:	b7 0b       	sbc	r27, r23

000029d4 <__udivmodhi4_ep>:
    29d4:	88 1f       	adc	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	5a 95       	dec	r21
    29da:	a9 f7       	brne	.-22     	; 0x29c6 <__udivmodhi4_loop>
    29dc:	80 95       	com	r24
    29de:	90 95       	com	r25
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	08 95       	ret

000029e6 <__divmodhi4>:
    29e6:	97 fb       	bst	r25, 7
    29e8:	07 2e       	mov	r0, r23
    29ea:	16 f4       	brtc	.+4      	; 0x29f0 <__divmodhi4+0xa>
    29ec:	00 94       	com	r0
    29ee:	07 d0       	rcall	.+14     	; 0x29fe <__divmodhi4_neg1>
    29f0:	77 fd       	sbrc	r23, 7
    29f2:	09 d0       	rcall	.+18     	; 0x2a06 <__divmodhi4_neg2>
    29f4:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodhi4>
    29f8:	07 fc       	sbrc	r0, 7
    29fa:	05 d0       	rcall	.+10     	; 0x2a06 <__divmodhi4_neg2>
    29fc:	3e f4       	brtc	.+14     	; 0x2a0c <__divmodhi4_exit>

000029fe <__divmodhi4_neg1>:
    29fe:	90 95       	com	r25
    2a00:	81 95       	neg	r24
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	08 95       	ret

00002a06 <__divmodhi4_neg2>:
    2a06:	70 95       	com	r23
    2a08:	61 95       	neg	r22
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00002a0c <__divmodhi4_exit>:
    2a0c:	08 95       	ret

00002a0e <__tablejump2__>:
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	05 90       	lpm	r0, Z+
    2a14:	f4 91       	lpm	r31, Z
    2a16:	e0 2d       	mov	r30, r0
    2a18:	09 94       	ijmp

00002a1a <memset>:
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <memset+0x6>
    2a1e:	6d 93       	st	X+, r22
    2a20:	41 50       	subi	r20, 0x01	; 1
    2a22:	50 40       	sbci	r21, 0x00	; 0
    2a24:	e0 f7       	brcc	.-8      	; 0x2a1e <memset+0x4>
    2a26:	08 95       	ret

00002a28 <sprintf>:
    2a28:	ae e0       	ldi	r26, 0x0E	; 14
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ea e1       	ldi	r30, 0x1A	; 26
    2a2e:	f5 e1       	ldi	r31, 0x15	; 21
    2a30:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__prologue_saves__+0x1c>
    2a34:	0d 89       	ldd	r16, Y+21	; 0x15
    2a36:	1e 89       	ldd	r17, Y+22	; 0x16
    2a38:	86 e0       	ldi	r24, 0x06	; 6
    2a3a:	8c 83       	std	Y+4, r24	; 0x04
    2a3c:	1a 83       	std	Y+2, r17	; 0x02
    2a3e:	09 83       	std	Y+1, r16	; 0x01
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	9f e7       	ldi	r25, 0x7F	; 127
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	ae 01       	movw	r20, r28
    2a4a:	47 5e       	subi	r20, 0xE7	; 231
    2a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4e:	6f 89       	ldd	r22, Y+23	; 0x17
    2a50:	78 8d       	ldd	r23, Y+24	; 0x18
    2a52:	ce 01       	movw	r24, r28
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <vfprintf>
    2a5a:	ef 81       	ldd	r30, Y+7	; 0x07
    2a5c:	f8 85       	ldd	r31, Y+8	; 0x08
    2a5e:	e0 0f       	add	r30, r16
    2a60:	f1 1f       	adc	r31, r17
    2a62:	10 82       	st	Z, r1
    2a64:	2e 96       	adiw	r28, 0x0e	; 14
    2a66:	e4 e0       	ldi	r30, 0x04	; 4
    2a68:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__epilogue_restores__+0x1c>

00002a6c <vfprintf>:
    2a6c:	ab e0       	ldi	r26, 0x0B	; 11
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	ec e3       	ldi	r30, 0x3C	; 60
    2a72:	f5 e1       	ldi	r31, 0x15	; 21
    2a74:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__>
    2a78:	6c 01       	movw	r12, r24
    2a7a:	7b 01       	movw	r14, r22
    2a7c:	8a 01       	movw	r16, r20
    2a7e:	fc 01       	movw	r30, r24
    2a80:	17 82       	std	Z+7, r1	; 0x07
    2a82:	16 82       	std	Z+6, r1	; 0x06
    2a84:	83 81       	ldd	r24, Z+3	; 0x03
    2a86:	81 ff       	sbrs	r24, 1
    2a88:	cc c1       	rjmp	.+920    	; 0x2e22 <vfprintf+0x3b6>
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	3c 01       	movw	r6, r24
    2a90:	f6 01       	movw	r30, r12
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	f7 01       	movw	r30, r14
    2a96:	93 fd       	sbrc	r25, 3
    2a98:	85 91       	lpm	r24, Z+
    2a9a:	93 ff       	sbrs	r25, 3
    2a9c:	81 91       	ld	r24, Z+
    2a9e:	7f 01       	movw	r14, r30
    2aa0:	88 23       	and	r24, r24
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <vfprintf+0x3a>
    2aa4:	ba c1       	rjmp	.+884    	; 0x2e1a <vfprintf+0x3ae>
    2aa6:	85 32       	cpi	r24, 0x25	; 37
    2aa8:	39 f4       	brne	.+14     	; 0x2ab8 <vfprintf+0x4c>
    2aaa:	93 fd       	sbrc	r25, 3
    2aac:	85 91       	lpm	r24, Z+
    2aae:	93 ff       	sbrs	r25, 3
    2ab0:	81 91       	ld	r24, Z+
    2ab2:	7f 01       	movw	r14, r30
    2ab4:	85 32       	cpi	r24, 0x25	; 37
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <vfprintf+0x56>
    2ab8:	b6 01       	movw	r22, r12
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2ac0:	e7 cf       	rjmp	.-50     	; 0x2a90 <vfprintf+0x24>
    2ac2:	91 2c       	mov	r9, r1
    2ac4:	21 2c       	mov	r2, r1
    2ac6:	31 2c       	mov	r3, r1
    2ac8:	ff e1       	ldi	r31, 0x1F	; 31
    2aca:	f3 15       	cp	r31, r3
    2acc:	d8 f0       	brcs	.+54     	; 0x2b04 <vfprintf+0x98>
    2ace:	8b 32       	cpi	r24, 0x2B	; 43
    2ad0:	79 f0       	breq	.+30     	; 0x2af0 <vfprintf+0x84>
    2ad2:	38 f4       	brcc	.+14     	; 0x2ae2 <vfprintf+0x76>
    2ad4:	80 32       	cpi	r24, 0x20	; 32
    2ad6:	79 f0       	breq	.+30     	; 0x2af6 <vfprintf+0x8a>
    2ad8:	83 32       	cpi	r24, 0x23	; 35
    2ada:	a1 f4       	brne	.+40     	; 0x2b04 <vfprintf+0x98>
    2adc:	23 2d       	mov	r18, r3
    2ade:	20 61       	ori	r18, 0x10	; 16
    2ae0:	1d c0       	rjmp	.+58     	; 0x2b1c <vfprintf+0xb0>
    2ae2:	8d 32       	cpi	r24, 0x2D	; 45
    2ae4:	61 f0       	breq	.+24     	; 0x2afe <vfprintf+0x92>
    2ae6:	80 33       	cpi	r24, 0x30	; 48
    2ae8:	69 f4       	brne	.+26     	; 0x2b04 <vfprintf+0x98>
    2aea:	23 2d       	mov	r18, r3
    2aec:	21 60       	ori	r18, 0x01	; 1
    2aee:	16 c0       	rjmp	.+44     	; 0x2b1c <vfprintf+0xb0>
    2af0:	83 2d       	mov	r24, r3
    2af2:	82 60       	ori	r24, 0x02	; 2
    2af4:	38 2e       	mov	r3, r24
    2af6:	e3 2d       	mov	r30, r3
    2af8:	e4 60       	ori	r30, 0x04	; 4
    2afa:	3e 2e       	mov	r3, r30
    2afc:	2a c0       	rjmp	.+84     	; 0x2b52 <vfprintf+0xe6>
    2afe:	f3 2d       	mov	r31, r3
    2b00:	f8 60       	ori	r31, 0x08	; 8
    2b02:	1d c0       	rjmp	.+58     	; 0x2b3e <vfprintf+0xd2>
    2b04:	37 fc       	sbrc	r3, 7
    2b06:	2d c0       	rjmp	.+90     	; 0x2b62 <vfprintf+0xf6>
    2b08:	20 ed       	ldi	r18, 0xD0	; 208
    2b0a:	28 0f       	add	r18, r24
    2b0c:	2a 30       	cpi	r18, 0x0A	; 10
    2b0e:	40 f0       	brcs	.+16     	; 0x2b20 <vfprintf+0xb4>
    2b10:	8e 32       	cpi	r24, 0x2E	; 46
    2b12:	b9 f4       	brne	.+46     	; 0x2b42 <vfprintf+0xd6>
    2b14:	36 fc       	sbrc	r3, 6
    2b16:	81 c1       	rjmp	.+770    	; 0x2e1a <vfprintf+0x3ae>
    2b18:	23 2d       	mov	r18, r3
    2b1a:	20 64       	ori	r18, 0x40	; 64
    2b1c:	32 2e       	mov	r3, r18
    2b1e:	19 c0       	rjmp	.+50     	; 0x2b52 <vfprintf+0xe6>
    2b20:	36 fe       	sbrs	r3, 6
    2b22:	06 c0       	rjmp	.+12     	; 0x2b30 <vfprintf+0xc4>
    2b24:	8a e0       	ldi	r24, 0x0A	; 10
    2b26:	98 9e       	mul	r9, r24
    2b28:	20 0d       	add	r18, r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	92 2e       	mov	r9, r18
    2b2e:	11 c0       	rjmp	.+34     	; 0x2b52 <vfprintf+0xe6>
    2b30:	ea e0       	ldi	r30, 0x0A	; 10
    2b32:	2e 9e       	mul	r2, r30
    2b34:	20 0d       	add	r18, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	22 2e       	mov	r2, r18
    2b3a:	f3 2d       	mov	r31, r3
    2b3c:	f0 62       	ori	r31, 0x20	; 32
    2b3e:	3f 2e       	mov	r3, r31
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <vfprintf+0xe6>
    2b42:	8c 36       	cpi	r24, 0x6C	; 108
    2b44:	21 f4       	brne	.+8      	; 0x2b4e <vfprintf+0xe2>
    2b46:	83 2d       	mov	r24, r3
    2b48:	80 68       	ori	r24, 0x80	; 128
    2b4a:	38 2e       	mov	r3, r24
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <vfprintf+0xe6>
    2b4e:	88 36       	cpi	r24, 0x68	; 104
    2b50:	41 f4       	brne	.+16     	; 0x2b62 <vfprintf+0xf6>
    2b52:	f7 01       	movw	r30, r14
    2b54:	93 fd       	sbrc	r25, 3
    2b56:	85 91       	lpm	r24, Z+
    2b58:	93 ff       	sbrs	r25, 3
    2b5a:	81 91       	ld	r24, Z+
    2b5c:	7f 01       	movw	r14, r30
    2b5e:	81 11       	cpse	r24, r1
    2b60:	b3 cf       	rjmp	.-154    	; 0x2ac8 <vfprintf+0x5c>
    2b62:	98 2f       	mov	r25, r24
    2b64:	9f 7d       	andi	r25, 0xDF	; 223
    2b66:	95 54       	subi	r25, 0x45	; 69
    2b68:	93 30       	cpi	r25, 0x03	; 3
    2b6a:	28 f4       	brcc	.+10     	; 0x2b76 <vfprintf+0x10a>
    2b6c:	0c 5f       	subi	r16, 0xFC	; 252
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	9f e3       	ldi	r25, 0x3F	; 63
    2b72:	99 83       	std	Y+1, r25	; 0x01
    2b74:	0d c0       	rjmp	.+26     	; 0x2b90 <vfprintf+0x124>
    2b76:	83 36       	cpi	r24, 0x63	; 99
    2b78:	31 f0       	breq	.+12     	; 0x2b86 <vfprintf+0x11a>
    2b7a:	83 37       	cpi	r24, 0x73	; 115
    2b7c:	71 f0       	breq	.+28     	; 0x2b9a <vfprintf+0x12e>
    2b7e:	83 35       	cpi	r24, 0x53	; 83
    2b80:	09 f0       	breq	.+2      	; 0x2b84 <vfprintf+0x118>
    2b82:	59 c0       	rjmp	.+178    	; 0x2c36 <vfprintf+0x1ca>
    2b84:	21 c0       	rjmp	.+66     	; 0x2bc8 <vfprintf+0x15c>
    2b86:	f8 01       	movw	r30, r16
    2b88:	80 81       	ld	r24, Z
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	0e 5f       	subi	r16, 0xFE	; 254
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	88 24       	eor	r8, r8
    2b92:	83 94       	inc	r8
    2b94:	91 2c       	mov	r9, r1
    2b96:	53 01       	movw	r10, r6
    2b98:	13 c0       	rjmp	.+38     	; 0x2bc0 <vfprintf+0x154>
    2b9a:	28 01       	movw	r4, r16
    2b9c:	f2 e0       	ldi	r31, 0x02	; 2
    2b9e:	4f 0e       	add	r4, r31
    2ba0:	51 1c       	adc	r5, r1
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	a0 80       	ld	r10, Z
    2ba6:	b1 80       	ldd	r11, Z+1	; 0x01
    2ba8:	36 fe       	sbrs	r3, 6
    2baa:	03 c0       	rjmp	.+6      	; 0x2bb2 <vfprintf+0x146>
    2bac:	69 2d       	mov	r22, r9
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <vfprintf+0x14a>
    2bb2:	6f ef       	ldi	r22, 0xFF	; 255
    2bb4:	7f ef       	ldi	r23, 0xFF	; 255
    2bb6:	c5 01       	movw	r24, r10
    2bb8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <strnlen>
    2bbc:	4c 01       	movw	r8, r24
    2bbe:	82 01       	movw	r16, r4
    2bc0:	f3 2d       	mov	r31, r3
    2bc2:	ff 77       	andi	r31, 0x7F	; 127
    2bc4:	3f 2e       	mov	r3, r31
    2bc6:	16 c0       	rjmp	.+44     	; 0x2bf4 <vfprintf+0x188>
    2bc8:	28 01       	movw	r4, r16
    2bca:	22 e0       	ldi	r18, 0x02	; 2
    2bcc:	42 0e       	add	r4, r18
    2bce:	51 1c       	adc	r5, r1
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	a0 80       	ld	r10, Z
    2bd4:	b1 80       	ldd	r11, Z+1	; 0x01
    2bd6:	36 fe       	sbrs	r3, 6
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <vfprintf+0x174>
    2bda:	69 2d       	mov	r22, r9
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <vfprintf+0x178>
    2be0:	6f ef       	ldi	r22, 0xFF	; 255
    2be2:	7f ef       	ldi	r23, 0xFF	; 255
    2be4:	c5 01       	movw	r24, r10
    2be6:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <strnlen_P>
    2bea:	4c 01       	movw	r8, r24
    2bec:	f3 2d       	mov	r31, r3
    2bee:	f0 68       	ori	r31, 0x80	; 128
    2bf0:	3f 2e       	mov	r3, r31
    2bf2:	82 01       	movw	r16, r4
    2bf4:	33 fc       	sbrc	r3, 3
    2bf6:	1b c0       	rjmp	.+54     	; 0x2c2e <vfprintf+0x1c2>
    2bf8:	82 2d       	mov	r24, r2
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	88 16       	cp	r8, r24
    2bfe:	99 06       	cpc	r9, r25
    2c00:	b0 f4       	brcc	.+44     	; 0x2c2e <vfprintf+0x1c2>
    2c02:	b6 01       	movw	r22, r12
    2c04:	80 e2       	ldi	r24, 0x20	; 32
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2c0c:	2a 94       	dec	r2
    2c0e:	f4 cf       	rjmp	.-24     	; 0x2bf8 <vfprintf+0x18c>
    2c10:	f5 01       	movw	r30, r10
    2c12:	37 fc       	sbrc	r3, 7
    2c14:	85 91       	lpm	r24, Z+
    2c16:	37 fe       	sbrs	r3, 7
    2c18:	81 91       	ld	r24, Z+
    2c1a:	5f 01       	movw	r10, r30
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2c24:	21 10       	cpse	r2, r1
    2c26:	2a 94       	dec	r2
    2c28:	21 e0       	ldi	r18, 0x01	; 1
    2c2a:	82 1a       	sub	r8, r18
    2c2c:	91 08       	sbc	r9, r1
    2c2e:	81 14       	cp	r8, r1
    2c30:	91 04       	cpc	r9, r1
    2c32:	71 f7       	brne	.-36     	; 0x2c10 <vfprintf+0x1a4>
    2c34:	e8 c0       	rjmp	.+464    	; 0x2e06 <vfprintf+0x39a>
    2c36:	84 36       	cpi	r24, 0x64	; 100
    2c38:	11 f0       	breq	.+4      	; 0x2c3e <vfprintf+0x1d2>
    2c3a:	89 36       	cpi	r24, 0x69	; 105
    2c3c:	41 f5       	brne	.+80     	; 0x2c8e <vfprintf+0x222>
    2c3e:	f8 01       	movw	r30, r16
    2c40:	37 fe       	sbrs	r3, 7
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <vfprintf+0x1e6>
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	0c 5f       	subi	r16, 0xFC	; 252
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	08 c0       	rjmp	.+16     	; 0x2c62 <vfprintf+0x1f6>
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	07 2e       	mov	r0, r23
    2c58:	00 0c       	add	r0, r0
    2c5a:	88 0b       	sbc	r24, r24
    2c5c:	99 0b       	sbc	r25, r25
    2c5e:	0e 5f       	subi	r16, 0xFE	; 254
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	f3 2d       	mov	r31, r3
    2c64:	ff 76       	andi	r31, 0x6F	; 111
    2c66:	3f 2e       	mov	r3, r31
    2c68:	97 ff       	sbrs	r25, 7
    2c6a:	09 c0       	rjmp	.+18     	; 0x2c7e <vfprintf+0x212>
    2c6c:	90 95       	com	r25
    2c6e:	80 95       	com	r24
    2c70:	70 95       	com	r23
    2c72:	61 95       	neg	r22
    2c74:	7f 4f       	sbci	r23, 0xFF	; 255
    2c76:	8f 4f       	sbci	r24, 0xFF	; 255
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	f0 68       	ori	r31, 0x80	; 128
    2c7c:	3f 2e       	mov	r3, r31
    2c7e:	2a e0       	ldi	r18, 0x0A	; 10
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	a3 01       	movw	r20, r6
    2c84:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__ultoa_invert>
    2c88:	88 2e       	mov	r8, r24
    2c8a:	86 18       	sub	r8, r6
    2c8c:	45 c0       	rjmp	.+138    	; 0x2d18 <vfprintf+0x2ac>
    2c8e:	85 37       	cpi	r24, 0x75	; 117
    2c90:	31 f4       	brne	.+12     	; 0x2c9e <vfprintf+0x232>
    2c92:	23 2d       	mov	r18, r3
    2c94:	2f 7e       	andi	r18, 0xEF	; 239
    2c96:	b2 2e       	mov	r11, r18
    2c98:	2a e0       	ldi	r18, 0x0A	; 10
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	25 c0       	rjmp	.+74     	; 0x2ce8 <vfprintf+0x27c>
    2c9e:	93 2d       	mov	r25, r3
    2ca0:	99 7f       	andi	r25, 0xF9	; 249
    2ca2:	b9 2e       	mov	r11, r25
    2ca4:	8f 36       	cpi	r24, 0x6F	; 111
    2ca6:	c1 f0       	breq	.+48     	; 0x2cd8 <vfprintf+0x26c>
    2ca8:	18 f4       	brcc	.+6      	; 0x2cb0 <vfprintf+0x244>
    2caa:	88 35       	cpi	r24, 0x58	; 88
    2cac:	79 f0       	breq	.+30     	; 0x2ccc <vfprintf+0x260>
    2cae:	b5 c0       	rjmp	.+362    	; 0x2e1a <vfprintf+0x3ae>
    2cb0:	80 37       	cpi	r24, 0x70	; 112
    2cb2:	19 f0       	breq	.+6      	; 0x2cba <vfprintf+0x24e>
    2cb4:	88 37       	cpi	r24, 0x78	; 120
    2cb6:	21 f0       	breq	.+8      	; 0x2cc0 <vfprintf+0x254>
    2cb8:	b0 c0       	rjmp	.+352    	; 0x2e1a <vfprintf+0x3ae>
    2cba:	e9 2f       	mov	r30, r25
    2cbc:	e0 61       	ori	r30, 0x10	; 16
    2cbe:	be 2e       	mov	r11, r30
    2cc0:	b4 fe       	sbrs	r11, 4
    2cc2:	0d c0       	rjmp	.+26     	; 0x2cde <vfprintf+0x272>
    2cc4:	fb 2d       	mov	r31, r11
    2cc6:	f4 60       	ori	r31, 0x04	; 4
    2cc8:	bf 2e       	mov	r11, r31
    2cca:	09 c0       	rjmp	.+18     	; 0x2cde <vfprintf+0x272>
    2ccc:	34 fe       	sbrs	r3, 4
    2cce:	0a c0       	rjmp	.+20     	; 0x2ce4 <vfprintf+0x278>
    2cd0:	29 2f       	mov	r18, r25
    2cd2:	26 60       	ori	r18, 0x06	; 6
    2cd4:	b2 2e       	mov	r11, r18
    2cd6:	06 c0       	rjmp	.+12     	; 0x2ce4 <vfprintf+0x278>
    2cd8:	28 e0       	ldi	r18, 0x08	; 8
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <vfprintf+0x27c>
    2cde:	20 e1       	ldi	r18, 0x10	; 16
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <vfprintf+0x27c>
    2ce4:	20 e1       	ldi	r18, 0x10	; 16
    2ce6:	32 e0       	ldi	r19, 0x02	; 2
    2ce8:	f8 01       	movw	r30, r16
    2cea:	b7 fe       	sbrs	r11, 7
    2cec:	07 c0       	rjmp	.+14     	; 0x2cfc <vfprintf+0x290>
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	0c 5f       	subi	r16, 0xFC	; 252
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	06 c0       	rjmp	.+12     	; 0x2d08 <vfprintf+0x29c>
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 5f       	subi	r16, 0xFE	; 254
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	a3 01       	movw	r20, r6
    2d0a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__ultoa_invert>
    2d0e:	88 2e       	mov	r8, r24
    2d10:	86 18       	sub	r8, r6
    2d12:	fb 2d       	mov	r31, r11
    2d14:	ff 77       	andi	r31, 0x7F	; 127
    2d16:	3f 2e       	mov	r3, r31
    2d18:	36 fe       	sbrs	r3, 6
    2d1a:	0d c0       	rjmp	.+26     	; 0x2d36 <vfprintf+0x2ca>
    2d1c:	23 2d       	mov	r18, r3
    2d1e:	2e 7f       	andi	r18, 0xFE	; 254
    2d20:	a2 2e       	mov	r10, r18
    2d22:	89 14       	cp	r8, r9
    2d24:	58 f4       	brcc	.+22     	; 0x2d3c <vfprintf+0x2d0>
    2d26:	34 fe       	sbrs	r3, 4
    2d28:	0b c0       	rjmp	.+22     	; 0x2d40 <vfprintf+0x2d4>
    2d2a:	32 fc       	sbrc	r3, 2
    2d2c:	09 c0       	rjmp	.+18     	; 0x2d40 <vfprintf+0x2d4>
    2d2e:	83 2d       	mov	r24, r3
    2d30:	8e 7e       	andi	r24, 0xEE	; 238
    2d32:	a8 2e       	mov	r10, r24
    2d34:	05 c0       	rjmp	.+10     	; 0x2d40 <vfprintf+0x2d4>
    2d36:	b8 2c       	mov	r11, r8
    2d38:	a3 2c       	mov	r10, r3
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <vfprintf+0x2d6>
    2d3c:	b8 2c       	mov	r11, r8
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <vfprintf+0x2d6>
    2d40:	b9 2c       	mov	r11, r9
    2d42:	a4 fe       	sbrs	r10, 4
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <vfprintf+0x2f8>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e8 0d       	add	r30, r8
    2d4a:	f1 1d       	adc	r31, r1
    2d4c:	80 81       	ld	r24, Z
    2d4e:	80 33       	cpi	r24, 0x30	; 48
    2d50:	21 f4       	brne	.+8      	; 0x2d5a <vfprintf+0x2ee>
    2d52:	9a 2d       	mov	r25, r10
    2d54:	99 7e       	andi	r25, 0xE9	; 233
    2d56:	a9 2e       	mov	r10, r25
    2d58:	09 c0       	rjmp	.+18     	; 0x2d6c <vfprintf+0x300>
    2d5a:	a2 fe       	sbrs	r10, 2
    2d5c:	06 c0       	rjmp	.+12     	; 0x2d6a <vfprintf+0x2fe>
    2d5e:	b3 94       	inc	r11
    2d60:	b3 94       	inc	r11
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <vfprintf+0x300>
    2d64:	8a 2d       	mov	r24, r10
    2d66:	86 78       	andi	r24, 0x86	; 134
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <vfprintf+0x300>
    2d6a:	b3 94       	inc	r11
    2d6c:	a3 fc       	sbrc	r10, 3
    2d6e:	11 c0       	rjmp	.+34     	; 0x2d92 <vfprintf+0x326>
    2d70:	a0 fe       	sbrs	r10, 0
    2d72:	06 c0       	rjmp	.+12     	; 0x2d80 <vfprintf+0x314>
    2d74:	b2 14       	cp	r11, r2
    2d76:	88 f4       	brcc	.+34     	; 0x2d9a <vfprintf+0x32e>
    2d78:	28 0c       	add	r2, r8
    2d7a:	92 2c       	mov	r9, r2
    2d7c:	9b 18       	sub	r9, r11
    2d7e:	0e c0       	rjmp	.+28     	; 0x2d9c <vfprintf+0x330>
    2d80:	b2 14       	cp	r11, r2
    2d82:	60 f4       	brcc	.+24     	; 0x2d9c <vfprintf+0x330>
    2d84:	b6 01       	movw	r22, r12
    2d86:	80 e2       	ldi	r24, 0x20	; 32
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2d8e:	b3 94       	inc	r11
    2d90:	f7 cf       	rjmp	.-18     	; 0x2d80 <vfprintf+0x314>
    2d92:	b2 14       	cp	r11, r2
    2d94:	18 f4       	brcc	.+6      	; 0x2d9c <vfprintf+0x330>
    2d96:	2b 18       	sub	r2, r11
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <vfprintf+0x332>
    2d9a:	98 2c       	mov	r9, r8
    2d9c:	21 2c       	mov	r2, r1
    2d9e:	a4 fe       	sbrs	r10, 4
    2da0:	10 c0       	rjmp	.+32     	; 0x2dc2 <vfprintf+0x356>
    2da2:	b6 01       	movw	r22, r12
    2da4:	80 e3       	ldi	r24, 0x30	; 48
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2dac:	a2 fe       	sbrs	r10, 2
    2dae:	17 c0       	rjmp	.+46     	; 0x2dde <vfprintf+0x372>
    2db0:	a1 fc       	sbrc	r10, 1
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <vfprintf+0x34e>
    2db4:	88 e7       	ldi	r24, 0x78	; 120
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <vfprintf+0x352>
    2dba:	88 e5       	ldi	r24, 0x58	; 88
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	0c c0       	rjmp	.+24     	; 0x2dda <vfprintf+0x36e>
    2dc2:	8a 2d       	mov	r24, r10
    2dc4:	86 78       	andi	r24, 0x86	; 134
    2dc6:	59 f0       	breq	.+22     	; 0x2dde <vfprintf+0x372>
    2dc8:	a1 fe       	sbrs	r10, 1
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <vfprintf+0x364>
    2dcc:	8b e2       	ldi	r24, 0x2B	; 43
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <vfprintf+0x366>
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	a7 fc       	sbrc	r10, 7
    2dd4:	8d e2       	ldi	r24, 0x2D	; 45
    2dd6:	b6 01       	movw	r22, r12
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2dde:	89 14       	cp	r8, r9
    2de0:	38 f4       	brcc	.+14     	; 0x2df0 <vfprintf+0x384>
    2de2:	b6 01       	movw	r22, r12
    2de4:	80 e3       	ldi	r24, 0x30	; 48
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2dec:	9a 94       	dec	r9
    2dee:	f7 cf       	rjmp	.-18     	; 0x2dde <vfprintf+0x372>
    2df0:	8a 94       	dec	r8
    2df2:	f3 01       	movw	r30, r6
    2df4:	e8 0d       	add	r30, r8
    2df6:	f1 1d       	adc	r31, r1
    2df8:	80 81       	ld	r24, Z
    2dfa:	b6 01       	movw	r22, r12
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2e02:	81 10       	cpse	r8, r1
    2e04:	f5 cf       	rjmp	.-22     	; 0x2df0 <vfprintf+0x384>
    2e06:	22 20       	and	r2, r2
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <vfprintf+0x3a0>
    2e0a:	42 ce       	rjmp	.-892    	; 0x2a90 <vfprintf+0x24>
    2e0c:	b6 01       	movw	r22, r12
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <fputc>
    2e16:	2a 94       	dec	r2
    2e18:	f6 cf       	rjmp	.-20     	; 0x2e06 <vfprintf+0x39a>
    2e1a:	f6 01       	movw	r30, r12
    2e1c:	86 81       	ldd	r24, Z+6	; 0x06
    2e1e:	97 81       	ldd	r25, Z+7	; 0x07
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <vfprintf+0x3ba>
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	9f ef       	ldi	r25, 0xFF	; 255
    2e26:	2b 96       	adiw	r28, 0x0b	; 11
    2e28:	e2 e1       	ldi	r30, 0x12	; 18
    2e2a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__>

00002e2e <strnlen_P>:
    2e2e:	fc 01       	movw	r30, r24
    2e30:	05 90       	lpm	r0, Z+
    2e32:	61 50       	subi	r22, 0x01	; 1
    2e34:	70 40       	sbci	r23, 0x00	; 0
    2e36:	01 10       	cpse	r0, r1
    2e38:	d8 f7       	brcc	.-10     	; 0x2e30 <strnlen_P+0x2>
    2e3a:	80 95       	com	r24
    2e3c:	90 95       	com	r25
    2e3e:	8e 0f       	add	r24, r30
    2e40:	9f 1f       	adc	r25, r31
    2e42:	08 95       	ret

00002e44 <strnlen>:
    2e44:	fc 01       	movw	r30, r24
    2e46:	61 50       	subi	r22, 0x01	; 1
    2e48:	70 40       	sbci	r23, 0x00	; 0
    2e4a:	01 90       	ld	r0, Z+
    2e4c:	01 10       	cpse	r0, r1
    2e4e:	d8 f7       	brcc	.-10     	; 0x2e46 <strnlen+0x2>
    2e50:	80 95       	com	r24
    2e52:	90 95       	com	r25
    2e54:	8e 0f       	add	r24, r30
    2e56:	9f 1f       	adc	r25, r31
    2e58:	08 95       	ret

00002e5a <fputc>:
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	fb 01       	movw	r30, r22
    2e64:	23 81       	ldd	r18, Z+3	; 0x03
    2e66:	21 fd       	sbrc	r18, 1
    2e68:	03 c0       	rjmp	.+6      	; 0x2e70 <fputc+0x16>
    2e6a:	8f ef       	ldi	r24, 0xFF	; 255
    2e6c:	9f ef       	ldi	r25, 0xFF	; 255
    2e6e:	2c c0       	rjmp	.+88     	; 0x2ec8 <fputc+0x6e>
    2e70:	22 ff       	sbrs	r18, 2
    2e72:	16 c0       	rjmp	.+44     	; 0x2ea0 <fputc+0x46>
    2e74:	46 81       	ldd	r20, Z+6	; 0x06
    2e76:	57 81       	ldd	r21, Z+7	; 0x07
    2e78:	24 81       	ldd	r18, Z+4	; 0x04
    2e7a:	35 81       	ldd	r19, Z+5	; 0x05
    2e7c:	42 17       	cp	r20, r18
    2e7e:	53 07       	cpc	r21, r19
    2e80:	44 f4       	brge	.+16     	; 0x2e92 <fputc+0x38>
    2e82:	a0 81       	ld	r26, Z
    2e84:	b1 81       	ldd	r27, Z+1	; 0x01
    2e86:	9d 01       	movw	r18, r26
    2e88:	2f 5f       	subi	r18, 0xFF	; 255
    2e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8c:	31 83       	std	Z+1, r19	; 0x01
    2e8e:	20 83       	st	Z, r18
    2e90:	8c 93       	st	X, r24
    2e92:	26 81       	ldd	r18, Z+6	; 0x06
    2e94:	37 81       	ldd	r19, Z+7	; 0x07
    2e96:	2f 5f       	subi	r18, 0xFF	; 255
    2e98:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9a:	37 83       	std	Z+7, r19	; 0x07
    2e9c:	26 83       	std	Z+6, r18	; 0x06
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <fputc+0x6e>
    2ea0:	8b 01       	movw	r16, r22
    2ea2:	ec 01       	movw	r28, r24
    2ea4:	fb 01       	movw	r30, r22
    2ea6:	00 84       	ldd	r0, Z+8	; 0x08
    2ea8:	f1 85       	ldd	r31, Z+9	; 0x09
    2eaa:	e0 2d       	mov	r30, r0
    2eac:	09 95       	icall
    2eae:	89 2b       	or	r24, r25
    2eb0:	e1 f6       	brne	.-72     	; 0x2e6a <fputc+0x10>
    2eb2:	d8 01       	movw	r26, r16
    2eb4:	16 96       	adiw	r26, 0x06	; 6
    2eb6:	8d 91       	ld	r24, X+
    2eb8:	9c 91       	ld	r25, X
    2eba:	17 97       	sbiw	r26, 0x07	; 7
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	17 96       	adiw	r26, 0x07	; 7
    2ec0:	9c 93       	st	X, r25
    2ec2:	8e 93       	st	-X, r24
    2ec4:	16 97       	sbiw	r26, 0x06	; 6
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <__ultoa_invert>:
    2ed2:	fa 01       	movw	r30, r20
    2ed4:	aa 27       	eor	r26, r26
    2ed6:	28 30       	cpi	r18, 0x08	; 8
    2ed8:	51 f1       	breq	.+84     	; 0x2f2e <__ultoa_invert+0x5c>
    2eda:	20 31       	cpi	r18, 0x10	; 16
    2edc:	81 f1       	breq	.+96     	; 0x2f3e <__ultoa_invert+0x6c>
    2ede:	e8 94       	clt
    2ee0:	6f 93       	push	r22
    2ee2:	6e 7f       	andi	r22, 0xFE	; 254
    2ee4:	6e 5f       	subi	r22, 0xFE	; 254
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eea:	9f 4f       	sbci	r25, 0xFF	; 255
    2eec:	af 4f       	sbci	r26, 0xFF	; 255
    2eee:	b1 e0       	ldi	r27, 0x01	; 1
    2ef0:	3e d0       	rcall	.+124    	; 0x2f6e <__ultoa_invert+0x9c>
    2ef2:	b4 e0       	ldi	r27, 0x04	; 4
    2ef4:	3c d0       	rcall	.+120    	; 0x2f6e <__ultoa_invert+0x9c>
    2ef6:	67 0f       	add	r22, r23
    2ef8:	78 1f       	adc	r23, r24
    2efa:	89 1f       	adc	r24, r25
    2efc:	9a 1f       	adc	r25, r26
    2efe:	a1 1d       	adc	r26, r1
    2f00:	68 0f       	add	r22, r24
    2f02:	79 1f       	adc	r23, r25
    2f04:	8a 1f       	adc	r24, r26
    2f06:	91 1d       	adc	r25, r1
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	6a 0f       	add	r22, r26
    2f0c:	71 1d       	adc	r23, r1
    2f0e:	81 1d       	adc	r24, r1
    2f10:	91 1d       	adc	r25, r1
    2f12:	a1 1d       	adc	r26, r1
    2f14:	20 d0       	rcall	.+64     	; 0x2f56 <__ultoa_invert+0x84>
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <__ultoa_invert+0x48>
    2f18:	68 94       	set
    2f1a:	3f 91       	pop	r19
    2f1c:	2a e0       	ldi	r18, 0x0A	; 10
    2f1e:	26 9f       	mul	r18, r22
    2f20:	11 24       	eor	r1, r1
    2f22:	30 19       	sub	r19, r0
    2f24:	30 5d       	subi	r19, 0xD0	; 208
    2f26:	31 93       	st	Z+, r19
    2f28:	de f6       	brtc	.-74     	; 0x2ee0 <__ultoa_invert+0xe>
    2f2a:	cf 01       	movw	r24, r30
    2f2c:	08 95       	ret
    2f2e:	46 2f       	mov	r20, r22
    2f30:	47 70       	andi	r20, 0x07	; 7
    2f32:	40 5d       	subi	r20, 0xD0	; 208
    2f34:	41 93       	st	Z+, r20
    2f36:	b3 e0       	ldi	r27, 0x03	; 3
    2f38:	0f d0       	rcall	.+30     	; 0x2f58 <__ultoa_invert+0x86>
    2f3a:	c9 f7       	brne	.-14     	; 0x2f2e <__ultoa_invert+0x5c>
    2f3c:	f6 cf       	rjmp	.-20     	; 0x2f2a <__ultoa_invert+0x58>
    2f3e:	46 2f       	mov	r20, r22
    2f40:	4f 70       	andi	r20, 0x0F	; 15
    2f42:	40 5d       	subi	r20, 0xD0	; 208
    2f44:	4a 33       	cpi	r20, 0x3A	; 58
    2f46:	18 f0       	brcs	.+6      	; 0x2f4e <__ultoa_invert+0x7c>
    2f48:	49 5d       	subi	r20, 0xD9	; 217
    2f4a:	31 fd       	sbrc	r19, 1
    2f4c:	40 52       	subi	r20, 0x20	; 32
    2f4e:	41 93       	st	Z+, r20
    2f50:	02 d0       	rcall	.+4      	; 0x2f56 <__ultoa_invert+0x84>
    2f52:	a9 f7       	brne	.-22     	; 0x2f3e <__ultoa_invert+0x6c>
    2f54:	ea cf       	rjmp	.-44     	; 0x2f2a <__ultoa_invert+0x58>
    2f56:	b4 e0       	ldi	r27, 0x04	; 4
    2f58:	a6 95       	lsr	r26
    2f5a:	97 95       	ror	r25
    2f5c:	87 95       	ror	r24
    2f5e:	77 95       	ror	r23
    2f60:	67 95       	ror	r22
    2f62:	ba 95       	dec	r27
    2f64:	c9 f7       	brne	.-14     	; 0x2f58 <__ultoa_invert+0x86>
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	61 05       	cpc	r22, r1
    2f6a:	71 05       	cpc	r23, r1
    2f6c:	08 95       	ret
    2f6e:	9b 01       	movw	r18, r22
    2f70:	ac 01       	movw	r20, r24
    2f72:	0a 2e       	mov	r0, r26
    2f74:	06 94       	lsr	r0
    2f76:	57 95       	ror	r21
    2f78:	47 95       	ror	r20
    2f7a:	37 95       	ror	r19
    2f7c:	27 95       	ror	r18
    2f7e:	ba 95       	dec	r27
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <__ultoa_invert+0xa2>
    2f82:	62 0f       	add	r22, r18
    2f84:	73 1f       	adc	r23, r19
    2f86:	84 1f       	adc	r24, r20
    2f88:	95 1f       	adc	r25, r21
    2f8a:	a0 1d       	adc	r26, r0
    2f8c:	08 95       	ret

00002f8e <__prologue_saves__>:
    2f8e:	2f 92       	push	r2
    2f90:	3f 92       	push	r3
    2f92:	4f 92       	push	r4
    2f94:	5f 92       	push	r5
    2f96:	6f 92       	push	r6
    2f98:	7f 92       	push	r7
    2f9a:	8f 92       	push	r8
    2f9c:	9f 92       	push	r9
    2f9e:	af 92       	push	r10
    2fa0:	bf 92       	push	r11
    2fa2:	cf 92       	push	r12
    2fa4:	df 92       	push	r13
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	ca 1b       	sub	r28, r26
    2fb8:	db 0b       	sbc	r29, r27
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	09 94       	ijmp

00002fc6 <__epilogue_restores__>:
    2fc6:	2a 88       	ldd	r2, Y+18	; 0x12
    2fc8:	39 88       	ldd	r3, Y+17	; 0x11
    2fca:	48 88       	ldd	r4, Y+16	; 0x10
    2fcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fce:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fd8:	b9 84       	ldd	r11, Y+9	; 0x09
    2fda:	c8 84       	ldd	r12, Y+8	; 0x08
    2fdc:	df 80       	ldd	r13, Y+7	; 0x07
    2fde:	ee 80       	ldd	r14, Y+6	; 0x06
    2fe0:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe2:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe4:	1b 81       	ldd	r17, Y+3	; 0x03
    2fe6:	aa 81       	ldd	r26, Y+2	; 0x02
    2fe8:	b9 81       	ldd	r27, Y+1	; 0x01
    2fea:	ce 0f       	add	r28, r30
    2fec:	d1 1d       	adc	r29, r1
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	ed 01       	movw	r28, r26
    2ffa:	08 95       	ret

00002ffc <_exit>:
    2ffc:	f8 94       	cli

00002ffe <__stop_program>:
    2ffe:	ff cf       	rjmp	.-2      	; 0x2ffe <__stop_program>
